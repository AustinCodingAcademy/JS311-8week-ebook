{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS311 - Node Servers + SQL Databases Objective Statement By the end of this course, students will complete and deploy a REST API (the back-end server & database) for their Capstone Project app. Through the understanding of data modeling, routing, authentication, and the use of the express library, students will learn and practice building server routes complete with authentication and authorization. The final checkpoint in this course is the hosted REST API which will be used as the back-end server for the front-end app they build in their 411 course. These two pieces will come together to create a full-stack application that students will present to the public at graduation as their Capstone Project. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class. To Graduate the Full-Stack Program A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website. To Present at Graduation To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code ) How To Use This Textbook Video Additional Resources Daily Student Presentations Daily Student Presentation Git Commands Short-cuts {% hidden %} For Instructor Use:","title":"Home"},{"location":"#welcome-to-js311-node-servers-sql-databases","text":"","title":"Welcome to JS311 - Node Servers + SQL Databases"},{"location":"#objective-statement","text":"By the end of this course, students will complete and deploy a REST API (the back-end server & database) for their Capstone Project app. Through the understanding of data modeling, routing, authentication, and the use of the express library, students will learn and practice building server routes complete with authentication and authorization. The final checkpoint in this course is the hosted REST API which will be used as the back-end server for the front-end app they build in their 411 course. These two pieces will come together to create a full-stack application that students will present to the public at graduation as their Capstone Project.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class.","title":"To Pass This Class (and all others)"},{"location":"#to-graduate-the-full-stack-program","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"To Graduate the Full-Stack Program"},{"location":"#to-present-at-graduation","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"To Present at Graduation"},{"location":"#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"#additional-resources","text":"","title":"Additional Resources"},{"location":"#daily-student-presentations","text":"Daily Student Presentation","title":"Daily Student Presentations"},{"location":"#git-commands","text":"","title":"Git Commands"},{"location":"#short-cuts","text":"{% hidden %} For Instructor Use:","title":"Short-cuts"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 How do you organize your code? What are some suggestions you find on the web? Can you describe your workflow when you create a web page or web app? You can\u2019t work out how to solve a coding problem, where do you find the answer? Why? How do you know? What problems have you solved that didn\u2019t involve you coding? Talk about your preferred development environment. (What IDE or text editor you enjoy, and why?) How are you keeping up with the latest developments in web development? Class 4 [ ] Class 6 [ ] Class 8 [ ] Class 10 [ ] Class 12 [ ] Class 14 [ ] Class 16 [ ]","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2","text":"How do you organize your code? What are some suggestions you find on the web? Can you describe your workflow when you create a web page or web app? You can\u2019t work out how to solve a coding problem, where do you find the answer? Why? How do you know? What problems have you solved that didn\u2019t involve you coding? Talk about your preferred development environment. (What IDE or text editor you enjoy, and why?) How are you keeping up with the latest developments in web development?","title":"Class 2"},{"location":"additionalResources/blogPrompts/#class-4","text":"[ ]","title":"Class 4"},{"location":"additionalResources/blogPrompts/#class-6","text":"[ ]","title":"Class 6"},{"location":"additionalResources/blogPrompts/#class-8","text":"[ ]","title":"Class 8"},{"location":"additionalResources/blogPrompts/#class-10","text":"[ ]","title":"Class 10"},{"location":"additionalResources/blogPrompts/#class-12","text":"[ ]","title":"Class 12"},{"location":"additionalResources/blogPrompts/#class-14","text":"[ ]","title":"Class 14"},{"location":"additionalResources/blogPrompts/#class-16","text":"[ ]","title":"Class 16"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate , rewrite , and clarify the question. Write the expected return given the input. Make a code plan and speak aloud with your interviewers/team. Test and come up with edge cases. Revise if you can for efficiency. Restate, Rewrite, Clarify, Return, Plan, Collaborate, Code, Test, Revise Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. The Prompts Class 1 Prompt 1: Using HTTP and APIs - All together at the same time. We'll hear thoughts and discussion afterward. Write out the URI to get an individual character from the Star Wars API. Highlight the pieces of the URI and explain what they mean. Explain what is included in an HTTP request message. Write it out and explain the parts. Explain what is included in an HTTP response message. Write it out and explain the parts. Diagram what happens when a client makes a GET request. What is included in the request? - [ ] What is included in the response? Diagram a POST request to create a resource. What is included in the request? What is included in the response? Class 2 Prompt 1: sumOneForOne - There are two arrays with individual values. Write a JavaScript program to compute the sum of each individual index value from the given arrays. 1 2 3 4 5 6 let array1 = [ 1 , 0 , 2 , 3 , 4 ]; let array2 = [ 3 , 5 , 6 , 7 , 8 , 13 ]; const sumOneForOne = () => { /*your code here*/ } sumOneForOne ( array1 , array2 ) // => [4, 5, 8, 10, 12, 13] Prompt 2: RESTful Design - Design a REST API for a photo album site. What resources would the API support? What operations can be done on those resources, and what HTTP verb would be used for each? What would the body of a request and response look like for each operation? For this first whiteboarding challenge, the instructor will lead the discovery. The Instructor will lead this discussion with input from the class. Class 3 Prompt 1: Title - Your customer has sa list of volume, which you have neatly stored into an array. One of the properties of each volume is a protection policy. The customer wants their users to be able to apply a protection policy to new volumes globally, if all of the existing volumes have the same policy. You need to write a function that returns a boolean. true , meaning all the policies in the array are the same, or false , meaning at least one policy in the array is different from another. The caveat here is, new volumes are also in this array, and their policy is denoted as a special string '--:--' . This means there is no policy on the volume and thus, the volume is new. If all the policies in the array are the same, we can apply that policy globally TO the new volumes, else, we cannot, and will have to go new-volume by new-volume, applying policies individually. Policies are denoted with characters 'A' 'B' 'C' or 'D'. New volume policies are denoted with the special string '--:--' . 1 2 3 4 5 6 7 INPUT: [ {policy: 'A'}, {policy: 'A'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'A'},] OUTPUT: true, set global policy INPUT: [ {policy: 'A'}, {policy: 'B'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'C'},] OUTPUT: false, prevent global policy With this data, build a function that determines if setting a global policy is possible or not. Class 4 Prompt 1: Title - description Class 5 Prompt 1: Title - description Class 6 Prompt 1: Title - description Class 7 Prompt 1: Title - description Class 8 Prompt 1: Title - description Class 9 Prompt 1: Title - description Class 10 Prompt 1: Title - description Class 11 Prompt 1: Title - description Class 12 Prompt 1: Title - description Class 13 Prompt 1: Title - description Class 14 Prompt 1: Title - description Class 15 Prompt 1: Title - description Class 16 Prompt 1: Title - description","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate , rewrite , and clarify the question. Write the expected return given the input. Make a code plan and speak aloud with your interviewers/team. Test and come up with edge cases. Revise if you can for efficiency. Restate, Rewrite, Clarify, Return, Plan, Collaborate, Code, Test, Revise Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: Using HTTP and APIs - All together at the same time. We'll hear thoughts and discussion afterward. Write out the URI to get an individual character from the Star Wars API. Highlight the pieces of the URI and explain what they mean. Explain what is included in an HTTP request message. Write it out and explain the parts. Explain what is included in an HTTP response message. Write it out and explain the parts. Diagram what happens when a client makes a GET request. What is included in the request? - [ ] What is included in the response? Diagram a POST request to create a resource. What is included in the request? What is included in the response?","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: sumOneForOne - There are two arrays with individual values. Write a JavaScript program to compute the sum of each individual index value from the given arrays. 1 2 3 4 5 6 let array1 = [ 1 , 0 , 2 , 3 , 4 ]; let array2 = [ 3 , 5 , 6 , 7 , 8 , 13 ]; const sumOneForOne = () => { /*your code here*/ } sumOneForOne ( array1 , array2 ) // => [4, 5, 8, 10, 12, 13] Prompt 2: RESTful Design - Design a REST API for a photo album site. What resources would the API support? What operations can be done on those resources, and what HTTP verb would be used for each? What would the body of a request and response look like for each operation? For this first whiteboarding challenge, the instructor will lead the discovery. The Instructor will lead this discussion with input from the class.","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: Title - Your customer has sa list of volume, which you have neatly stored into an array. One of the properties of each volume is a protection policy. The customer wants their users to be able to apply a protection policy to new volumes globally, if all of the existing volumes have the same policy. You need to write a function that returns a boolean. true , meaning all the policies in the array are the same, or false , meaning at least one policy in the array is different from another. The caveat here is, new volumes are also in this array, and their policy is denoted as a special string '--:--' . This means there is no policy on the volume and thus, the volume is new. If all the policies in the array are the same, we can apply that policy globally TO the new volumes, else, we cannot, and will have to go new-volume by new-volume, applying policies individually. Policies are denoted with characters 'A' 'B' 'C' or 'D'. New volume policies are denoted with the special string '--:--' . 1 2 3 4 5 6 7 INPUT: [ {policy: 'A'}, {policy: 'A'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'A'},] OUTPUT: true, set global policy INPUT: [ {policy: 'A'}, {policy: 'B'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'C'},] OUTPUT: false, prevent global policy With this data, build a function that determines if setting a global policy is possible or not.","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: Title - description","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: Title - description","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Title - description","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: Title - description","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Title - description","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Title - description","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Title - description","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: Title - description","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Title - description","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Title - description","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Title - description","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: Title - description","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Title - description","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentation Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness. Class 1 There will be no student presentation for the first class. NOTE: In the first three days of this course you will divide the class evenly into the three days and students will present their graduation project idea in a 2-minute pitch. Example: 20 students / 3 days = 6, 7, 7 NOTE: During the last three days of this course, the students will again be divided up evenly to ensure everyone presents over the topic listed below: Walk the class through the life-cycle of your app. Describe challenges and special features as you go. Use your code to show-and-tell. Organize and Coordinate who and when students are presenting. And organize and Coordinate who and when students are presenting. Class 2 None today. Class 3 50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 4 50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 5 Demystify \u201cContinuous Integration\u201d. Explain to the class what it is, why it\u2019s use and how to develop successful CI Processes. In order to build a site optimized for organic search engine rankings, it is important to implement certain standards throughout the code. These standards are... Class 6 What is multi-threading? Why and how do you use it? A common issue when integrating third party services within your own API requests is having to wait for the response, and as such, forcing the user to have to wait longer. How do you go about avoiding this? Class 7 How do you keep yourself updated about the new trends in the industry? Teach the class why, where and how to find the latest tech updates. How would you prevent a bot from scraping your publicly accessible API? Class 8 What is CORS? Teach the class what it is, why it's used and how to use it. What are the advantages of REST web services? Class 9 What are NoSQL databases? What are the different types of NoSQL databases? Explain SQL vs NoSQL. Error: \"Process out of Memory Exception\". What does it mean? Why is it happening and how do you fix it? Is Node good at CPU intensive tasks? Why or why not? Class 10 Module Requiring vs Dependency Injection: which is better and why? Explain what Reactor Pattern in Node.js is. Class 11 What's the difference between dependencies, devDependencies and peerDependencies in an npm package.json file? What is stream and what are the types of streams available in Node.js? Class 12 Teach the class ways to manage unhandled exceptions and rejections in Node. Node is a single threaded runtime, but how does it handle concurrent asynchronous calls? Class 13 What is Data Normalization? Why and How do we use it? Should we normalize our data before putting it into an SQL Database? Teach the class about stress, spike and unit testing. Why, what, And how are they implemented? Class 14 50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code. Class 15 50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code. Class 16 None today.","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness.","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#class-1","text":"There will be no student presentation for the first class. NOTE: In the first three days of this course you will divide the class evenly into the three days and students will present their graduation project idea in a 2-minute pitch. Example: 20 students / 3 days = 6, 7, 7 NOTE: During the last three days of this course, the students will again be divided up evenly to ensure everyone presents over the topic listed below: Walk the class through the life-cycle of your app. Describe challenges and special features as you go. Use your code to show-and-tell. Organize and Coordinate who and when students are presenting. And organize and Coordinate who and when students are presenting.","title":"Class 1"},{"location":"additionalResources/studentPresentations/#class-2","text":"None today.","title":"Class 2"},{"location":"additionalResources/studentPresentations/#class-3","text":"50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it?","title":"Class 3"},{"location":"additionalResources/studentPresentations/#class-4","text":"50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it?","title":"Class 4"},{"location":"additionalResources/studentPresentations/#class-5","text":"Demystify \u201cContinuous Integration\u201d. Explain to the class what it is, why it\u2019s use and how to develop successful CI Processes. In order to build a site optimized for organic search engine rankings, it is important to implement certain standards throughout the code. These standards are...","title":"Class 5"},{"location":"additionalResources/studentPresentations/#class-6","text":"What is multi-threading? Why and how do you use it? A common issue when integrating third party services within your own API requests is having to wait for the response, and as such, forcing the user to have to wait longer. How do you go about avoiding this?","title":"Class 6"},{"location":"additionalResources/studentPresentations/#class-7","text":"How do you keep yourself updated about the new trends in the industry? Teach the class why, where and how to find the latest tech updates. How would you prevent a bot from scraping your publicly accessible API?","title":"Class 7"},{"location":"additionalResources/studentPresentations/#class-8","text":"What is CORS? Teach the class what it is, why it's used and how to use it. What are the advantages of REST web services?","title":"Class 8"},{"location":"additionalResources/studentPresentations/#class-9","text":"What are NoSQL databases? What are the different types of NoSQL databases? Explain SQL vs NoSQL. Error: \"Process out of Memory Exception\". What does it mean? Why is it happening and how do you fix it? Is Node good at CPU intensive tasks? Why or why not?","title":"Class 9"},{"location":"additionalResources/studentPresentations/#class-10","text":"Module Requiring vs Dependency Injection: which is better and why? Explain what Reactor Pattern in Node.js is.","title":"Class 10"},{"location":"additionalResources/studentPresentations/#class-11","text":"What's the difference between dependencies, devDependencies and peerDependencies in an npm package.json file? What is stream and what are the types of streams available in Node.js?","title":"Class 11"},{"location":"additionalResources/studentPresentations/#class-12","text":"Teach the class ways to manage unhandled exceptions and rejections in Node. Node is a single threaded runtime, but how does it handle concurrent asynchronous calls?","title":"Class 12"},{"location":"additionalResources/studentPresentations/#class-13","text":"What is Data Normalization? Why and How do we use it? Should we normalize our data before putting it into an SQL Database? Teach the class about stress, spike and unit testing. Why, what, And how are they implemented?","title":"Class 13"},{"location":"additionalResources/studentPresentations/#class-14","text":"50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code.","title":"Class 14"},{"location":"additionalResources/studentPresentations/#class-15","text":"50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code.","title":"Class 15"},{"location":"additionalResources/studentPresentations/#class-16","text":"None today.","title":"Class 16"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up and have other questions to ask. We do not lecture in class, we discuss. What is Node.js? Where can you use it? Why use Node.js? Why is Node.js single-threaded? What are the features of Node.js? What is the ** What is a reso**urce, with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What is JSON? What formats are supported by REST APIs?","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up and have other questions to ask. We do not lecture in class, we discuss. What is Node.js? Where can you use it? Why use Node.js? Why is Node.js single-threaded? What are the features of Node.js? What is the ** What is a reso**urce, with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What is JSON? What formats are supported by REST APIs?","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two - Questions for Discussion Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up on your own and have other questions to ask. We do not lecture in class, we discuss. Axios and HTTP(S) What's the difference between a \"design pattern\" and a \"framework\"? How do you write a list request with Axios? What is the client-server model? What is a resource, with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What are some common HTTP status codes and what do they mean? What are some common HTTP headers and what are they used for? What is JSON? What formats are supported by REST APIs?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up on your own and have other questions to ask. We do not lecture in class, we discuss.","title":"Class Two - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#axios-and-https","text":"What's the difference between a \"design pattern\" and a \"framework\"? How do you write a list request with Axios? What is the client-server model? What is a resource, with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What are some common HTTP status codes and what do they mean? What are some common HTTP headers and what are they used for? What is JSON? What formats are supported by REST APIs?","title":"Axios and HTTP(S)"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/","text":"Class 3 - Questions for Discussion Express Server (Servers built with Express.js) What is the app.use() method doing? What's the difference between writing your route's callback function as (req, res) => { } and function(req, res){ } ? Why do we need to save Express as a variable? const app = express() Describe middleware. What's it used for? How many reasons can you find? What does the req object look like over HTTPS? Draw it out. What does the res object look like over HTTPS? Draw it out.","title":"Day 3 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#class-3-questions-for-discussion","text":"","title":"Class 3 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#express-server-servers-built-with-expressjs","text":"What is the app.use() method doing? What's the difference between writing your route's callback function as (req, res) => { } and function(req, res){ } ? Why do we need to save Express as a variable? const app = express() Describe middleware. What's it used for? How many reasons can you find? What does the req object look like over HTTPS? Draw it out. What does the res object look like over HTTPS? Draw it out.","title":"Express Server (Servers built with Express.js)"},{"location":"module-1/REST-HTTP-APIs/","text":"Intro to RESTful APIs Take calculated risks. That is quite different from being rash.\u2003\u2014George S. Patton Overview In this course, we're going to learn how to build an API using Node.js and Express . If you don't know exactly what an \"API\" is, why you'd want to build one, or how Express fits in, don't worry! That's why we're here. What's an API? A traditional software application has a user interface( UI ): a mechanism that allows a person to interact with the software. It may be a graphical user interface, a web-based user interface, a text-based user interface, or a voice interface. Whatever form it takes, the user interface is a way for a person to tell the software what they want to do. But what if we want to let other software interact with our application, rather than a person? A user interface built for human interaction isn't well-suited for programmatic interaction. That's where APIs come in. API is an acronym that stands for A pplication P rogramming I nterface. In its most general sense, an API is a well-defined way for one computer program to interact with another program. More technically, an API is a set of functions and data structures that allow other application developers to leverage the functionality and/or data of your software within their own applications. There are many different ways to implement an API, so the term can be somewhat ambiguous. There are high-level APIs and low-level APIs, internal APIs and public APIs, and so on, but in all cases they help different programs interact. Let's look at two examples. Example One - Native API If you are building a desktop application that runs on macOS or Windows, you will likely want your app to have menus and buttons and windows and other familiar user interface elements. You could build these things from scratch, drawing each pixel and handling every keystroke and mouse click in your code in order to make it look and act like other software, but that's a LOT of work ! Fortunately, the creators of macOS and Windows provided APIs that make your life as an application developer much easier. These APIs provide many functions (methods) that can help you create menus and buttons, respond to mouse clicks, etc. Other functions might help you interact with the file system or determine who is currently logged in. These APIs are building blocks that make it easier for application developers to create new software by giving your application well-defined ways to interact with the features of the operating system. Example Two - Web API The HTML APIs you learned in Web 101 like Canvas, Geolocation and Drag and Drop. These are also APIs because they provide the developer(you) with functionality that can be accessed through property names like .getContext() or isdraggable= . These are built into the HTML language but not implicitly used or required, yet are available by simply knowing their property names. Pretty cool, right? Example Three - REST API Let's say you're building a tourism mobile app with detailed information about the historical sites in your city. You'd also like to provide the traveler with a list of highly-rated restaurants that are near each site. You could gather this information yourself and include it in your app, but restaurants come and go, ratings change, and it's somewhat outside of the main scope of your app. Besides, other apps like Yelp already have this pretty well covered. Fortunately, Yelp provides an API that you can use to leverage their business data and ratings. Using their API, your app can search for nearby restaurants that are rated 4 stars or higher and conveniently display them alongside the site the traveler is currently viewing. Which Are We Building? There's a subtle difference between the examples we just covered. In the first, your desktop app is running on a computer right alongside the operating system. Your app and the operating system can interact directly. In the second, you are accessing objects built-into the language itself. In the third example, your app is running on a smart phone. Does the person using your app need to have the Yelp app installed? Is your tourism app talking directly to the Yelp mobile app? No, it's not. Your app is using a remote API . It communicates with a remote server located somewhere in \"the cloud\". More precisely, your app communicates over the internet with server software made by Yelp, which is running on a computer in some data center, and that software was specifically designed to allow other programs to interact with it in a well-defined way. Each of these examples can be termed APIs, but it is APIs in the third example, a remote RESTful APIs , that we will be building in this course, using a specific architectural style known as a REST API. We'll get into the details of REST APIs later. For now, just be aware that when many people say \"API\" they often mean this specific kind of remote API known as a RESTful API . But APIs come in many forms and you'll undoubtedly become familiar with many different types in your career. Following is a short video that explains the concept of APIs and how they enable the connectivity that we have become accustomed to in modern applications. See It - What's An API? Practice - Explore the Star Wars API Go to the Star Wars API site and experiment with it. The site gives you a simple UI and hints so you can try different API requests. Be sure to use the hints and see what the return values are. Visit the documentation page for a full explanation of what it offers and will allow you to do. Here are a few things to try: Try retrieving a few different people by changing the id value. What happens if you put in an invalid id value, such as 9999? Can you retrieve a list of all people? Discover other types of information you can access, besides people. Do you notice any common pattern for how you use the API? You can fork this CodePen or create your own repo to play with. What is REST REST stands for RE presentational S tate T ransfer. It is an architectural style\u2014a set of guiding principles\u2014for building distributed systems. This site provides an overview of these principles and the history of REST. Systems that adhere to these principles are commonly said to be RESTful . We're not going to focus too much on the theory behind REST. Instead, we'll focus on the practical application of REST to APIs, using common industry patterns. Still, there are a few terms and concepts that we must review. What is a Resource? A resource is key concept in REST. It's a general term that represents any information that can be named. Resources are often the basic data entities that our APIs work with, but they can also be more abstract concepts or processes. In the Star Wars API, the resources are things like \"people\", \"starships\", and \"planets\". Resources are commonly named using plural nouns. For example, to access information about the people in Star Wars, we use \"people\" rather than the singular \"person\". By convention, resource names are usually expressed as nouns rather than verbs or actions. E.g., planets rather than getPlanet , or StudentEnrollment rather than EnrollStudent . Occasionally, resources can also be more abstract concepts or processes. For example, a \"StudentEnrollment\" resource might be a multi-step process that updates Student and Class resources, while also enforcing rules about which classes a student can enroll in, sending notifications, and so on. The URI Part Resources are accessed using U niform R esource I dentifiers, or URI s. URIs are very similar to the familiar URL(UR Locator)) that we use on the web. There are subtle theoretical differences between URIs and URLs that we will not concern ourselves with, but you can read more about if you're interested. Let's revisit the URI that we used to access information about Luke Skywalker: https://swapi.dev/api/people/1 Part Explanation https://swapi.dev/api The base URL for accessing the API. This includes the protocol that will be used (https), the location of the API (swapi.dev), and a base path (/api). /people The resource we're accessing, \"people\" /1 An identifier that tells the API which person we're interested in Here's another example. Note that we don't specify an ID for any particular person. Instead, we're accessing all people. https://swapi.dev/api/people Part Explanation https://swapi.dev/api The base URL for accessing the API /people The resource we're accessing, \"people\" Client-Server You're going to hear the terms client and server a lot, so let's make sure we understand what they mean. The client-server model is a way of distributing work among multiple parts of a software system, with the parts often (but not necessarily) running on separate computers and communicating over a network. For example, when we click the https://swapi.dev/api/people/1 link, our web browser is the client . The computer at swapi.dev that sends back the data about Luke Skywalker is the server . In general, software making a request is a client . Software that listens for requests and sends back a response is a server . Request and response are important concepts that we'll be working with as we build APIs. HTTP/HTTPS HTTP is the protocol that clients and servers use to communicate on the web. HTTPS is a more secure version of HTTP in which the information being exchanged is encrypted. The first part of a URI (e.g., HTTP:) indicates which protocol is being used so the client and server know how to talk to each other\u2014 it sets the rules for the conversation . Technically, a REST API can use any protocol to communicate, but in practice they usually use HTTP or HTTPS. HTTP has two types of messages: requests and responses . We won't necessarily be creating request and response messages from scratch\u2014we have frameworks and other tools to help with that\u2014but we will be working with some of their parts and it is good to have a mental picture of what these messages look like. A request message/object is made up of the following parts: Part Explanation Request Method Also commonly called the verb, the request method indicates what type of action we're requesting. Some commonly used methods are GET, PUT, DELETE, and POST. Path The path to the resource that we're working with. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the request, e.g. Content-Type: application/json (which indicates that the content of the body will be in JSON format.) Body A payload that can be sent with the request. A response message/object has these parts: Part Explanation Status Code / Message A numeric code and short message that indicate whether the request was successful. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the response, e.g., Content-Type: application/json indicates that the content of the body is in JSON format. Body A payload that can be sent with the response. You can find more detailed information about HTTP here . Interacting with a REST API Up to this point, we've interacted with the Star Wars API by using a browser. This is convenient but limiting. The browser's address bar and links can only make one type of request, known as a GET request, which is used (unsurprisingly) to get a resource. But what if we want to create, update, or delete a resource? We either have to write code or use another tool. Fortunately, there is a powerful and free tool called Postman that we can use to more fully interact with REST APIs. Beyond GET: HTTP Verbs The Star Wars API was a useful starting place, but it only allows us to retrieve information. In the following video, we'll look at another API , provided by Ben Howdle, and dig in to the full range of request types and how they're used in REST APIs. First we'll explore the API using the interface provided by the website and then we'll use Postman to interact with the API. Additional Resources Article, RestfulAPI - What is REST? Article, Daniel Miessler - What\u2019s the Difference Between a URI and a URL? Req/Res API Know Your Docs MDN Docs - HTTP(S) Request Object","title":"Intro to APIs"},{"location":"module-1/REST-HTTP-APIs/#intro-to-restful-apis","text":"Take calculated risks. That is quite different from being rash.\u2003\u2014George S. Patton","title":"Intro to RESTful APIs"},{"location":"module-1/REST-HTTP-APIs/#overview","text":"In this course, we're going to learn how to build an API using Node.js and Express . If you don't know exactly what an \"API\" is, why you'd want to build one, or how Express fits in, don't worry! That's why we're here.","title":"Overview"},{"location":"module-1/REST-HTTP-APIs/#whats-an-api","text":"A traditional software application has a user interface( UI ): a mechanism that allows a person to interact with the software. It may be a graphical user interface, a web-based user interface, a text-based user interface, or a voice interface. Whatever form it takes, the user interface is a way for a person to tell the software what they want to do. But what if we want to let other software interact with our application, rather than a person? A user interface built for human interaction isn't well-suited for programmatic interaction. That's where APIs come in. API is an acronym that stands for A pplication P rogramming I nterface. In its most general sense, an API is a well-defined way for one computer program to interact with another program. More technically, an API is a set of functions and data structures that allow other application developers to leverage the functionality and/or data of your software within their own applications. There are many different ways to implement an API, so the term can be somewhat ambiguous. There are high-level APIs and low-level APIs, internal APIs and public APIs, and so on, but in all cases they help different programs interact. Let's look at two examples.","title":"What's an API?"},{"location":"module-1/REST-HTTP-APIs/#example-one-native-api","text":"If you are building a desktop application that runs on macOS or Windows, you will likely want your app to have menus and buttons and windows and other familiar user interface elements. You could build these things from scratch, drawing each pixel and handling every keystroke and mouse click in your code in order to make it look and act like other software, but that's a LOT of work ! Fortunately, the creators of macOS and Windows provided APIs that make your life as an application developer much easier. These APIs provide many functions (methods) that can help you create menus and buttons, respond to mouse clicks, etc. Other functions might help you interact with the file system or determine who is currently logged in. These APIs are building blocks that make it easier for application developers to create new software by giving your application well-defined ways to interact with the features of the operating system.","title":"Example One - Native API"},{"location":"module-1/REST-HTTP-APIs/#example-two-web-api","text":"The HTML APIs you learned in Web 101 like Canvas, Geolocation and Drag and Drop. These are also APIs because they provide the developer(you) with functionality that can be accessed through property names like .getContext() or isdraggable= . These are built into the HTML language but not implicitly used or required, yet are available by simply knowing their property names. Pretty cool, right?","title":"Example Two - Web API"},{"location":"module-1/REST-HTTP-APIs/#example-three-rest-api","text":"Let's say you're building a tourism mobile app with detailed information about the historical sites in your city. You'd also like to provide the traveler with a list of highly-rated restaurants that are near each site. You could gather this information yourself and include it in your app, but restaurants come and go, ratings change, and it's somewhat outside of the main scope of your app. Besides, other apps like Yelp already have this pretty well covered. Fortunately, Yelp provides an API that you can use to leverage their business data and ratings. Using their API, your app can search for nearby restaurants that are rated 4 stars or higher and conveniently display them alongside the site the traveler is currently viewing.","title":"Example Three - REST API"},{"location":"module-1/REST-HTTP-APIs/#which-are-we-building","text":"There's a subtle difference between the examples we just covered. In the first, your desktop app is running on a computer right alongside the operating system. Your app and the operating system can interact directly. In the second, you are accessing objects built-into the language itself. In the third example, your app is running on a smart phone. Does the person using your app need to have the Yelp app installed? Is your tourism app talking directly to the Yelp mobile app? No, it's not. Your app is using a remote API . It communicates with a remote server located somewhere in \"the cloud\". More precisely, your app communicates over the internet with server software made by Yelp, which is running on a computer in some data center, and that software was specifically designed to allow other programs to interact with it in a well-defined way. Each of these examples can be termed APIs, but it is APIs in the third example, a remote RESTful APIs , that we will be building in this course, using a specific architectural style known as a REST API. We'll get into the details of REST APIs later. For now, just be aware that when many people say \"API\" they often mean this specific kind of remote API known as a RESTful API . But APIs come in many forms and you'll undoubtedly become familiar with many different types in your career. Following is a short video that explains the concept of APIs and how they enable the connectivity that we have become accustomed to in modern applications.","title":"Which Are We Building?"},{"location":"module-1/REST-HTTP-APIs/#see-it-whats-an-api","text":"","title":"See It - What's An API?"},{"location":"module-1/REST-HTTP-APIs/#practice-explore-the-star-wars-api","text":"Go to the Star Wars API site and experiment with it. The site gives you a simple UI and hints so you can try different API requests. Be sure to use the hints and see what the return values are. Visit the documentation page for a full explanation of what it offers and will allow you to do. Here are a few things to try: Try retrieving a few different people by changing the id value. What happens if you put in an invalid id value, such as 9999? Can you retrieve a list of all people? Discover other types of information you can access, besides people. Do you notice any common pattern for how you use the API? You can fork this CodePen or create your own repo to play with.","title":"Practice - Explore the Star Wars API"},{"location":"module-1/REST-HTTP-APIs/#what-is-rest","text":"REST stands for RE presentational S tate T ransfer. It is an architectural style\u2014a set of guiding principles\u2014for building distributed systems. This site provides an overview of these principles and the history of REST. Systems that adhere to these principles are commonly said to be RESTful . We're not going to focus too much on the theory behind REST. Instead, we'll focus on the practical application of REST to APIs, using common industry patterns. Still, there are a few terms and concepts that we must review.","title":"What is REST"},{"location":"module-1/REST-HTTP-APIs/#what-is-a-resource","text":"A resource is key concept in REST. It's a general term that represents any information that can be named. Resources are often the basic data entities that our APIs work with, but they can also be more abstract concepts or processes. In the Star Wars API, the resources are things like \"people\", \"starships\", and \"planets\". Resources are commonly named using plural nouns. For example, to access information about the people in Star Wars, we use \"people\" rather than the singular \"person\". By convention, resource names are usually expressed as nouns rather than verbs or actions. E.g., planets rather than getPlanet , or StudentEnrollment rather than EnrollStudent . Occasionally, resources can also be more abstract concepts or processes. For example, a \"StudentEnrollment\" resource might be a multi-step process that updates Student and Class resources, while also enforcing rules about which classes a student can enroll in, sending notifications, and so on.","title":"What is a Resource?"},{"location":"module-1/REST-HTTP-APIs/#the-uri-part","text":"Resources are accessed using U niform R esource I dentifiers, or URI s. URIs are very similar to the familiar URL(UR Locator)) that we use on the web. There are subtle theoretical differences between URIs and URLs that we will not concern ourselves with, but you can read more about if you're interested. Let's revisit the URI that we used to access information about Luke Skywalker: https://swapi.dev/api/people/1 Part Explanation https://swapi.dev/api The base URL for accessing the API. This includes the protocol that will be used (https), the location of the API (swapi.dev), and a base path (/api). /people The resource we're accessing, \"people\" /1 An identifier that tells the API which person we're interested in Here's another example. Note that we don't specify an ID for any particular person. Instead, we're accessing all people. https://swapi.dev/api/people Part Explanation https://swapi.dev/api The base URL for accessing the API /people The resource we're accessing, \"people\"","title":"The URI Part"},{"location":"module-1/REST-HTTP-APIs/#client-server","text":"You're going to hear the terms client and server a lot, so let's make sure we understand what they mean. The client-server model is a way of distributing work among multiple parts of a software system, with the parts often (but not necessarily) running on separate computers and communicating over a network. For example, when we click the https://swapi.dev/api/people/1 link, our web browser is the client . The computer at swapi.dev that sends back the data about Luke Skywalker is the server . In general, software making a request is a client . Software that listens for requests and sends back a response is a server . Request and response are important concepts that we'll be working with as we build APIs.","title":"Client-Server"},{"location":"module-1/REST-HTTP-APIs/#httphttps","text":"HTTP is the protocol that clients and servers use to communicate on the web. HTTPS is a more secure version of HTTP in which the information being exchanged is encrypted. The first part of a URI (e.g., HTTP:) indicates which protocol is being used so the client and server know how to talk to each other\u2014 it sets the rules for the conversation . Technically, a REST API can use any protocol to communicate, but in practice they usually use HTTP or HTTPS. HTTP has two types of messages: requests and responses . We won't necessarily be creating request and response messages from scratch\u2014we have frameworks and other tools to help with that\u2014but we will be working with some of their parts and it is good to have a mental picture of what these messages look like. A request message/object is made up of the following parts: Part Explanation Request Method Also commonly called the verb, the request method indicates what type of action we're requesting. Some commonly used methods are GET, PUT, DELETE, and POST. Path The path to the resource that we're working with. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the request, e.g. Content-Type: application/json (which indicates that the content of the body will be in JSON format.) Body A payload that can be sent with the request. A response message/object has these parts: Part Explanation Status Code / Message A numeric code and short message that indicate whether the request was successful. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the response, e.g., Content-Type: application/json indicates that the content of the body is in JSON format. Body A payload that can be sent with the response. You can find more detailed information about HTTP here .","title":"HTTP/HTTPS"},{"location":"module-1/REST-HTTP-APIs/#interacting-with-a-rest-api","text":"Up to this point, we've interacted with the Star Wars API by using a browser. This is convenient but limiting. The browser's address bar and links can only make one type of request, known as a GET request, which is used (unsurprisingly) to get a resource. But what if we want to create, update, or delete a resource? We either have to write code or use another tool. Fortunately, there is a powerful and free tool called Postman that we can use to more fully interact with REST APIs.","title":"Interacting with a REST API"},{"location":"module-1/REST-HTTP-APIs/#beyond-get-http-verbs","text":"The Star Wars API was a useful starting place, but it only allows us to retrieve information. In the following video, we'll look at another API , provided by Ben Howdle, and dig in to the full range of request types and how they're used in REST APIs. First we'll explore the API using the interface provided by the website and then we'll use Postman to interact with the API.","title":"Beyond GET: HTTP Verbs"},{"location":"module-1/REST-HTTP-APIs/#additional-resources","text":"Article, RestfulAPI - What is REST? Article, Daniel Miessler - What\u2019s the Difference Between a URI and a URL? Req/Res API","title":"Additional Resources"},{"location":"module-1/REST-HTTP-APIs/#know-your-docs","text":"MDN Docs - HTTP(S) Request Object","title":"Know Your Docs"},{"location":"module-1/axios-HTTPstatusCodes/","text":"Axios and HTTP(S) Status Codes The only way of finding the limits of the possible is by going beyond them into the impossible.\u2003\u2014Arthur C. Clarke Overview In the last lesson we refreshed our knowledge of Node and NPM. Now we are going to add another npm package to our repertoire: axios . We are also going to get familiar with the common HTTP protocols and status codes. Axios Axios works just like fetch() but is a more robust. It's also a replacement because fetch() is only available in the browser. When we're working in Node, we're on the server so we have a need for an HTTP client, therefore we use a package like Axios. In the past, fetch has served our needs just fine and it may continue to do so for many people, but our goal here is to introduce a popular alternative. Some notable differences: No more response.json() More configurable Custom error handling Axios can be installed via NPM ( npm i axios ) and called just like fetch: axios('https://someurl') . No matter which HTTP client you use, you will always have to deal with the same web standards/protocols for APIs: Before you continue, read about HTTP requests . We need to understand the methods, headers and body. HTTP Requests Each API request (using fetch() or axios() ) will contain a method. These methods help computers (and humans) determine how the request is intended to function. There are four main methods: GET A GET request tells an application that we are requesting some sort of information. This could include reading data from a database or a text file. It could also include returning a random number. It depends on what is applicable for the system. A key differentiator for this type of request is that a GET request contains no body. 1 2 3 4 5 axios . get ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); }) POST A POST request tells an application that it needs to create something. A POST request sends along some sort of payload in the HTTP request body and the application can read that to determine what needs to be inserted into a database, saved to a file, etc. 1 2 3 4 axios . post ( '/user' , { firstName : 'Fred' , lastName : 'Flintstone' }) PUT A PUT request is an update. This method tells the application/server that something needs to be changed or updated. PUT requests will also send along a body to help the application decide what needs to be altered. 1 2 3 4 axios . put ( '/user?ID=12345' , { firstName : 'Fred' , lastName : 'Flintstone' }) DELETE A DELETE request may or may not have a body but its purpose is to remove something from an application, hence the keyword \"delete\".1 1 2 3 4 5 axios . delete ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); }) When you build an app for graduation and to get a job with these 4 methods you will have built a CRUD app: Create, Read, Update, Delete. YT, Telusko - HTTP Requests HTTP Status Codes Each time we send a request we will get a response back and that response will include a status code. The objective of the status code is to tell us the results of the request. For instance, a request could have been successful, failed to find information or couldn't find the desired resource/server. These codes tell us what went right and what went wrong. 200 - There are multiple variations of the 200 status code including 201 and 204, but generally anything in the 200 range indicates a successful response. Things went according to plan. 300 - Status codes in the 300s are used for caching, proxy or SEO purposes. The main one is a 301 redirect which means a resource was \"moved permanently\". We won't run into these codes much in this class. In fact, you won't run into them that often in your career unless you do a lot of networking related tasks. 400 - 400 status codes mean something went wrong with the request. There are lots of variations of these so we will cover a few. The main ones are: 400 - Bad Request_: This is a generic \"something is wrong\" status code. You will need to change your request and try again. 401 - Unauthorized_: You've likely forgotten an API key or some other Authorization header required to complete the request. This is usually temporary. 403 - Forbidden_: Similar to a 401, this indicates that the server understands the request but is going to block it anyway. This is more permanent. For example: incorrect access rights. 404 - Not Found_: You may have seen this one before! This means that the requested resource could not be found. 500 - Status codes in the 500s mean something is really wrong. A 500 (Internal Server Error) could be an uncaught exception in your code. A 502 (Bad Gateway) or a 503 (Service Unavailable) may indicate an infrastructure problem. Perhaps your server is down. Status Code Summary A lot to take in? Don't worry, you'll learn these as you go. Like most things repetition helps. For this course, the two things we should take away from status codes are: We are generally looking for a 200 (OK) Typically the higher the number, the worse of an issue it is Practice It Instructions On your computer, create a new folder called sampleHTTP and navigate to it: cd sampleHTTP . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by hitting Enter over and over all the way through the last step: \"Is this OK? (yes)\". cd sampleHTTP : into the sampleHTTP folder npm i axios . Axios is the HTTP client we'll be using for this little project. Create a file called index.js in your project folder: touch index.js . Open this new directory in your text editor: code . Import axios on the first line: const axios = require('axios') . On the third line make a call to axios with the URL of ACA: axios('https://austincodingacademy.com/') . Use .then() to get the response and console.log it. 1 2 3 4 axios ( 'https://austincodingacademy.com/' ) . then ( function ( response ) { console . log ( response ) }) - [ ] Run the program ( node index.js ) - [ ] What is the status code? What is the response? NOTE: You're going to get a very long response, and you might not be able to scroll all the way to the top to see the status code. Try the following to get ONLY the response headers: 1 2 3 4 5 6 ```javascript axios.head('https://austincodingacademy.com/') .then(function (response) { console.log(response) }) ``` Additional Resources YT, Duomly - Fetch vs Axios YT, Traversy Media - Axios Crash Course Article, LogRocket - How to Make HTTP Requests with Axios.js Look ahead to the Questions for Student Led Discussion To be a successful developer you need to have the curiosity and passion to problem solve. Start practicing each night with the puzzles given to you in the Interview Challenges and start looking for others at places like HackerRank , GeeksForGeeks , CodeWars , and LeetCode . Know Your Docs Be sure to reference the Axios documentation on NPM . GitHub Repo - Axios.js","title":"Axios + Status Codes"},{"location":"module-1/axios-HTTPstatusCodes/#axios-and-https-status-codes","text":"The only way of finding the limits of the possible is by going beyond them into the impossible.\u2003\u2014Arthur C. Clarke","title":"Axios and HTTP(S) Status Codes"},{"location":"module-1/axios-HTTPstatusCodes/#overview","text":"In the last lesson we refreshed our knowledge of Node and NPM. Now we are going to add another npm package to our repertoire: axios . We are also going to get familiar with the common HTTP protocols and status codes.","title":"Overview"},{"location":"module-1/axios-HTTPstatusCodes/#axios","text":"Axios works just like fetch() but is a more robust. It's also a replacement because fetch() is only available in the browser. When we're working in Node, we're on the server so we have a need for an HTTP client, therefore we use a package like Axios. In the past, fetch has served our needs just fine and it may continue to do so for many people, but our goal here is to introduce a popular alternative. Some notable differences: No more response.json() More configurable Custom error handling Axios can be installed via NPM ( npm i axios ) and called just like fetch: axios('https://someurl') . No matter which HTTP client you use, you will always have to deal with the same web standards/protocols for APIs: Before you continue, read about HTTP requests . We need to understand the methods, headers and body.","title":"Axios"},{"location":"module-1/axios-HTTPstatusCodes/#http-requests","text":"Each API request (using fetch() or axios() ) will contain a method. These methods help computers (and humans) determine how the request is intended to function. There are four main methods:","title":"HTTP Requests"},{"location":"module-1/axios-HTTPstatusCodes/#get","text":"A GET request tells an application that we are requesting some sort of information. This could include reading data from a database or a text file. It could also include returning a random number. It depends on what is applicable for the system. A key differentiator for this type of request is that a GET request contains no body. 1 2 3 4 5 axios . get ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); })","title":"GET"},{"location":"module-1/axios-HTTPstatusCodes/#post","text":"A POST request tells an application that it needs to create something. A POST request sends along some sort of payload in the HTTP request body and the application can read that to determine what needs to be inserted into a database, saved to a file, etc. 1 2 3 4 axios . post ( '/user' , { firstName : 'Fred' , lastName : 'Flintstone' })","title":"POST"},{"location":"module-1/axios-HTTPstatusCodes/#put","text":"A PUT request is an update. This method tells the application/server that something needs to be changed or updated. PUT requests will also send along a body to help the application decide what needs to be altered. 1 2 3 4 axios . put ( '/user?ID=12345' , { firstName : 'Fred' , lastName : 'Flintstone' })","title":"PUT"},{"location":"module-1/axios-HTTPstatusCodes/#delete","text":"A DELETE request may or may not have a body but its purpose is to remove something from an application, hence the keyword \"delete\".1 1 2 3 4 5 axios . delete ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); }) When you build an app for graduation and to get a job with these 4 methods you will have built a CRUD app: Create, Read, Update, Delete. YT, Telusko - HTTP Requests","title":"DELETE"},{"location":"module-1/axios-HTTPstatusCodes/#http-status-codes","text":"Each time we send a request we will get a response back and that response will include a status code. The objective of the status code is to tell us the results of the request. For instance, a request could have been successful, failed to find information or couldn't find the desired resource/server. These codes tell us what went right and what went wrong. 200 - There are multiple variations of the 200 status code including 201 and 204, but generally anything in the 200 range indicates a successful response. Things went according to plan. 300 - Status codes in the 300s are used for caching, proxy or SEO purposes. The main one is a 301 redirect which means a resource was \"moved permanently\". We won't run into these codes much in this class. In fact, you won't run into them that often in your career unless you do a lot of networking related tasks. 400 - 400 status codes mean something went wrong with the request. There are lots of variations of these so we will cover a few. The main ones are: 400 - Bad Request_: This is a generic \"something is wrong\" status code. You will need to change your request and try again. 401 - Unauthorized_: You've likely forgotten an API key or some other Authorization header required to complete the request. This is usually temporary. 403 - Forbidden_: Similar to a 401, this indicates that the server understands the request but is going to block it anyway. This is more permanent. For example: incorrect access rights. 404 - Not Found_: You may have seen this one before! This means that the requested resource could not be found. 500 - Status codes in the 500s mean something is really wrong. A 500 (Internal Server Error) could be an uncaught exception in your code. A 502 (Bad Gateway) or a 503 (Service Unavailable) may indicate an infrastructure problem. Perhaps your server is down.","title":"HTTP Status Codes"},{"location":"module-1/axios-HTTPstatusCodes/#status-code-summary","text":"A lot to take in? Don't worry, you'll learn these as you go. Like most things repetition helps. For this course, the two things we should take away from status codes are: We are generally looking for a 200 (OK) Typically the higher the number, the worse of an issue it is","title":"Status Code Summary"},{"location":"module-1/axios-HTTPstatusCodes/#practice-it","text":"","title":"Practice It"},{"location":"module-1/axios-HTTPstatusCodes/#instructions","text":"On your computer, create a new folder called sampleHTTP and navigate to it: cd sampleHTTP . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by hitting Enter over and over all the way through the last step: \"Is this OK? (yes)\". cd sampleHTTP : into the sampleHTTP folder npm i axios . Axios is the HTTP client we'll be using for this little project. Create a file called index.js in your project folder: touch index.js . Open this new directory in your text editor: code . Import axios on the first line: const axios = require('axios') . On the third line make a call to axios with the URL of ACA: axios('https://austincodingacademy.com/') . Use .then() to get the response and console.log it. 1 2 3 4 axios ( 'https://austincodingacademy.com/' ) . then ( function ( response ) { console . log ( response ) }) - [ ] Run the program ( node index.js ) - [ ] What is the status code? What is the response? NOTE: You're going to get a very long response, and you might not be able to scroll all the way to the top to see the status code. Try the following to get ONLY the response headers: 1 2 3 4 5 6 ```javascript axios.head('https://austincodingacademy.com/') .then(function (response) { console.log(response) }) ```","title":"Instructions"},{"location":"module-1/axios-HTTPstatusCodes/#additional-resources","text":"YT, Duomly - Fetch vs Axios YT, Traversy Media - Axios Crash Course Article, LogRocket - How to Make HTTP Requests with Axios.js Look ahead to the Questions for Student Led Discussion To be a successful developer you need to have the curiosity and passion to problem solve. Start practicing each night with the puzzles given to you in the Interview Challenges and start looking for others at places like HackerRank , GeeksForGeeks , CodeWars , and LeetCode .","title":"Additional Resources"},{"location":"module-1/axios-HTTPstatusCodes/#know-your-docs","text":"Be sure to reference the Axios documentation on NPM . GitHub Repo - Axios.js","title":"Know Your Docs"},{"location":"module-1/class-1/","text":"Class 1: Get Familiar with Node, NPM, & Postman Well begun is half done.\u2003\u2014Greek Proverb Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Node.js Test software: Postman Program using remote API Introductions Questions for Student Led Discussion Interview Challenge Plan and organize Daily Student Presentations Creation Time Download and follow the README.md in the Node Repo Download and practice Postman against the Pokemon API Push Yourself Further Build a word-count algorithm Look for Charizard! Exit Recap, Attendance, and Reminders Introductions Since we don't know each other, at least not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.) Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 20 mins See Your Challenge Here Student Presentations, 10 mins See Student Presentations List Creation Time, 60-90 mins Node/NPM Recap Today we'll recap Node.js and NPM. The goal of this assignment is to complete a set of functions so that all of the tests pass. Additionally, one set of functions will use a popular NPM package, moment.js, to help us format dates and times. Fork and clone the following repository: Node Practice . Follow the README to complete the functions and make all the tests pass. via GIPHY YT, Programming with Mosh - JS Array.Reduce Learn to Use Postman Today you'll download Postman and become familiar with its interface for making API calls. The instructor will come around to ensure the tool is correctly installed and you have an understanding of its purpose. YT, Raghav Pal - Postman Tutorial Ep. 1: What is Postman? Postman Docs - Install & Introduction Download Postman . Open the application. Make a GET request to the Star Wars API: https://swapi.dev/api . You should have received a list of available endpoints . . . make a request to the planets one. What's the diameter of Naboo ? Back up: In case SWAPI isn't up use ReqRes YT, Raghav Pal - Postman Tutorial Ep.2: Postman's UI YT, Raghav Pal - Postman Tutorial Ep.3: Create a Request Push Yourself Further Repl.it, Matt Viteri - Word Count Using Postman and the Pokemon API: Use the Pokemon API to find the Pokemon Charizard . The base URL is: https://pokeapi.co/api/v2/pokemon/ . Make a GET request and use a path parameter of the Pokemon's name to access information about it. Use the information provided to lookup Charizard 's \"type\". Access the corresponding endpoint to find more details about the \"fire\" type. Locate the list of moves associated with this type. Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 1 Node, NPM, & Postman"},{"location":"module-1/class-1/#class-1-get-familiar-with-node-npm-postman","text":"Well begun is half done.\u2003\u2014Greek Proverb","title":"Class 1: Get Familiar with Node, NPM, &amp; Postman"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Node.js Test software: Postman Program using remote API Introductions Questions for Student Led Discussion Interview Challenge Plan and organize Daily Student Presentations Creation Time Download and follow the README.md in the Node Repo Download and practice Postman against the Pokemon API Push Yourself Further Build a word-count algorithm Look for Charizard! Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#introductions","text":"Since we don't know each other, at least not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.)","title":"Introductions"},{"location":"module-1/class-1/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-1/#interview-challenge-20-mins","text":"See Your Challenge Here","title":"Interview Challenge, 20 mins"},{"location":"module-1/class-1/#student-presentations-10-mins","text":"See Student Presentations List","title":"Student Presentations, 10 mins"},{"location":"module-1/class-1/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-1/#nodenpm-recap","text":"Today we'll recap Node.js and NPM. The goal of this assignment is to complete a set of functions so that all of the tests pass. Additionally, one set of functions will use a popular NPM package, moment.js, to help us format dates and times. Fork and clone the following repository: Node Practice . Follow the README to complete the functions and make all the tests pass. via GIPHY YT, Programming with Mosh - JS Array.Reduce","title":"Node/NPM Recap"},{"location":"module-1/class-1/#learn-to-use-postman","text":"Today you'll download Postman and become familiar with its interface for making API calls. The instructor will come around to ensure the tool is correctly installed and you have an understanding of its purpose. YT, Raghav Pal - Postman Tutorial Ep. 1: What is Postman? Postman Docs - Install & Introduction Download Postman . Open the application. Make a GET request to the Star Wars API: https://swapi.dev/api . You should have received a list of available endpoints . . . make a request to the planets one. What's the diameter of Naboo ? Back up: In case SWAPI isn't up use ReqRes YT, Raghav Pal - Postman Tutorial Ep.2: Postman's UI YT, Raghav Pal - Postman Tutorial Ep.3: Create a Request","title":"Learn to Use Postman"},{"location":"module-1/class-1/#_1","text":"","title":""},{"location":"module-1/class-1/#push-yourself-further","text":"Repl.it, Matt Viteri - Word Count Using Postman and the Pokemon API: Use the Pokemon API to find the Pokemon Charizard . The base URL is: https://pokeapi.co/api/v2/pokemon/ . Make a GET request and use a path parameter of the Pokemon's name to access information about it. Use the information provided to lookup Charizard 's \"type\". Access the corresponding endpoint to find more details about the \"fire\" type. Locate the list of moves associated with this type.","title":"Push Yourself Further"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: HTTP Request with Axios The best way out is always through.\u2003\u2014Robert Frost Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Practice passing Jest Tests Using Axios as an HTTP Client Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the Axios Practice Repo Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to be making API calls with Axios. The goal of this exercise is to get comfortable using axios (like fetch) in a Node.js environment and familiarizing ourselves with the types of responses and status codes we receive from APIs. Fork and clone the following repository: Axios Practice . Follow the README to complete the functions and make all the tests pass. Follow Up Video YT, Mahtab Alam - Making HTTP Calls in Node with Axios.js Push Yourself Further Medium Tutorial, Sebastian Eschweiler - Getting Started with Axios.js Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Axios Practice Assignment Create Class 2 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 2 Axios Practice"},{"location":"module-1/class-2/#class-2-http-request-with-axios","text":"The best way out is always through.\u2003\u2014Robert Frost","title":"Class 2: HTTP Request with Axios"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Practice passing Jest Tests Using Axios as an HTTP Client Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the Axios Practice Repo Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-mins","text":"Today we are going to be making API calls with Axios. The goal of this exercise is to get comfortable using axios (like fetch) in a Node.js environment and familiarizing ourselves with the types of responses and status codes we receive from APIs. Fork and clone the following repository: Axios Practice . Follow the README to complete the functions and make all the tests pass.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-2/#follow-up-video","text":"YT, Mahtab Alam - Making HTTP Calls in Node with Axios.js","title":"Follow Up Video"},{"location":"module-1/class-2/#push-yourself-further","text":"Medium Tutorial, Sebastian Eschweiler - Getting Started with Axios.js","title":"Push Yourself Further"},{"location":"module-1/class-2/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create Axios Practice Assignment Create Class 2 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-3/","text":"Class 3: 1st Express Server The surest way not to fail is to determine to succeed.\u2003\u2014Richard Brinsley Sheridan Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using Express.js to build JavaScript servers Using Postman as a testing software Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time 311_wk2_day1_express repo Complete the Express server Test with Postman Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to set up a basic Express server and add a few routes. We will practice creating/altering routes and seeing the results in Postman. Fork and clone the following repository: Express Intro Practice cd into the new directory and npm i Follow the README to: get started build routes and test them with Postman Remember to use the homework for this class to build your first routes. YT, Traversy Media - JS Crash Course This video is an hour and fourteen minutes long but it covers all the topics we learned today. It uses Express and Postman. You might try listening at 1.5x speed but you should definitely follow along. Push Yourself Further Follow along with this tutorial on installing and setting up express . This article includes concepts like \"middleware\" which we practiced with body-parser but haven't talked about in depth yet. Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 3"},{"location":"module-1/class-3/#class-3-1st-express-server","text":"The surest way not to fail is to determine to succeed.\u2003\u2014Richard Brinsley Sheridan","title":"Class 3: 1st Express Server"},{"location":"module-1/class-3/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using Express.js to build JavaScript servers Using Postman as a testing software Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time 311_wk2_day1_express repo Complete the Express server Test with Postman Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-3/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-3/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-3/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-3/#creation-time-60-90-mins","text":"Today we are going to set up a basic Express server and add a few routes. We will practice creating/altering routes and seeing the results in Postman. Fork and clone the following repository: Express Intro Practice cd into the new directory and npm i Follow the README to: get started build routes and test them with Postman Remember to use the homework for this class to build your first routes. YT, Traversy Media - JS Crash Course This video is an hour and fourteen minutes long but it covers all the topics we learned today. It uses Express and Postman. You might try listening at 1.5x speed but you should definitely follow along.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-3/#push-yourself-further","text":"Follow along with this tutorial on installing and setting up express . This article includes concepts like \"middleware\" which we practiced with body-parser but haven't talked about in depth yet.","title":"Push Yourself Further"},{"location":"module-1/class-3/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/codeSandboxes/","text":"Coding in a Sandbox Code sandboxes are really useful tools to share ideas, play with possibilities and explore new concepts without the pressures of building your file structure, setting up your machine or depending on the console. In class we'll use CodeSandBox to share snippets of code and to provide a place for practice and discovery. Get in the habit of browsing and playing with these small code snippets as you work through the ebook. It's where \"the rubber meets the road\", so to speak. Sandboxes are where you actually get to apply the concepts you just learned about PLUS you will frequently use them in your new career to test code in a controlled environment. There are plenty of sandboxes to play in: CodePen , Repl.it , JSBin , JSFiddle and more ! Get your hands dirty and explore for yourself! Practice It Go sign up for a Repl.it account now! Go sign up for a CodeSandBox account now!","title":"Code Sandboxes"},{"location":"module-1/codeSandboxes/#coding-in-a-sandbox","text":"Code sandboxes are really useful tools to share ideas, play with possibilities and explore new concepts without the pressures of building your file structure, setting up your machine or depending on the console. In class we'll use CodeSandBox to share snippets of code and to provide a place for practice and discovery. Get in the habit of browsing and playing with these small code snippets as you work through the ebook. It's where \"the rubber meets the road\", so to speak. Sandboxes are where you actually get to apply the concepts you just learned about PLUS you will frequently use them in your new career to test code in a controlled environment. There are plenty of sandboxes to play in: CodePen , Repl.it , JSBin , JSFiddle and more ! Get your hands dirty and explore for yourself!","title":"Coding in a Sandbox"},{"location":"module-1/codeSandboxes/#practice-it","text":"Go sign up for a Repl.it account now! Go sign up for a CodeSandBox account now!","title":"Practice It"},{"location":"module-1/introToExpress/","text":"Intro to Express There is only one definition of success\u2014to be able to spend your life in your own way.\u2003\u2014Christopher Morley Overview Recently we've re-familiarized ourselves with Node and NPM and developed an understanding of axios as an alternative to fetch. We've also practiced consuming APIs with both Postman and Axios. So far, the APIs we've interacted with are programs that someone else has built. With Express, we will start to understand how to build our own APIs. What is Express.js Express is a (very popular) NPM package that turns our Node.js applications into a web server. Express can help us serve static files (images, etc) or create routes to build API endpoints. We will use Express to build the \"backend\" of our application. Why do we need a web server (or backend), anyway? There are several reasons. One key reason is for the protection of sensitive content. On our front-ends (HTML, CSS, JavaScript, React), everything we code into the app will be visible from the browser in one way or another. That means that if you store an API key or some other sensitive token in a variable, eventually someone will be able to inspect the website (through the console) and obtain that information. This inspection is not possible with a web server built with Express. Another reason we use a server is that it is how we integrate with a database. We will become more familiar with databases in the following chapters but it's good to know that in the software industry (as a best practice) we don't connect to a database directly from the frontend, a React app for example. Most database systems don't even allow this interaction. So a web server helps us account for this as well. Express is an amazing tool that helps us quickly accomplish these tasks. Fortunately for us, there is a wealth of information available on Express and we will see some of that soon. For now, feel free to check out the Express Homepage . A breakdown of concepts: Initiating the Server The first thing we typically do after we import express is to instantiate the server. The first few lines of our server usually look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // index.js // import the Express package const express = require ( 'express' ) // create a variable to hold the value of all of the server's functions/methods const app = express () // Middleware: this block is where authorization logic goes. We're not going to worry about it too much right now. We'll get into the details of authorization in a few weeks. app . use (( req , res , next ) => { //authorization logic would go here, after the check it calls the next() method to all the request to go to the next phase: get, put, post, etc... next () }) // at the bottom of the index.js file you'll tell the server `app` to listen give you feed back in the console when it is. // use this method to give you feedback as to when the server is successfully spun up (up and running)! app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) If this was in an npm init ed folder with Express installed ( npm i express ) you could run npm start or node index.js and get 'Server is listening on port 8080.' on your console. Creating Routes After that we are free to start creating routes . The app object has properties on it already that include: .get , .put , .post and .delete (among others). These properties correspond to the HTTP request methods you learned about in 101, 211, and now in 311. Remember when we used fetch() , the default request method was get so when we wanted to post form data we had to write the attribute method=\"POST\" NOTE: in this use of the word method we mean something different than when we say an object's method . The method of fetch refers to the type of HTTP Request that will be sent. In our Express app we'll define methods on the app object that will act as routes to handle these types of/ method ical requests. Whew...moving on... So, while we're building our server we have to think about the potential requests types that may & will come to it from our front-end or some other developer using our API. They'll be sending POST types, GET types, PUTs and DELETEs. To design and build for those types of requests we use these built in methods: .get , .put , .post and .delete (that correspond to those types of request), by simply defining their value with the functionality we want them to do. To start doing this we begin writing them like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // the GET Method app . get () // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) To continue defining the functionality of these methods we'll be putting some parameters inside each of these... The 1st Argument: the Path The path is a string that determines what route should be used. For example, all of our data will come through this one server so it needs to be pass through one root path: \"http://localhost:4000/\" . But if we wanted to serve user data and car data we'd need to define them at different paths. To do this we'd say that cars are at \"http://localhost:4000/cars\" and users are at \"http://localhost:4000/users\" . Therefore the path is \"/cars\" or \"/users\" . To define them you'd write it like this: 1 2 `app.get('/cars')` `app.get('/users')` We only need to define the last segment of the path: /users or /cars because our server lives at https://localhost:4000/ . Once our request from either Postman or our front-end app finds the server at the URL: https://localhost:4000/ , ( or any other URL it sits on once we host it remotely ), the path tells Express where to direct the request so that it finds the right route to get the expected resource (cars or users). if you look at the APIs we've worked with in 101 and 211 you'll see this same pattern used in those servers... /posts/ , /images , /products , /users , etc. Paths can also accept variables. Say that we wanted to obtain a specific user by their id , say 543 . In that case the full URL would be http://localhost:4000/users/543 . This will get the user whose id is equal to \"543\". But then someone might want user: 106, or user: 201, etc. To design for all of these potential request in our server we would write that route with a variable: :id . As in, 1 app . get ( '/users/:id' ) ` This is what our app starts to look like with that logic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // GET all users. Usually known as \"get all\" app . get ( \"/users\" ) // GET just one user by id. Usually known as \"get one\" app . get ( \"/users/:id\" ) // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) The 2nd Argument: a Callback Function After the path we have to define a second parameter that tells the server what's supposed to happen when this route is called. This second parameter is a callback function; meaning that this is what is suppose to happen when the method is called. In order for these callbacks to work they themselves need at least two argument passed into them: req (request) and res (response). The Req Parameter req represents the request object. This is the message that is sent from the frontend to our backend server. This object includes two main properties: headers and body . If you used Postman to submit a request with a body of { user: 'John' } then we could access that by referring to req.body . There are other properties of the incoming request that we can access as well, such as req.params , req.headers and req.cookies . NOTE: you must use a Cookie parser to do that last one. res represents the response object. This is what we will send back to the end user (client) on the frontend from the backend. We can send responses in a variety of formats but the two most popular are plain text and JSON. For example, let's say you want to send the text \"success\" to a user once an operation is complete. In that case you would complete whatever functionality you wanted inside of the callback and then call a the send method on the res object: res.send(\"success\") . The user will see this message after executing the specified action with our API. More commonly we are sending data payloads (data about a specific item: user or car, whatever) back to the user. On a GET request we might send the entire data object of a user back so that the client(front-end app/Postman). In that case, we called the json method on the res object to convert & package the data payload into a JSON string before we send it back to the client: res.json(user) . This user parameter could be anything we wanted but naming it this way helps us developers know what's supposed to be in there. The same logic would go for our car data: res.json(car) We will become more familiar with req and res as we practice more. However, now that we have our parameters and have a visual for the callback function we can put it all together. We mentioned previously that the first parameter is the path and the second parameter is the callback function , so when we write it all together we arrive at a variation of the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () // ...more code here... // GET method to get all users with the second argument including req & res that will resolve to a 'success' message being sent to the client/frontend app . get ( '/users' , ( req , res ) => { // ...perform some logic in here like getting the user data from the database... // then send back to the client a message saying 'success' res . send ( 'success' ) }) // GET method to get only one user by their id app . get ( '/users/:id' , ( req , res ) => { // ...store the id of the user request using the params of the req object coming from the client... const userId = req . params . id // ...get the user data from the database using the `userId` variable... // send the back to client a message saying 'success' res . send ( `We'll be sending you user ${ userId } shortly.` ) }) // ...more code here... // ...app.listen()... What you see above is a couple of routes/ endpoints . We will create many like these throughout this course. Take some time to understand how these methods work and the arguments that are being passed into them and what they are doing. In the coming sections we'll be adding on to these **endpoints to actually get data from a database so we can return actual data!! Practice It Before playing in the sandbox below, be sure to read this blog first! In the Express Playground above, hover over different sections of the code to get more info. Read the article to get a better understand of how this playground operates and what Express is meant to do. Additional Resources YT, SelfTuts - Pt. 1 What is Express in Node.js Article, Code Analogies - The Basics of Express.js Look ahead to the Questions for Student Led Discussion Know Your Docs Geeks4Geeks Docs - Express & Cookie-Parser Express Docs - Basics Routing","title":"Intro To Express"},{"location":"module-1/introToExpress/#intro-to-express","text":"There is only one definition of success\u2014to be able to spend your life in your own way.\u2003\u2014Christopher Morley","title":"Intro to Express"},{"location":"module-1/introToExpress/#overview","text":"Recently we've re-familiarized ourselves with Node and NPM and developed an understanding of axios as an alternative to fetch. We've also practiced consuming APIs with both Postman and Axios. So far, the APIs we've interacted with are programs that someone else has built. With Express, we will start to understand how to build our own APIs.","title":"Overview"},{"location":"module-1/introToExpress/#what-is-expressjs","text":"Express is a (very popular) NPM package that turns our Node.js applications into a web server. Express can help us serve static files (images, etc) or create routes to build API endpoints. We will use Express to build the \"backend\" of our application. Why do we need a web server (or backend), anyway? There are several reasons. One key reason is for the protection of sensitive content. On our front-ends (HTML, CSS, JavaScript, React), everything we code into the app will be visible from the browser in one way or another. That means that if you store an API key or some other sensitive token in a variable, eventually someone will be able to inspect the website (through the console) and obtain that information. This inspection is not possible with a web server built with Express. Another reason we use a server is that it is how we integrate with a database. We will become more familiar with databases in the following chapters but it's good to know that in the software industry (as a best practice) we don't connect to a database directly from the frontend, a React app for example. Most database systems don't even allow this interaction. So a web server helps us account for this as well. Express is an amazing tool that helps us quickly accomplish these tasks. Fortunately for us, there is a wealth of information available on Express and we will see some of that soon. For now, feel free to check out the Express Homepage . A breakdown of concepts:","title":"What is Express.js"},{"location":"module-1/introToExpress/#initiating-the-server","text":"The first thing we typically do after we import express is to instantiate the server. The first few lines of our server usually look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // index.js // import the Express package const express = require ( 'express' ) // create a variable to hold the value of all of the server's functions/methods const app = express () // Middleware: this block is where authorization logic goes. We're not going to worry about it too much right now. We'll get into the details of authorization in a few weeks. app . use (( req , res , next ) => { //authorization logic would go here, after the check it calls the next() method to all the request to go to the next phase: get, put, post, etc... next () }) // at the bottom of the index.js file you'll tell the server `app` to listen give you feed back in the console when it is. // use this method to give you feedback as to when the server is successfully spun up (up and running)! app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) If this was in an npm init ed folder with Express installed ( npm i express ) you could run npm start or node index.js and get 'Server is listening on port 8080.' on your console.","title":"Initiating the Server"},{"location":"module-1/introToExpress/#creating-routes","text":"After that we are free to start creating routes . The app object has properties on it already that include: .get , .put , .post and .delete (among others). These properties correspond to the HTTP request methods you learned about in 101, 211, and now in 311. Remember when we used fetch() , the default request method was get so when we wanted to post form data we had to write the attribute method=\"POST\" NOTE: in this use of the word method we mean something different than when we say an object's method . The method of fetch refers to the type of HTTP Request that will be sent. In our Express app we'll define methods on the app object that will act as routes to handle these types of/ method ical requests. Whew...moving on... So, while we're building our server we have to think about the potential requests types that may & will come to it from our front-end or some other developer using our API. They'll be sending POST types, GET types, PUTs and DELETEs. To design and build for those types of requests we use these built in methods: .get , .put , .post and .delete (that correspond to those types of request), by simply defining their value with the functionality we want them to do. To start doing this we begin writing them like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // the GET Method app . get () // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) To continue defining the functionality of these methods we'll be putting some parameters inside each of these...","title":"Creating Routes"},{"location":"module-1/introToExpress/#the-1st-argument-the-path","text":"The path is a string that determines what route should be used. For example, all of our data will come through this one server so it needs to be pass through one root path: \"http://localhost:4000/\" . But if we wanted to serve user data and car data we'd need to define them at different paths. To do this we'd say that cars are at \"http://localhost:4000/cars\" and users are at \"http://localhost:4000/users\" . Therefore the path is \"/cars\" or \"/users\" . To define them you'd write it like this: 1 2 `app.get('/cars')` `app.get('/users')` We only need to define the last segment of the path: /users or /cars because our server lives at https://localhost:4000/ . Once our request from either Postman or our front-end app finds the server at the URL: https://localhost:4000/ , ( or any other URL it sits on once we host it remotely ), the path tells Express where to direct the request so that it finds the right route to get the expected resource (cars or users). if you look at the APIs we've worked with in 101 and 211 you'll see this same pattern used in those servers... /posts/ , /images , /products , /users , etc. Paths can also accept variables. Say that we wanted to obtain a specific user by their id , say 543 . In that case the full URL would be http://localhost:4000/users/543 . This will get the user whose id is equal to \"543\". But then someone might want user: 106, or user: 201, etc. To design for all of these potential request in our server we would write that route with a variable: :id . As in, 1 app . get ( '/users/:id' ) ` This is what our app starts to look like with that logic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // GET all users. Usually known as \"get all\" app . get ( \"/users\" ) // GET just one user by id. Usually known as \"get one\" app . get ( \"/users/:id\" ) // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) })","title":"The 1st Argument: the Path"},{"location":"module-1/introToExpress/#the-2nd-argument-a-callback-function","text":"After the path we have to define a second parameter that tells the server what's supposed to happen when this route is called. This second parameter is a callback function; meaning that this is what is suppose to happen when the method is called. In order for these callbacks to work they themselves need at least two argument passed into them: req (request) and res (response).","title":"The 2nd Argument: a Callback Function"},{"location":"module-1/introToExpress/#the-req-parameter","text":"req represents the request object. This is the message that is sent from the frontend to our backend server. This object includes two main properties: headers and body . If you used Postman to submit a request with a body of { user: 'John' } then we could access that by referring to req.body . There are other properties of the incoming request that we can access as well, such as req.params , req.headers and req.cookies . NOTE: you must use a Cookie parser to do that last one. res represents the response object. This is what we will send back to the end user (client) on the frontend from the backend. We can send responses in a variety of formats but the two most popular are plain text and JSON. For example, let's say you want to send the text \"success\" to a user once an operation is complete. In that case you would complete whatever functionality you wanted inside of the callback and then call a the send method on the res object: res.send(\"success\") . The user will see this message after executing the specified action with our API. More commonly we are sending data payloads (data about a specific item: user or car, whatever) back to the user. On a GET request we might send the entire data object of a user back so that the client(front-end app/Postman). In that case, we called the json method on the res object to convert & package the data payload into a JSON string before we send it back to the client: res.json(user) . This user parameter could be anything we wanted but naming it this way helps us developers know what's supposed to be in there. The same logic would go for our car data: res.json(car) We will become more familiar with req and res as we practice more. However, now that we have our parameters and have a visual for the callback function we can put it all together. We mentioned previously that the first parameter is the path and the second parameter is the callback function , so when we write it all together we arrive at a variation of the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () // ...more code here... // GET method to get all users with the second argument including req & res that will resolve to a 'success' message being sent to the client/frontend app . get ( '/users' , ( req , res ) => { // ...perform some logic in here like getting the user data from the database... // then send back to the client a message saying 'success' res . send ( 'success' ) }) // GET method to get only one user by their id app . get ( '/users/:id' , ( req , res ) => { // ...store the id of the user request using the params of the req object coming from the client... const userId = req . params . id // ...get the user data from the database using the `userId` variable... // send the back to client a message saying 'success' res . send ( `We'll be sending you user ${ userId } shortly.` ) }) // ...more code here... // ...app.listen()... What you see above is a couple of routes/ endpoints . We will create many like these throughout this course. Take some time to understand how these methods work and the arguments that are being passed into them and what they are doing. In the coming sections we'll be adding on to these **endpoints to actually get data from a database so we can return actual data!!","title":"The Req Parameter"},{"location":"module-1/introToExpress/#practice-it","text":"Before playing in the sandbox below, be sure to read this blog first! In the Express Playground above, hover over different sections of the code to get more info. Read the article to get a better understand of how this playground operates and what Express is meant to do.","title":"Practice It"},{"location":"module-1/introToExpress/#additional-resources","text":"YT, SelfTuts - Pt. 1 What is Express in Node.js Article, Code Analogies - The Basics of Express.js Look ahead to the Questions for Student Led Discussion","title":"Additional Resources"},{"location":"module-1/introToExpress/#know-your-docs","text":"Geeks4Geeks Docs - Express & Cookie-Parser Express Docs - Basics Routing","title":"Know Your Docs"},{"location":"module-1/nodeRecap/","text":"Node Recap He who moves not forward goes backward.\u2003\u2014Johann Wolfgang von Goethe Overview In this class we are going to be focused on creating and deploying APIs with Node.js and Express. Hopefully we are starting to feel quite comfortable using Node but we will spend the first class recapping/summarizing our knowledge of Node and NPM so that we can really hit the ground running in the coming weeks. JavaScript, why? JavaScript was originally designed to work on the web and so it only ran in browsers (Chrome/Safari/IE). Its purpose was to add functionality to websites to make them interactive and it has been very successful in this regard. Eventually, experts in the language decided they wanted to take the benefits of JavaScript and use them OUTSIDE of a web browser, for example on a server, and thus Node.js was born. Node.js is an open-source environment that executes JavaScript outside of a web browser. Why? While there are many benefits of using JavaScript, we'll focus on the big one for you as the developer. You may have heard the term fullstack used in the software industry to reference a person who works on both the frontend and the backend. The frontend almost always includes JavaScript while the backend could be any assortment of server-side languages such as Java, C# or Python. Because of this, many traditional full-stack developers were proficient in at least two languages. Adding Node.js into that mix allows the developer to focus on only one, JavaScript. With Node.js, we can run JavaScript on both the client side and the server. See It - What is Node.js Practice It Open the Repl.it below. Alter the function to include functionality for an international phone number. Ex. (+1). Add one number to the beginning of the array to support this. Additionally, remove all formatting (besides the +) from the phone number such that the result is returned as +19775631212 . This should make the logic of the function very simple. Without the advent of Node.js, we wouldn't be able to use JavaScript as a scripting language in the terminal as we can here in this Repl.it example or in our own terminal on our personal machine. Try It on Your Personal Machine By the time you come to this course you should have installed Node.js and be able to type into your terminal/bash node -v to get the current version of Node.js you have installed and running. On your desktop, create a file called: myTestFile.js and open it with your text editor, VS Code or your preference. Copy/paste the code from the Repl.it into that file, save, and return to your terminal/bash. cd desktop to change into your Desktop directory. Run the command node myTestFile.js + Enter You should see the same results you saw in the Repl.it online terminal. Now delete the file myTestFile.js to keep your desktop clean and organized. This is the power of Node.js. Without it, JavaScript couldn't be run outside of your browser. Try it in the Browser Now go back to Chrome and type Cmd + Option + I or ++ctrl+shift+i+ to open your dev tools tray. Navigate to the console. Copy/paste the formatPhone function into the console and hit Enter . Copy/paste the invocation of the function formatPhone([9, 7, 7, 5, 6, 3, 1, 2, 1, 2]) and hit Enter . You should get the exact same return value. It's important to note the difference in the environment. If you built a web page like you did in 101 and added functionality to it with JavaScript, the code was running in the browser. But if you were running unit tests on your terminal apps like you did in JS211, your JavaScript code was running in the Node environment. Without having to switch between a front-end scripting language and a back-end programming language we can focus all of our attention on one language, JavaScript. So let's get really good with JavaScript in this course!! NPM NPM stands for Node Package Manager . It also stands for Not Pancake Mix or any other assortment of clever acronyms developers can think of, and it's become something of a running joke on their website. The purpose of this tool is to allow you to integrate third-party code into your application. Third-party code means code another developer has written and published to NPM. Many developers in the open-source community work on projects that will benefit the masses and these projects can be downloaded via NPM and used in your project. A package.json file keeps track of all the packages you are currently using in your current project. Likewise, if you were building with Python and pip (the Python equivalent of npm ) you would see all of your code packages in a requirements.txt file. See It - NPM Practice It: NPM We are going to practice creating a new project with NPM. When complete, we will have a new folder with a package.json file inside and we will have included an external package in our project to tinker with. Navigate to your desktop: cd desktop + Enter . Create a new folder called \"sampleProject\" : mkdir sampleProject on your desktop. Navigate to it cd sampleProject + Enter . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by typing Enter over and over all the way through the last step: \"Is this OK? (yes)\". -> Y + Enter ls on Mac or dir on Windows and you will see package.json , right? Let's install moment , a date/time package by typing npm i moment . Now open the sampleProject folder in your text editor. Do you see moment listed in your package.json file? Do you see a new folder called \" node_modules/ \"? This folder keeps up with all of our third-party code packages. Now, create a file called index.js in your project folder. Import moment into the file by copy/pasting: const moment = require('moment') on the first line. On the third line create a variable for the current day: const day = moment().format('dddd') . On the fifth line log a message for the user that tells them what day it is: console.log('Today is', day) . Use our Node environment to run the code: node index.js . Know Your Docs Node Docs - Nodejs.org NPM Docs - Moment.js","title":"Node & NPM"},{"location":"module-1/nodeRecap/#node-recap","text":"He who moves not forward goes backward.\u2003\u2014Johann Wolfgang von Goethe","title":"Node Recap"},{"location":"module-1/nodeRecap/#overview","text":"In this class we are going to be focused on creating and deploying APIs with Node.js and Express. Hopefully we are starting to feel quite comfortable using Node but we will spend the first class recapping/summarizing our knowledge of Node and NPM so that we can really hit the ground running in the coming weeks.","title":"Overview"},{"location":"module-1/nodeRecap/#javascript-why","text":"JavaScript was originally designed to work on the web and so it only ran in browsers (Chrome/Safari/IE). Its purpose was to add functionality to websites to make them interactive and it has been very successful in this regard. Eventually, experts in the language decided they wanted to take the benefits of JavaScript and use them OUTSIDE of a web browser, for example on a server, and thus Node.js was born. Node.js is an open-source environment that executes JavaScript outside of a web browser. Why? While there are many benefits of using JavaScript, we'll focus on the big one for you as the developer. You may have heard the term fullstack used in the software industry to reference a person who works on both the frontend and the backend. The frontend almost always includes JavaScript while the backend could be any assortment of server-side languages such as Java, C# or Python. Because of this, many traditional full-stack developers were proficient in at least two languages. Adding Node.js into that mix allows the developer to focus on only one, JavaScript. With Node.js, we can run JavaScript on both the client side and the server.","title":"JavaScript, why?"},{"location":"module-1/nodeRecap/#see-it-what-is-nodejs","text":"","title":"See It - What is Node.js"},{"location":"module-1/nodeRecap/#practice-it","text":"Open the Repl.it below. Alter the function to include functionality for an international phone number. Ex. (+1). Add one number to the beginning of the array to support this. Additionally, remove all formatting (besides the +) from the phone number such that the result is returned as +19775631212 . This should make the logic of the function very simple. Without the advent of Node.js, we wouldn't be able to use JavaScript as a scripting language in the terminal as we can here in this Repl.it example or in our own terminal on our personal machine.","title":"Practice It"},{"location":"module-1/nodeRecap/#try-it-on-your-personal-machine","text":"By the time you come to this course you should have installed Node.js and be able to type into your terminal/bash node -v to get the current version of Node.js you have installed and running. On your desktop, create a file called: myTestFile.js and open it with your text editor, VS Code or your preference. Copy/paste the code from the Repl.it into that file, save, and return to your terminal/bash. cd desktop to change into your Desktop directory. Run the command node myTestFile.js + Enter You should see the same results you saw in the Repl.it online terminal. Now delete the file myTestFile.js to keep your desktop clean and organized. This is the power of Node.js. Without it, JavaScript couldn't be run outside of your browser.","title":"Try It on Your Personal Machine"},{"location":"module-1/nodeRecap/#try-it-in-the-browser","text":"Now go back to Chrome and type Cmd + Option + I or ++ctrl+shift+i+ to open your dev tools tray. Navigate to the console. Copy/paste the formatPhone function into the console and hit Enter . Copy/paste the invocation of the function formatPhone([9, 7, 7, 5, 6, 3, 1, 2, 1, 2]) and hit Enter . You should get the exact same return value. It's important to note the difference in the environment. If you built a web page like you did in 101 and added functionality to it with JavaScript, the code was running in the browser. But if you were running unit tests on your terminal apps like you did in JS211, your JavaScript code was running in the Node environment. Without having to switch between a front-end scripting language and a back-end programming language we can focus all of our attention on one language, JavaScript. So let's get really good with JavaScript in this course!!","title":"Try it in the Browser"},{"location":"module-1/nodeRecap/#npm","text":"NPM stands for Node Package Manager . It also stands for Not Pancake Mix or any other assortment of clever acronyms developers can think of, and it's become something of a running joke on their website. The purpose of this tool is to allow you to integrate third-party code into your application. Third-party code means code another developer has written and published to NPM. Many developers in the open-source community work on projects that will benefit the masses and these projects can be downloaded via NPM and used in your project. A package.json file keeps track of all the packages you are currently using in your current project. Likewise, if you were building with Python and pip (the Python equivalent of npm ) you would see all of your code packages in a requirements.txt file.","title":"NPM"},{"location":"module-1/nodeRecap/#see-it-npm","text":"","title":"See It - NPM"},{"location":"module-1/nodeRecap/#practice-it-npm","text":"We are going to practice creating a new project with NPM. When complete, we will have a new folder with a package.json file inside and we will have included an external package in our project to tinker with. Navigate to your desktop: cd desktop + Enter . Create a new folder called \"sampleProject\" : mkdir sampleProject on your desktop. Navigate to it cd sampleProject + Enter . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by typing Enter over and over all the way through the last step: \"Is this OK? (yes)\". -> Y + Enter ls on Mac or dir on Windows and you will see package.json , right? Let's install moment , a date/time package by typing npm i moment . Now open the sampleProject folder in your text editor. Do you see moment listed in your package.json file? Do you see a new folder called \" node_modules/ \"? This folder keeps up with all of our third-party code packages. Now, create a file called index.js in your project folder. Import moment into the file by copy/pasting: const moment = require('moment') on the first line. On the third line create a variable for the current day: const day = moment().format('dddd') . On the fifth line log a message for the user that tells them what day it is: console.log('Today is', day) . Use our Node environment to run the code: node index.js .","title":"Practice It: NPM"},{"location":"module-1/nodeRecap/#know-your-docs","text":"Node Docs - Nodejs.org NPM Docs - Moment.js","title":"Know Your Docs"},{"location":"module-1/preClassOneChecklist/","text":"Pre-Class One Checklist Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Downloaded Postman Downloaded Node Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the Moment.js Practice Section Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Pre-Class Checklist"},{"location":"module-1/preClassOneChecklist/#pre-class-one-checklist","text":"Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Downloaded Postman Downloaded Node Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the Moment.js Practice Section Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Pre-Class One Checklist"},{"location":"module-1/prepareYourMachine/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"module-1/prepareYourMachine/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"module-1/prepareYourMachine/#see-it","text":"","title":"See It"},{"location":"module-1/prepareYourMachine/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"module-1/prepareYourMachine/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"module-1/prepareYourMachine/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"module-1/prepareYourMachine/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"module-1/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"How to Succeed"},{"location":"module-1/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"module-1/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"module-1/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"module-1/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"module-1/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"},{"location":"module-1/whatIsNodeJS/","text":"What is Node.js While the name of the course you are starting may be called JavaScript 311 it's important to remember that JavaScript's native home is the browser. In all of its lifetime the only place JavaScript could be read was in the browser for use on the internet. It is only recently that JavaScript has been able to be run on a computer or server. Strangely enough, this is how many web apps are built now, with full \"JavaScript\" front and back ends. With the advent of Node.js, JavaScript is able to do many more things than it could do pre-2009. All this to say, what you'll be working in, while it looks like JavaScript, behaves like JavaScript and is based in JavaScript, is really Node.js. Node.js is a language built on JavaScript using Chrome's V8 JavaScript engine. Built by Ryan Dahl and first released in 2009, its many powers include the importing and exporting of modules. Remember the giant library of libraries discussed in Web 101? This is it. Node is the giant library and each of these modules are called \"libraries\". This means that we could build a module with really cool functions, push it to Node and then someone else could find it and use it for their project. This also means we could do the same. The following video is a requirement for all Intermediate students. Watch it and take notes! It's quite clear and thorough! What is Node.js Exactly Install Node Before you come into to class make sure you have installed Node.js . Click on the one on the left: \"Recommended for Most Users\" After you've installed it you should be able to go to the Terminal/Bash/CommandPrompt and type in node -v and get an output of v10.16.0 or something close to that.","title":"Working in Node"},{"location":"module-1/whatIsNodeJS/#what-is-nodejs","text":"While the name of the course you are starting may be called JavaScript 311 it's important to remember that JavaScript's native home is the browser. In all of its lifetime the only place JavaScript could be read was in the browser for use on the internet. It is only recently that JavaScript has been able to be run on a computer or server. Strangely enough, this is how many web apps are built now, with full \"JavaScript\" front and back ends. With the advent of Node.js, JavaScript is able to do many more things than it could do pre-2009. All this to say, what you'll be working in, while it looks like JavaScript, behaves like JavaScript and is based in JavaScript, is really Node.js. Node.js is a language built on JavaScript using Chrome's V8 JavaScript engine. Built by Ryan Dahl and first released in 2009, its many powers include the importing and exporting of modules. Remember the giant library of libraries discussed in Web 101? This is it. Node is the giant library and each of these modules are called \"libraries\". This means that we could build a module with really cool functions, push it to Node and then someone else could find it and use it for their project. This also means we could do the same. The following video is a requirement for all Intermediate students. Watch it and take notes! It's quite clear and thorough!","title":"What is Node.js"},{"location":"module-1/whatIsNodeJS/#what-is-nodejs-exactly","text":"","title":"What is Node.js Exactly"},{"location":"module-1/whatIsNodeJS/#install-node","text":"Before you come into to class make sure you have installed Node.js . Click on the one on the left: \"Recommended for Most Users\" After you've installed it you should be able to go to the Terminal/Bash/CommandPrompt and type in node -v and get an output of v10.16.0 or something close to that.","title":"Install Node"}]}