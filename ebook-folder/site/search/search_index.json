{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS311 - Node Servers + SQL Databases Objective Statement By the end of this course, students will complete and deploy a REST API (the back-end server & database) for their Capstone Project app. Through the understanding of data modeling, routing, authentication, and the use of the express library, students will learn and practice building server routes complete with authentication and authorization. The final checkpoint in this course is the hosted REST API which will be used as the back-end server for the front-end app they build in their 411 course. These two pieces will come together to create a full-stack application that students will present to the public at graduation as their Capstone Project. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class. To Graduate the Full-Stack Program A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website. To Present at Graduation To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code ) How To Use This Textbook Video","title":"Home"},{"location":"#welcome-to-js311-node-servers-sql-databases","text":"","title":"Welcome to JS311 - Node Servers + SQL Databases"},{"location":"#objective-statement","text":"By the end of this course, students will complete and deploy a REST API (the back-end server & database) for their Capstone Project app. Through the understanding of data modeling, routing, authentication, and the use of the express library, students will learn and practice building server routes complete with authentication and authorization. The final checkpoint in this course is the hosted REST API which will be used as the back-end server for the front-end app they build in their 411 course. These two pieces will come together to create a full-stack application that students will present to the public at graduation as their Capstone Project.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. To pass JS211 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. To pass JS311 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the restAPI (you Server and Database) of your Capstone Project. To pass JS411 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, the Front-End (client-side) of your Capstone Project. To pass Job501 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, create a profile page on the company's \"Hire\" page + present their Capstone Project to the class.","title":"To Pass This Class (and all others)"},{"location":"#to-graduate-the-full-stack-program","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"To Graduate the Full-Stack Program"},{"location":"#to-present-at-graduation","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"To Present at Graduation"},{"location":"#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 How do you organize your code? What are some suggestions you find on the web? Can you describe your workflow when you create a web page or web app? You can\u2019t work out how to solve a coding problem, where do you find the answer? Why? How do you know? What problems have you solved that didn\u2019t involve you coding? Talk about your preferred development environment. (What IDE or text editor you enjoy, and why?) How are you keeping up with the latest developments in web development? Class 4 What do you find challenging about coding? Talk about a project that disappointed you. What would you change? List three key things to consider when coding with SEO in mind. List five or more ways you could optimize a website to be as efficient and scalable as possible. Class 6 If a user attempts to create a resource that already exists\u2014for example, an email address that\u2019s already registered\u2014what HTTP status code would you return? Consider a responsive site design that requires a full-width image in all responsive states. What would be the correct way to code this to ensure the page loads the smallest image required to fill the space? When should you npm and when should you yarn? How can you make sure your dependencies are safe? What are the differences between CHAR and VARCHAR data types (MySQL)? How else can the JavaScript code below be written using Node.Js to produce the same output? 1 2 3 4 5 6 7 8 9 10 11 console . log ( \"first\" ); setTimeout ( function () { console . log ( \"second\" ); }, 0 ); console . log ( \"third\" ); // Output: // first // third // second Class 8 What is \u201ccallback hell\u201d and how can it be avoided? What are \"stubs\" in Node.js? What are \u201cstreams\u201d in Node.JS? What does \"chaining\" mean in Node.JS? Explain \u201cconsole\u201d in Node.JS. Explain exit codes in Node.JS. List out some exit codes. What is the difference between cluster and non-cluster Index? What are user defined functions? What are all types of user defined functions? Class 10 How does Node.js handle child threads? How can you listen on port 80 with Node? What tools can be used to assure consistent style? List out the differences between AngularJS and NodeJS. What are the advantages of NodeJS? What is meant by JSON? Discuss your understanding of Agile so far. How is scrum different from waterfall? What are the Three Amigos in Scrum? What is the \u201ctimeboxing\u201d of a scrum process called? Describe, please. What are the roles of a scrum master and product owner? Class 12 What's the difference between operational and programmer errors? What is \u2018event-driven\u2019 programming? What are \u2018worker processes\u2019? Describe how Node.js can be made more scalable. Explain global installation of dependencies. Explain RESTful Web Service. Class 14 Tell me about a project you\u2019re particularly proud of. What did you do that worked out well? How do you do testing, and what do you think about it? How would you improve QA? What tools do you use to find a performance bug? What is the preferred method of resolving unhandled exceptions in Node.js? How does Node.js support multi-processor platforms, and does it fully utilize all processor resources? What is typically the first argument passed to a Node.js callback handler? Class 16 Can you explain the purpose of each type of HTTP Request when using a RESTful web service? What's a test pyramid? How can you implement it when talking about HTTP APIs? What is the \"demultiplexer\"? What\u2019s the difference between \"blocking\" and \u2018non-blocking\u2019 functions? What are the main security implementations within NodeJS? Explain the \u201cpath\u201d module in NodeJS.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2","text":"How do you organize your code? What are some suggestions you find on the web? Can you describe your workflow when you create a web page or web app? You can\u2019t work out how to solve a coding problem, where do you find the answer? Why? How do you know? What problems have you solved that didn\u2019t involve you coding? Talk about your preferred development environment. (What IDE or text editor you enjoy, and why?) How are you keeping up with the latest developments in web development?","title":"Class 2"},{"location":"additionalResources/blogPrompts/#class-4","text":"What do you find challenging about coding? Talk about a project that disappointed you. What would you change? List three key things to consider when coding with SEO in mind. List five or more ways you could optimize a website to be as efficient and scalable as possible.","title":"Class 4"},{"location":"additionalResources/blogPrompts/#class-6","text":"If a user attempts to create a resource that already exists\u2014for example, an email address that\u2019s already registered\u2014what HTTP status code would you return? Consider a responsive site design that requires a full-width image in all responsive states. What would be the correct way to code this to ensure the page loads the smallest image required to fill the space? When should you npm and when should you yarn? How can you make sure your dependencies are safe? What are the differences between CHAR and VARCHAR data types (MySQL)? How else can the JavaScript code below be written using Node.Js to produce the same output? 1 2 3 4 5 6 7 8 9 10 11 console . log ( \"first\" ); setTimeout ( function () { console . log ( \"second\" ); }, 0 ); console . log ( \"third\" ); // Output: // first // third // second","title":"Class 6"},{"location":"additionalResources/blogPrompts/#class-8","text":"What is \u201ccallback hell\u201d and how can it be avoided? What are \"stubs\" in Node.js? What are \u201cstreams\u201d in Node.JS? What does \"chaining\" mean in Node.JS? Explain \u201cconsole\u201d in Node.JS. Explain exit codes in Node.JS. List out some exit codes. What is the difference between cluster and non-cluster Index? What are user defined functions? What are all types of user defined functions?","title":"Class 8"},{"location":"additionalResources/blogPrompts/#class-10","text":"How does Node.js handle child threads? How can you listen on port 80 with Node? What tools can be used to assure consistent style? List out the differences between AngularJS and NodeJS. What are the advantages of NodeJS? What is meant by JSON? Discuss your understanding of Agile so far. How is scrum different from waterfall? What are the Three Amigos in Scrum? What is the \u201ctimeboxing\u201d of a scrum process called? Describe, please. What are the roles of a scrum master and product owner?","title":"Class 10"},{"location":"additionalResources/blogPrompts/#class-12","text":"What's the difference between operational and programmer errors? What is \u2018event-driven\u2019 programming? What are \u2018worker processes\u2019? Describe how Node.js can be made more scalable. Explain global installation of dependencies. Explain RESTful Web Service.","title":"Class 12"},{"location":"additionalResources/blogPrompts/#class-14","text":"Tell me about a project you\u2019re particularly proud of. What did you do that worked out well? How do you do testing, and what do you think about it? How would you improve QA? What tools do you use to find a performance bug? What is the preferred method of resolving unhandled exceptions in Node.js? How does Node.js support multi-processor platforms, and does it fully utilize all processor resources? What is typically the first argument passed to a Node.js callback handler?","title":"Class 14"},{"location":"additionalResources/blogPrompts/#class-16","text":"Can you explain the purpose of each type of HTTP Request when using a RESTful web service? What's a test pyramid? How can you implement it when talking about HTTP APIs? What is the \"demultiplexer\"? What\u2019s the difference between \"blocking\" and \u2018non-blocking\u2019 functions? What are the main security implementations within NodeJS? Explain the \u201cpath\u201d module in NodeJS.","title":"Class 16"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset Sleep is your Superpower - Matt Walker","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset Sleep is your Superpower - Matt Walker","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate , rewrite , and clarify the question. Write the expected return given the input. Make a code plan and speak aloud with your interviewers/team. Test and come up with edge cases. Revise if you can for efficiency. Restate, Rewrite, Clarify, Return, Plan, Collaborate, Code, Test, Revise Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a screenshot( Cmd + Shift + 3 || Alt + PrtScn) and transfer it to a Repl.it when you get home. The Prompts Class 1 Prompt 1: Using HTTP and APIs - All together at the same time. We'll hear thoughts and discussion afterward. Write out the URI to get an individual character from the Star Wars API. Highlight the pieces of the URI and explain what they mean. Explain what is included in an HTTP request message. Write it out and explain the parts. Explain what is included in an HTTP response message. Write it out and explain the parts. Diagram what happens when a client makes a GET request. What is included in the request? - [ ] What is included in the response? Diagram a POST request to create a resource. What is included in the request? What is included in the response? Class 2 Prompt 1: sumOneForOne - There are two arrays with individual values. Write a JavaScript program to compute the sum of each individual index value from the given arrays. 1 2 3 4 5 6 let array1 = [ 1 , 0 , 2 , 3 , 4 ]; let array2 = [ 3 , 5 , 6 , 7 , 8 , 13 ]; const sumOneForOne = () => { /*your code here*/ } sumOneForOne ( array1 , array2 ) // => [4, 5, 8, 10, 12, 13] Prompt 2: RESTful Design - Design a REST API for a photo album site. What resources would the API support? What operations can be done on those resources, and what HTTP verb would be used for each? What would the body of a request and response look like for each operation? For this first whiteboarding challenge, the instructor will lead the discovery. The Instructor will lead this discussion with input from the class. Class 3 Prompt 1: Title - Your customer has sa list of volume, which you have neatly stored into an array. One of the properties of each volume is a protection policy. The customer wants their users to be able to apply a protection policy to new volumes globally, if all of the existing volumes have the same policy. You need to write a function that returns a boolean. true , meaning all the policies in the array are the same, or false , meaning at least one policy in the array is different from another. The caveat here is, new volumes are also in this array, and their policy is denoted as a special string '--:--' . This means there is no policy on the volume and thus, the volume is new. If all the policies in the array are the same, we can apply that policy globally TO the new volumes, else, we cannot, and will have to go new-volume by new-volume, applying policies individually. Policies are denoted with characters 'A' 'B' 'C' or 'D'. New volume policies are denoted with the special string '--:--' . 1 2 3 4 5 6 7 INPUT: [ {policy: 'A'}, {policy: 'A'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'A'},] OUTPUT: true, set global policy INPUT: [ {policy: 'A'}, {policy: 'B'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'C'},] OUTPUT: false, prevent global policy With this data, build a function that determines if setting a global policy is possible or not. Class 4 Prompt 1: getNArray - Write a JavaScript function to get the first element of an array. BUT passing a parameter 'n' will return the first 'n' elements of the array. 1 2 3 4 5 getNArray ([ 7 , 9 , 0 , - 2 ]); // --> 7 getNArray ([], 3 ); // --> [] getNArray ([ 7 , 9 , 0 , - 2 ], 3 ); // --> [7, 9, 0] getNArray ([ 7 , 9 , 0 , - 2 ], 6 ); // --> [7, 9, 0, -2] getNArray ([ 7 , 9 , 0 , - 2 ], - 3 ); // --> [] Class 5 Prompt 1: ArrayClone - Write a JavaScript function to clone an array. 1 2 console . log ( cloneArray ([ 1 , 2 , 4 , 0 ])); // => [1, 2, 4, 0] console . log ( cloneArray ([ 1 , 2 , [ 4 , 0 ]])); // => [1, 2, [4, 0]] Class 6 Prompt 1: Binary Search - Write a JavaScript program to perform a binary search. Note: A binary search or half-interval search algorithm finds the position of a specified input value within an array sorted by key value.* 1 2 3 4 5 // Sample array : const items = [ 1 , 2 , 3 , 4 , 5 , 7 , 8 , 9 ]; // Expected Output : console . log ( binary_Search ( items , 1 )); // --> 0 console . log ( binary_Search ( items , 5 )); // --> 4 Class 7 Prompt 1: deDup - Given a sorted array of numbers, remove the duplicates in-place such that each unique element appears only once and return the new length. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function deDup ( array ){ // ...your code here... } let test1 = [ 1 , 1 , 2 ]; console . log ( deDup ( test1 )) // 2 console . log ( test1 ) //[1,2,null] let test2 = [ 1 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 ]; console . log ( deDup ( test2 )) // 5 console . log ( test2 ); // [1,2,3,4,5,null,null,null,null] let test3 = [ 1 , 1 , 1 , 1 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 ]; console . log ( deDup ( test3 )) // 5 console . log ( test3 ) // [1,2,3,4,5] let test4 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]; console . log ( deDup ( test4 )) // 9 console . log ( test4 ) //[1,2,3,4,5,6,7,8,9] Class 8 Prompt 1: Technical Question - What are the security threats full stack developers must be aware of? Class 9 Prompt 2: Two Digits Only - How would you format a string to always show two significant digits after the decimal? For Example: 1 => 1.00 or 4.5 => 4.50, 7.888888=> 7.88. NOTE: Can\u2019t use .toFixed Class 10 None today. Class 11 Prompt 1: firstNoRepeat - Given a string, return the index of the first non-repeating character in the string. If none exist, return -1. 1 2 3 4 5 firstNoRepeat ( \"seat\" ) // 0 firstNoRepeat ( \"lollipop\" ) // 4 firstNoRepeat ( \"poop\" ) // -1 Class 12 Prompt 1: Best Profit - Take an array of prices where each index in the array represents a time, i.e. every minute or every hour. Build an algorithm to find out what your best profit could have been if you bought at the lowest price and sold at the highest price, after you bought . You must buy before you sell. 1 2 3 const myArr = [ 75 , 39 , 44 , 1 , 8 , 10 , 1 , 11 , 2 , 3 , 4 , 5 ] findBestSellAndBuy ( myArr ) // --> { maxProfit: 10, bestBuyIndex: 3, buyPrice: 1, bestSellAt: 7, sellPrice: 11 } Class 13 Prompt 1: Recursive Permutation - Write a recursive function for generating all permutations of an input string. Return them as a set. Don't worry about time or space complexity\u2014if we wanted efficiency we'd write an iterative version. To start, assume every character in the input string is unique. Your function can have loops in it\u2014it just also needs to be recursive. What's a permutation? What's recursion? Class 14 Prompt 1: Figure it Out - Given an array of numbers, return an array of paired subset numbers in descending order based on their sums. Class 15 Prompt 1: Title - The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) 1 2 3 P A H N A P L S I I G Y I R 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const convertZigZag = ( string , numRows ) => { // your code here } // Example 1: convertZigZag ( \"PAYPALISHIRING\" , 3 ) // --> Output: \"PAHNAPLSIIGYIR\" // Example 2: convertZigZag ( \"PAYPALISHIRING\" , 4 ) // --> Output: \"PINALSIGYAHRPI\" // Explanation: // P I N // A L S I G // Y A H R // P I Class 16 Prompt 1: Automatic Delivery Network - Your company delivers breakfast via autonomous quadcopter drones, and something mysterious has happened. Each breakfast delivery is assigned a unique ID, a positive integer. When one of the company's 100 drones takes off with a delivery, the delivery's ID is added to an array, deliveryIdConfirmations. When the drone comes back and lands, the ID is again added to the same array. After breakfast this morning there were only 99 drones on the tarmac. One of the drones never made it back from a delivery. We suspect a secret agent from Amazon placed an order and stole one of our patented drones. To track them down, we need to find their delivery ID. Given the array of IDs, which contains many duplicate integers and one unique integer, find the unique integer. The IDs are not guaranteed to be sorted or sequential. Orders aren't always fulfilled in the order they were received, and some deliveries get cancelled before takeoff.","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate , rewrite , and clarify the question. Write the expected return given the input. Make a code plan and speak aloud with your interviewers/team. Test and come up with edge cases. Revise if you can for efficiency. Restate, Rewrite, Clarify, Return, Plan, Collaborate, Code, Test, Revise Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a screenshot( Cmd + Shift + 3 || Alt + PrtScn) and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: Using HTTP and APIs - All together at the same time. We'll hear thoughts and discussion afterward. Write out the URI to get an individual character from the Star Wars API. Highlight the pieces of the URI and explain what they mean. Explain what is included in an HTTP request message. Write it out and explain the parts. Explain what is included in an HTTP response message. Write it out and explain the parts. Diagram what happens when a client makes a GET request. What is included in the request? - [ ] What is included in the response? Diagram a POST request to create a resource. What is included in the request? What is included in the response?","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: sumOneForOne - There are two arrays with individual values. Write a JavaScript program to compute the sum of each individual index value from the given arrays. 1 2 3 4 5 6 let array1 = [ 1 , 0 , 2 , 3 , 4 ]; let array2 = [ 3 , 5 , 6 , 7 , 8 , 13 ]; const sumOneForOne = () => { /*your code here*/ } sumOneForOne ( array1 , array2 ) // => [4, 5, 8, 10, 12, 13] Prompt 2: RESTful Design - Design a REST API for a photo album site. What resources would the API support? What operations can be done on those resources, and what HTTP verb would be used for each? What would the body of a request and response look like for each operation? For this first whiteboarding challenge, the instructor will lead the discovery. The Instructor will lead this discussion with input from the class.","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: Title - Your customer has sa list of volume, which you have neatly stored into an array. One of the properties of each volume is a protection policy. The customer wants their users to be able to apply a protection policy to new volumes globally, if all of the existing volumes have the same policy. You need to write a function that returns a boolean. true , meaning all the policies in the array are the same, or false , meaning at least one policy in the array is different from another. The caveat here is, new volumes are also in this array, and their policy is denoted as a special string '--:--' . This means there is no policy on the volume and thus, the volume is new. If all the policies in the array are the same, we can apply that policy globally TO the new volumes, else, we cannot, and will have to go new-volume by new-volume, applying policies individually. Policies are denoted with characters 'A' 'B' 'C' or 'D'. New volume policies are denoted with the special string '--:--' . 1 2 3 4 5 6 7 INPUT: [ {policy: 'A'}, {policy: 'A'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'A'},] OUTPUT: true, set global policy INPUT: [ {policy: 'A'}, {policy: 'B'}, {policy: '--:--'}, {policy: '--:--'}, {policy: 'A'}, {policy: 'C'},] OUTPUT: false, prevent global policy With this data, build a function that determines if setting a global policy is possible or not.","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: getNArray - Write a JavaScript function to get the first element of an array. BUT passing a parameter 'n' will return the first 'n' elements of the array. 1 2 3 4 5 getNArray ([ 7 , 9 , 0 , - 2 ]); // --> 7 getNArray ([], 3 ); // --> [] getNArray ([ 7 , 9 , 0 , - 2 ], 3 ); // --> [7, 9, 0] getNArray ([ 7 , 9 , 0 , - 2 ], 6 ); // --> [7, 9, 0, -2] getNArray ([ 7 , 9 , 0 , - 2 ], - 3 ); // --> []","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: ArrayClone - Write a JavaScript function to clone an array. 1 2 console . log ( cloneArray ([ 1 , 2 , 4 , 0 ])); // => [1, 2, 4, 0] console . log ( cloneArray ([ 1 , 2 , [ 4 , 0 ]])); // => [1, 2, [4, 0]]","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Binary Search - Write a JavaScript program to perform a binary search. Note: A binary search or half-interval search algorithm finds the position of a specified input value within an array sorted by key value.* 1 2 3 4 5 // Sample array : const items = [ 1 , 2 , 3 , 4 , 5 , 7 , 8 , 9 ]; // Expected Output : console . log ( binary_Search ( items , 1 )); // --> 0 console . log ( binary_Search ( items , 5 )); // --> 4","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: deDup - Given a sorted array of numbers, remove the duplicates in-place such that each unique element appears only once and return the new length. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function deDup ( array ){ // ...your code here... } let test1 = [ 1 , 1 , 2 ]; console . log ( deDup ( test1 )) // 2 console . log ( test1 ) //[1,2,null] let test2 = [ 1 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 ]; console . log ( deDup ( test2 )) // 5 console . log ( test2 ); // [1,2,3,4,5,null,null,null,null] let test3 = [ 1 , 1 , 1 , 1 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 ]; console . log ( deDup ( test3 )) // 5 console . log ( test3 ) // [1,2,3,4,5] let test4 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]; console . log ( deDup ( test4 )) // 9 console . log ( test4 ) //[1,2,3,4,5,6,7,8,9]","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Technical Question - What are the security threats full stack developers must be aware of?","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 2: Two Digits Only - How would you format a string to always show two significant digits after the decimal? For Example: 1 => 1.00 or 4.5 => 4.50, 7.888888=> 7.88. NOTE: Can\u2019t use .toFixed","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"None today.","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: firstNoRepeat - Given a string, return the index of the first non-repeating character in the string. If none exist, return -1. 1 2 3 4 5 firstNoRepeat ( \"seat\" ) // 0 firstNoRepeat ( \"lollipop\" ) // 4 firstNoRepeat ( \"poop\" ) // -1","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Best Profit - Take an array of prices where each index in the array represents a time, i.e. every minute or every hour. Build an algorithm to find out what your best profit could have been if you bought at the lowest price and sold at the highest price, after you bought . You must buy before you sell. 1 2 3 const myArr = [ 75 , 39 , 44 , 1 , 8 , 10 , 1 , 11 , 2 , 3 , 4 , 5 ] findBestSellAndBuy ( myArr ) // --> { maxProfit: 10, bestBuyIndex: 3, buyPrice: 1, bestSellAt: 7, sellPrice: 11 }","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Recursive Permutation - Write a recursive function for generating all permutations of an input string. Return them as a set. Don't worry about time or space complexity\u2014if we wanted efficiency we'd write an iterative version. To start, assume every character in the input string is unique. Your function can have loops in it\u2014it just also needs to be recursive. What's a permutation? What's recursion?","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Figure it Out - Given an array of numbers, return an array of paired subset numbers in descending order based on their sums.","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: Title - The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) 1 2 3 P A H N A P L S I I G Y I R 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const convertZigZag = ( string , numRows ) => { // your code here } // Example 1: convertZigZag ( \"PAYPALISHIRING\" , 3 ) // --> Output: \"PAHNAPLSIIGYIR\" // Example 2: convertZigZag ( \"PAYPALISHIRING\" , 4 ) // --> Output: \"PINALSIGYAHRPI\" // Explanation: // P I N // A L S I G // Y A H R // P I","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Automatic Delivery Network - Your company delivers breakfast via autonomous quadcopter drones, and something mysterious has happened. Each breakfast delivery is assigned a unique ID, a positive integer. When one of the company's 100 drones takes off with a delivery, the delivery's ID is added to an array, deliveryIdConfirmations. When the drone comes back and lands, the ID is again added to the same array. After breakfast this morning there were only 99 drones on the tarmac. One of the drones never made it back from a delivery. We suspect a secret agent from Amazon placed an order and stole one of our patented drones. To track them down, we need to find their delivery ID. Given the array of IDs, which contains many duplicate integers and one unique integer, find the unique integer. The IDs are not guaranteed to be sorted or sequential. Orders aren't always fulfilled in the order they were received, and some deliveries get cancelled before takeoff.","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentation Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/reportABug/","text":"Report a Bug Loading\u2026","title":"Report A Bug"},{"location":"additionalResources/reportABug/#report-a-bug","text":"Loading\u2026","title":"Report a Bug"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness. Class 1 There will be no student presentation for the first class. NOTE: In the first three days of this course you will divide the class evenly into the three days and students will present their graduation project idea in a 2-minute pitch. Example: 20 students / 3 days = 6, 7, 7 NOTE: During the last three days of this course, the students will again be divided up evenly to ensure everyone presents over the topic listed below: Walk the class through the life-cycle of your app. Describe challenges and special features as you go. Use your code to show-and-tell. Organize and Coordinate who and when students are presenting. And organize and Coordinate who and when students are presenting. Class 2 None today. Class 3 50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? What do you envision for its future? Followed by a class Q&A. Class 4 50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? What do you envision for its future? Followed by a class Q&A. Class 5 Demystify \u201cContinuous Integration\u201d. Explain to the class what it is, why it\u2019s use and how to develop successful CI Processes. In order to build a site optimized for organic search engine rankings, it is important to implement certain standards throughout the code. These standards are... Class 6 What is multi-threading? Why and how do you use it? A common issue when integrating third party services within your own API requests is having to wait for the response, and as such, forcing the user to have to wait longer. How do you go about avoiding this? Class 7 How do you keep yourself updated about the new trends in the industry? Teach the class why, where and how to find the latest tech updates. How would you prevent a bot from scraping your publicly accessible API? Demo. Class 8 What is CORS? Teach the class what it is, why it's used and how to use it. What are the advantages of REST web services? Class 9 What are NoSQL databases? What are the different types of NoSQL databases? Explain SQL vs NoSQL. Error: \"Process out of Memory Exception\". What does it mean? Why is it happening and how do you fix it? Is Node good at CPU intensive tasks? Why or why not? Class 10 Module Requiring vs Dependency Injection: which is better and why? Explain what Reactor Pattern in Node.js is. Class 11 What is a stream and what are the types of streams available in Node.js? Node is a single threaded runtime, but how does it handle concurrent asynchronous calls? Class 12 Teach the class ways to manage unhandled exceptions and rejections in Node. Teach the class about stress, spike and unit testing. Why, what, And how are they implemented? Class 13 What is Data Normalization? Why and How do we use it? Should we normalize our data before putting it into an SQL Database? What's the difference between dependencies, devDependencies and peerDependencies in an npm package.json file? Class 14 50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code. Class 15 50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code. Class 16 All students: Today is the final day of class! We hope you are super proud of what you've accomplished so far. Let's share what you've learned with the class.","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness.","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#class-1","text":"There will be no student presentation for the first class. NOTE: In the first three days of this course you will divide the class evenly into the three days and students will present their graduation project idea in a 2-minute pitch. Example: 20 students / 3 days = 6, 7, 7 NOTE: During the last three days of this course, the students will again be divided up evenly to ensure everyone presents over the topic listed below: Walk the class through the life-cycle of your app. Describe challenges and special features as you go. Use your code to show-and-tell. Organize and Coordinate who and when students are presenting. And organize and Coordinate who and when students are presenting.","title":"Class 1"},{"location":"additionalResources/studentPresentations/#class-2","text":"None today.","title":"Class 2"},{"location":"additionalResources/studentPresentations/#class-3","text":"50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? What do you envision for its future? Followed by a class Q&A.","title":"Class 3"},{"location":"additionalResources/studentPresentations/#class-4","text":"50% of the class: Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? What do you envision for its future? Followed by a class Q&A.","title":"Class 4"},{"location":"additionalResources/studentPresentations/#class-5","text":"Demystify \u201cContinuous Integration\u201d. Explain to the class what it is, why it\u2019s use and how to develop successful CI Processes. In order to build a site optimized for organic search engine rankings, it is important to implement certain standards throughout the code. These standards are...","title":"Class 5"},{"location":"additionalResources/studentPresentations/#class-6","text":"What is multi-threading? Why and how do you use it? A common issue when integrating third party services within your own API requests is having to wait for the response, and as such, forcing the user to have to wait longer. How do you go about avoiding this?","title":"Class 6"},{"location":"additionalResources/studentPresentations/#class-7","text":"How do you keep yourself updated about the new trends in the industry? Teach the class why, where and how to find the latest tech updates. How would you prevent a bot from scraping your publicly accessible API? Demo.","title":"Class 7"},{"location":"additionalResources/studentPresentations/#class-8","text":"What is CORS? Teach the class what it is, why it's used and how to use it. What are the advantages of REST web services?","title":"Class 8"},{"location":"additionalResources/studentPresentations/#class-9","text":"What are NoSQL databases? What are the different types of NoSQL databases? Explain SQL vs NoSQL. Error: \"Process out of Memory Exception\". What does it mean? Why is it happening and how do you fix it? Is Node good at CPU intensive tasks? Why or why not?","title":"Class 9"},{"location":"additionalResources/studentPresentations/#class-10","text":"Module Requiring vs Dependency Injection: which is better and why? Explain what Reactor Pattern in Node.js is.","title":"Class 10"},{"location":"additionalResources/studentPresentations/#class-11","text":"What is a stream and what are the types of streams available in Node.js? Node is a single threaded runtime, but how does it handle concurrent asynchronous calls?","title":"Class 11"},{"location":"additionalResources/studentPresentations/#class-12","text":"Teach the class ways to manage unhandled exceptions and rejections in Node. Teach the class about stress, spike and unit testing. Why, what, And how are they implemented?","title":"Class 12"},{"location":"additionalResources/studentPresentations/#class-13","text":"What is Data Normalization? Why and How do we use it? Should we normalize our data before putting it into an SQL Database? What's the difference between dependencies, devDependencies and peerDependencies in an npm package.json file?","title":"Class 13"},{"location":"additionalResources/studentPresentations/#class-14","text":"50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code.","title":"Class 14"},{"location":"additionalResources/studentPresentations/#class-15","text":"50% of the class: Walk the class through the life-cycle of your app. Describe challenges and special features as you show-and-tell your code.","title":"Class 15"},{"location":"additionalResources/studentPresentations/#class-16","text":"All students: Today is the final day of class! We hope you are super proud of what you've accomplished so far. Let's share what you've learned with the class.","title":"Class 16"},{"location":"additionalResources/bonusMaterial/writingInMarkdown/","text":"How to Write in Markdown As may be clear to you, Markdown(.md) is a wonderful language to write in because it's mostly plain text with lots of functionality. In fact, all of this ebook is written in markdown including the code snippets, charts and images. To help you write in it a little faster here are some example to get you up to speed. You'll first see the \"result\" and then a code snippet of Markdown that makes it happen. H1 Title 1 2 3 ***** # H1 Title H2 Title 1 2 3 ***** ## H2 Title H3 Title 1 2 3 ***** ### H3 Title Italicized words 1 2 3 ***** *Italicized words* Bold words 1 2 3 ***** **Bold words** A YouTube Video Link - How Not to Take Things Personally 1 2 3 4 5 6 ***** [ A YouTube Video Link - How Not to Take Things Personally ]( https://www.youtube.com/watch?v=LnJwH_PZXnM ) <!-- if you want an image put a ! in-front of it --> ![ my-image ]( ./../images/my-image.png ) A Chart of Methods GET Fetch resource PUT Update resource DELETE Delete resource 1 2 3 4 5 6 7 ***** | A Chart | of Methods | | - | - | | `GET` | Fetch resource | | `PUT` | Update resource | | `DELETE` | Delete resource | 1 2 3 4 // This is a JavaScript Code Fence const myFunction = () => { return something } 1 2 3 4 5 6 7 8 <!-- uncomment the line immediately below --> <!-- ```javascript --> // This is a JavaScript Code Fence const myFunction = () => { return something } <!-- ``` --> <!-- uncomment the line immediately above --> 1 2 -- this is a sql code fence SELECT * from users 1 2 3 4 5 6 <!-- uncomment the line immediately below --> <!-- ```sql --> -- this is a sql code fence SELECT * from users <!-- ``` --> <!-- uncomment the line immediately above --> Numbered Items Numbered Items Numbered Items Numbered Items 1 2 3 4 1. Numbered Items 1. Numbered Items 1. Numbered Items 1. Numbered Items Bulleted Items Bulleted Items Bulleted Items Bulleted Items 1 2 3 4 * Bulleted Items * Bulleted Items * Bulleted Items * Bulleted Items Tips In VS Code you can use Cmd + Shift + V to view a preview of the Markdown file(.md) Sorry, <--- these checkboxes ( - [ ] ) won't be supported in GitHub 1 2 3 4 5 6 7 - [ ] In VS Code you can use ++cmd+shift+v++ to view a preview of the Markdown file(.md) - [ ] Sorry, <--- these checkboxes ( `- [ ]` ) won't be supported in GitHub <!-- Make comments --> <!-- * Highlight your comments in VS Code --> <!-- TODO add more resources here... --> <!-- ? Should we add more resources? --> <!-- ! YES, add more resources -->","title":"How to Write in Markdown"},{"location":"additionalResources/bonusMaterial/writingInMarkdown/#how-to-write-in-markdown","text":"As may be clear to you, Markdown(.md) is a wonderful language to write in because it's mostly plain text with lots of functionality. In fact, all of this ebook is written in markdown including the code snippets, charts and images. To help you write in it a little faster here are some example to get you up to speed. You'll first see the \"result\" and then a code snippet of Markdown that makes it happen.","title":"How to Write in Markdown"},{"location":"additionalResources/bonusMaterial/writingInMarkdown/#h1-title","text":"1 2 3 ***** # H1 Title","title":"H1 Title"},{"location":"additionalResources/bonusMaterial/writingInMarkdown/#h2-title","text":"1 2 3 ***** ## H2 Title","title":"H2 Title"},{"location":"additionalResources/bonusMaterial/writingInMarkdown/#h3-title","text":"1 2 3 ***** ### H3 Title Italicized words 1 2 3 ***** *Italicized words* Bold words 1 2 3 ***** **Bold words** A YouTube Video Link - How Not to Take Things Personally 1 2 3 4 5 6 ***** [ A YouTube Video Link - How Not to Take Things Personally ]( https://www.youtube.com/watch?v=LnJwH_PZXnM ) <!-- if you want an image put a ! in-front of it --> ![ my-image ]( ./../images/my-image.png ) A Chart of Methods GET Fetch resource PUT Update resource DELETE Delete resource 1 2 3 4 5 6 7 ***** | A Chart | of Methods | | - | - | | `GET` | Fetch resource | | `PUT` | Update resource | | `DELETE` | Delete resource | 1 2 3 4 // This is a JavaScript Code Fence const myFunction = () => { return something } 1 2 3 4 5 6 7 8 <!-- uncomment the line immediately below --> <!-- ```javascript --> // This is a JavaScript Code Fence const myFunction = () => { return something } <!-- ``` --> <!-- uncomment the line immediately above --> 1 2 -- this is a sql code fence SELECT * from users 1 2 3 4 5 6 <!-- uncomment the line immediately below --> <!-- ```sql --> -- this is a sql code fence SELECT * from users <!-- ``` --> <!-- uncomment the line immediately above --> Numbered Items Numbered Items Numbered Items Numbered Items 1 2 3 4 1. Numbered Items 1. Numbered Items 1. Numbered Items 1. Numbered Items Bulleted Items Bulleted Items Bulleted Items Bulleted Items 1 2 3 4 * Bulleted Items * Bulleted Items * Bulleted Items * Bulleted Items","title":"H3 Title"},{"location":"additionalResources/bonusMaterial/writingInMarkdown/#tips","text":"In VS Code you can use Cmd + Shift + V to view a preview of the Markdown file(.md) Sorry, <--- these checkboxes ( - [ ] ) won't be supported in GitHub 1 2 3 4 5 6 7 - [ ] In VS Code you can use ++cmd+shift+v++ to view a preview of the Markdown file(.md) - [ ] Sorry, <--- these checkboxes ( `- [ ]` ) won't be supported in GitHub <!-- Make comments --> <!-- * Highlight your comments in VS Code --> <!-- TODO add more resources here... --> <!-- ? Should we add more resources? --> <!-- ! YES, add more resources -->","title":"Tips"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up and have other questions to ask. We do not lecture in class, we discuss. Node.js What is Node.js? Where can you use it? Why use Node.js? Why is Node.js single-threaded? What are the features of Node.js? What is a resource , with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What is JSON? What formats are supported by REST APIs?","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up and have other questions to ask. We do not lecture in class, we discuss.","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#nodejs","text":"What is Node.js? Where can you use it? Why use Node.js? Why is Node.js single-threaded? What are the features of Node.js? What is a resource , with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What is JSON? What formats are supported by REST APIs?","title":"Node.js"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/","text":"Class Ten - Questions for Discussion None here","title":"Day 10 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#class-ten-questions-for-discussion","text":"None here","title":"Class Ten - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/","text":"Class Eleven - Questions for Discussion Data Modeling with ER Diagrams What all does a data model contain? What is a table? What is a column? What is a row? What is a primary key constraint? What is a foreign key constraint? Why does data need to be divided up by tables? Why do those tables need to be linked together?","title":"Day 11 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#class-eleven-questions-for-discussion","text":"","title":"Class Eleven - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#data-modeling-with-er-diagrams","text":"What all does a data model contain? What is a table? What is a column? What is a row? What is a primary key constraint? What is a foreign key constraint? Why does data need to be divided up by tables? Why do those tables need to be linked together?","title":"Data Modeling with ER Diagrams"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/","text":"Class Twelve - Questions for Discussion Authentication What is meant by the headers ? What is meant by the payload? What is in the signature? What is happening in the verification process of the JWT? Find and discuss three pre-built middlewares available through NPM. Let's have a few people walk us through the verification process. Any volunteers?","title":"Day 12 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#class-twelve-questions-for-discussion","text":"","title":"Class Twelve - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#authentication","text":"What is meant by the headers ? What is meant by the payload? What is in the signature? What is happening in the verification process of the JWT? Find and discuss three pre-built middlewares available through NPM. Let's have a few people walk us through the verification process. Any volunteers?","title":"Authentication"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/","text":"Class Thirteen - Questions for Discussion What is DevOps? What does hosting mean? What does deploy mean? What's CI/CD? Why do we need it? What's CORS? Can we draw this process of deployment and hosting on the board together?","title":"Day 13 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#class-thirteen-questions-for-discussion","text":"What is DevOps? What does hosting mean? What does deploy mean? What's CI/CD? Why do we need it? What's CORS? Can we draw this process of deployment and hosting on the board together?","title":"Class Thirteen - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/","text":"Class Fourteen - Questions for Discussion Hosting and Storage What is React? Why would we use React? Is React front-end or back-end? What's a bucket? Why do we need it in a bucket? What's the npm start command doing? What's npx ?","title":"Day 14 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#class-fourteen-questions-for-discussion","text":"","title":"Class Fourteen - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#hosting-and-storage","text":"What is React? Why would we use React? Is React front-end or back-end? What's a bucket? Why do we need it in a bucket? What's the npm start command doing? What's npx ?","title":"Hosting and Storage"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/","text":"Class Fifteen - Questions For Discussion CI/CD What is CI/CD? Why is it needed? What's a pipeline? What sort of things would we do in the pipeline? Can someone draw out the process of this CI/CD thing for us? What are build logs? How do you read them? What do they mean?","title":"Day 15 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#class-fifteen-questions-for-discussion","text":"","title":"Class Fifteen - Questions For Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#cicd","text":"What is CI/CD? Why is it needed? What's a pipeline? What sort of things would we do in the pipeline? Can someone draw out the process of this CI/CD thing for us? What are build logs? How do you read them? What do they mean?","title":"CI/CD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/","text":"Class Sixteen - Questions For Discussion Everything Let's walkthrough our ebook and have students tour us along. Have someone else draw on the board a diagram to help visualize our journey and what we've learned.","title":"Day 16 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#class-sixteen-questions-for-discussion","text":"","title":"Class Sixteen - Questions For Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#everything","text":"Let's walkthrough our ebook and have students tour us along. Have someone else draw on the board a diagram to help visualize our journey and what we've learned.","title":"Everything"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two - Questions for Discussion Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up on your own and have other questions to ask. We do not lecture in class, we discuss. Axios and HTTP(S) What's the difference between a \"design pattern\" and a \"framework\"? How do you write a list request with Axios? What is the client-server model? What is a resource, with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What are some common HTTP status codes and what do they mean? What are some common HTTP headers and what are they used for? What is JSON? What formats are supported by REST APIs?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"Students are expected to research these questions on their own and ask clarifying questions during healthy back and forth with the instructor after the whiteboarding session in each class. Be sure to look these up on your own and have other questions to ask. We do not lecture in class, we discuss.","title":"Class Two - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#axios-and-https","text":"What's the difference between a \"design pattern\" and a \"framework\"? How do you write a list request with Axios? What is the client-server model? What is a resource, with respect to a REST API? What are some of the fundamental constraints that make an API RESTful? What does the acronym CRUD stand for? How does it relate to a REST API? Which HTTP verbs are used to retrieve, create, update, and delete resources? What are some common HTTP status codes and what do they mean? What are some common HTTP headers and what are they used for? What is JSON? What formats are supported by REST APIs?","title":"Axios and HTTP(S)"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/","text":"Class Three - Questions for Discussion Express Server (Servers built with Express.js) What is the app.use() method doing? What's the difference between writing your route's callback function as (req, res) => { } and function(req, res){ } ? Why do we need to save Express as a variable? const app = express() Describe middleware. What's it used for? How many reasons can you find? What does the req object look like over HTTPS? Draw it out. What does the res object look like over HTTPS? Draw it out.","title":"Day 3 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#class-three-questions-for-discussion","text":"","title":"Class Three - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#express-server-servers-built-with-expressjs","text":"What is the app.use() method doing? What's the difference between writing your route's callback function as (req, res) => { } and function(req, res){ } ? Why do we need to save Express as a variable? const app = express() Describe middleware. What's it used for? How many reasons can you find? What does the req object look like over HTTPS? Draw it out. What does the res object look like over HTTPS? Draw it out.","title":"Express Server (Servers built with Express.js)"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/","text":"Class Four - Questions for Discussion Routers and Controllers What is module.exports doing? What does this line of code mean and do?: process.env.PORT What is this line: const port = process.env.PORT || 4000 ? What is body-parser ? And why did we need it? Why don't we need it now? Why do we need to separate the responsibilities of our app into different parts? What are the parts we separate them into? Can you draw a picture that visually describes the different files and the responsibilities each of them have? How do you create a PUT request?","title":"Day 4 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#class-four-questions-for-discussion","text":"","title":"Class Four - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#routers-and-controllers","text":"What is module.exports doing? What does this line of code mean and do?: process.env.PORT What is this line: const port = process.env.PORT || 4000 ? What is body-parser ? And why did we need it? Why don't we need it now? Why do we need to separate the responsibilities of our app into different parts? What are the parts we separate them into? Can you draw a picture that visually describes the different files and the responsibilities each of them have? How do you create a PUT request?","title":"Routers and Controllers"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/","text":"Class 5 - Questions for Discussion What is RDBMS? Explain its features. What is data mining? Why is MySQL hard to scale? What are the purposes of using ENUM and SET data types? What is an instance of a database?","title":"Day 5 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#class-5-questions-for-discussion","text":"What is RDBMS? Explain its features. What is data mining? Why is MySQL hard to scale? What are the purposes of using ENUM and SET data types? What is an instance of a database?","title":"Class 5 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/","text":"Class Six - Questions for Discussion Advanced SELECT What's the difference between a Primary Key , Unique Key , and a Foreign Key ? What does data normalization mean? What are tables and fields? What is a JOIN ? List its different types. What is an index? Explain its different types. What does GROUP BY do? What about HAVING ? Why did we rename count as \"tally\"? What type of programming language is SQL or MySQL? What type of programming language is JavaScript?","title":"Day 6 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#class-six-questions-for-discussion","text":"","title":"Class Six - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#advanced-select","text":"What's the difference between a Primary Key , Unique Key , and a Foreign Key ? What does data normalization mean? What are tables and fields? What is a JOIN ? List its different types. What is an index? Explain its different types. What does GROUP BY do? What about HAVING ? Why did we rename count as \"tally\"? What type of programming language is SQL or MySQL? What type of programming language is JavaScript?","title":"Advanced SELECT"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/","text":"Class Seven - Questions for Discussion SQL CRUD How do you write an INSERT statement? How do you write an UPDATE statement? How do you write a DELETE statement? What is a relationship? List them all with diagrams. What is a subquery? List the types. What is Auto Increment? How do you use it?","title":"Day 7 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#class-seven-questions-for-discussion","text":"","title":"Class Seven - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#sql-crud","text":"How do you write an INSERT statement? How do you write an UPDATE statement? How do you write a DELETE statement? What is a relationship? List them all with diagrams. What is a subquery? List the types. What is Auto Increment? How do you use it?","title":"SQL CRUD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/","text":"Class Eight - Questions for Discussion Node MySQL & Connections Why do we need our queries to be dynamic? What does dynamic mean in this sense? Explain why we need to use the npm package mysql. Draw a diagram of how Express, mysql, and our sql database interact. What's the flow? What's a SQL Injection attack? What other attacks could your server be susceptible to?","title":"Day 8 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/#class-eight-questions-for-discussion","text":"","title":"Class Eight - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/#node-mysql-connections","text":"Why do we need our queries to be dynamic? What does dynamic mean in this sense? Explain why we need to use the npm package mysql. Draw a diagram of how Express, mysql, and our sql database interact. What's the flow? What's a SQL Injection attack? What other attacks could your server be susceptible to?","title":"Node MySQL &amp; Connections"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/","text":"Class Nine - Questions for Discussion Kanban What is Agile? What are its roots? Who started the idea and when? What is scrum? Why is scrum used in development? What are lanes (Kanban)?","title":"Day 9 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#class-nine-questions-for-discussion","text":"","title":"Class Nine - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#kanban","text":"What is Agile? What are its roots? Who started the idea and when? What is scrum? Why is scrum used in development? What are lanes (Kanban)?","title":"Kanban"},{"location":"module-1/REST-HTTP-APIs/","text":"Intro to RESTful APIs Take calculated risks. That is quite different from being rash.\u2003\u2014George S. Patton Overview In this course, we're going to learn how to build an API using Node.js and Express . If you don't know exactly what an \"API\" is, why you'd want to build one, or how Express fits in, don't worry! That's why we're here. What's an API? A traditional software application has a user interface( UI ): a mechanism that allows a person to interact with the software. It may be a graphical user interface, a web-based user interface, a text-based user interface, or a voice interface. Whatever form it takes, the user interface is a way for a person to tell the software what they want to do. But what if we want to let other software interact with our application, rather than a person? A user interface built for human interaction isn't well-suited for programmatic interaction. That's where APIs come in. API is an acronym that stands for A pplication P rogramming I nterface. In its most general sense, an API is a well-defined way for one computer program to interact with another program. More technically, an API is a set of functions and data structures that allow other application developers to leverage the functionality and/or data of your software within their own applications. There are many different ways to implement an API, so the term can be somewhat ambiguous. There are high-level APIs and low-level APIs, internal APIs and public APIs, and so on, but in all cases they help different programs interact. Let's look at two examples. Example One - Native API If you are building a desktop application that runs on macOS or Windows, you will likely want your app to have menus and buttons and windows and other familiar user interface elements. You could build these things from scratch, drawing each pixel and handling every keystroke and mouse click in your code in order to make it look and act like other software, but that's a LOT of work ! Fortunately, the creators of macOS and Windows provided APIs that make your life as an application developer much easier. These APIs provide many functions (methods) that can help you create menus and buttons, respond to mouse clicks, etc. Other functions might help you interact with the file system or determine who is currently logged in. These APIs are building blocks that make it easier for application developers to create new software by giving your application well-defined ways to interact with the features of the operating system. Example Two - Web API The HTML APIs you learned in Web 101 like Canvas, Geolocation and Drag and Drop. These are also APIs because they provide the developer(you) with functionality that can be accessed through property names like .getContext() or isdraggable= . These are built into the HTML language but not implicitly used or required, yet are available by simply knowing their property names. Pretty cool, right? Example Three - REST API Let's say you're building a tourism mobile app with detailed information about the historical sites in your city. You'd also like to provide the traveler with a list of highly-rated restaurants that are near each site. You could gather this information yourself and include it in your app, but restaurants come and go, ratings change, and it's somewhat outside of the main scope of your app. Besides, other apps like Yelp already have this pretty well covered. Fortunately, Yelp provides an API that you can use to leverage their business data and ratings. Using their API, your app can search for nearby restaurants that are rated 4 stars or higher and conveniently display them alongside the site the traveler is currently viewing. Which Are We Building? There's a subtle difference between the examples we just covered. In the first, your desktop app is running on a computer right alongside the operating system. Your app and the operating system can interact directly. In the second, you are accessing objects built-into the language itself. In the third example, your app is running on a smart phone. Does the person using your app need to have the Yelp app installed? Is your tourism app talking directly to the Yelp mobile app? No, it's not. Your app is using a remote API . It communicates with a remote server located somewhere in \"the cloud\". More precisely, your app communicates over the internet with server software made by Yelp, which is running on a computer in some data center, and that software was specifically designed to allow other programs to interact with it in a well-defined way. Each of these examples can be termed APIs, but it is APIs in the third example, a remote RESTful APIs , that we will be building in this course, using a specific architectural style known as a REST API. We'll get into the details of REST APIs later. For now, just be aware that when many people say \"API\" they often mean this specific kind of remote API known as a RESTful API . But APIs come in many forms and you'll undoubtedly become familiar with many different types in your career. Following is a short video that explains the concept of APIs and how they enable the connectivity that we have become accustomed to in modern applications. See It - What's An API? Practice - Explore the Star Wars API Go to the Star Wars API site and experiment with it. The site gives you a simple UI and hints so you can try different API requests. Be sure to use the hints and see what the return values are. Visit the documentation page for a full explanation of what it offers and will allow you to do. Here are a few things to try: Try retrieving a few different people by changing the id value. What happens if you put in an invalid id value, such as 9999? Can you retrieve a list of all people? Discover other types of information you can access, besides people. Do you notice any common pattern for how you use the API? You can fork this CodePen or create your own repo to play with. What is REST REST stands for RE presentational S tate T ransfer. It is an architectural style\u2014a set of guiding principles\u2014for building distributed systems. This site provides an overview of these principles and the history of REST. Systems that adhere to these principles are commonly said to be RESTful . We're not going to focus too much on the theory behind REST. Instead, we'll focus on the practical application of REST to APIs, using common industry patterns. Still, there are a few terms and concepts that we must review. What is a Resource? A resource is key concept in REST. It's a general term that represents any information that can be named. Resources are often the basic data entities that our APIs work with, but they can also be more abstract concepts or processes. In the Star Wars API, the resources are things like \"people\", \"starships\", and \"planets\". Resources are commonly named using plural nouns. For example, to access information about the people in Star Wars, we use \"people\" rather than the singular \"person\". By convention, resource names are usually expressed as nouns rather than verbs or actions. E.g., planets rather than getPlanet , or StudentEnrollment rather than EnrollStudent . Occasionally, resources can also be more abstract concepts or processes. For example, a \"StudentEnrollment\" resource might be a multi-step process that updates Student and Class resources, while also enforcing rules about which classes a student can enroll in, sending notifications, and so on. The URI Part Resources are accessed using U niform R esource I dentifiers, or URI s. URIs are very similar to the familiar URL(UR Locator)) that we use on the web. There are subtle theoretical differences between URIs and URLs that we will not concern ourselves with, but you can read more about if you're interested. Let's revisit the URI that we used to access information about Luke Skywalker: https://swapi.dev/api/people/1 Part Explanation https://swapi.dev/api The base URL for accessing the API. This includes the protocol that will be used (https), the location of the API (swapi.dev), and a base path (/api). /people The resource we're accessing, \"people\" /1 An identifier that tells the API which person we're interested in Here's another example. Note that we don't specify an ID for any particular person. Instead, we're accessing all people. https://swapi.dev/api/people Part Explanation https://swapi.dev/api The base URL for accessing the API /people The resource we're accessing, \"people\" Client-Server You're going to hear the terms client and server a lot, so let's make sure we understand what they mean. The client-server model is a way of distributing work among multiple parts of a software system, with the parts often (but not necessarily) running on separate computers and communicating over a network. For example, when we click the https://swapi.dev/api/people/1 link, our web browser is the client . The computer at swapi.dev that sends back the data about Luke Skywalker is the server . In general, software making a request is a client . Software that listens for requests and sends back a response is a server . Request and response are important concepts that we'll be working with as we build APIs. HTTP/HTTPS HTTP is the protocol that clients and servers use to communicate on the web. HTTPS is a more secure version of HTTP in which the information being exchanged is encrypted. The first part of a URI (e.g., HTTP:) indicates which protocol is being used so the client and server know how to talk to each other\u2014 it sets the rules for the conversation . Technically, a REST API can use any protocol to communicate, but in practice they usually use HTTP or HTTPS. HTTP has two types of messages: requests and responses . We won't necessarily be creating request and response messages from scratch\u2014we have frameworks and other tools to help with that\u2014but we will be working with some of their parts and it is good to have a mental picture of what these messages look like. A request message/object is made up of the following parts: Part Explanation Request Method Also commonly called the verb, the request method indicates what type of action we're requesting. Some commonly used methods are GET, PUT, DELETE, and POST. Path The path to the resource that we're working with. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the request, e.g. Content-Type: application/json (which indicates that the content of the body will be in JSON format.) Body A payload that can be sent with the request. A response message/object has these parts: Part Explanation Status Code / Message A numeric code and short message that indicate whether the request was successful. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the response, e.g., Content-Type: application/json indicates that the content of the body is in JSON format. Body A payload that can be sent with the response. You can find more detailed information about HTTP here . Interacting with a REST API Up to this point, we've interacted with the Star Wars API by using a browser. This is convenient but limiting. The browser's address bar and links can only make one type of request, known as a GET request, which is used (unsurprisingly) to get a resource. But what if we want to create, update, or delete a resource? We either have to write code or use another tool. Fortunately, there is a powerful and free tool called Postman that we can use to more fully interact with REST APIs. Beyond GET: HTTP Verbs The Star Wars API was a useful starting place, but it only allows us to retrieve information. In the following video, we'll look at another API , provided by Ben Howdle, and dig in to the full range of request types and how they're used in REST APIs. First we'll explore the API using the interface provided by the website and then we'll use Postman to interact with the API. Additional Resources Article, RestfulAPI - What is REST? Article, Daniel Miessler - What\u2019s the Difference Between a URI and a URL? Req/Res API Know Your Docs MDN Docs - HTTP(S) Request Object","title":"Intro to APIs"},{"location":"module-1/REST-HTTP-APIs/#intro-to-restful-apis","text":"Take calculated risks. That is quite different from being rash.\u2003\u2014George S. Patton","title":"Intro to RESTful APIs"},{"location":"module-1/REST-HTTP-APIs/#overview","text":"In this course, we're going to learn how to build an API using Node.js and Express . If you don't know exactly what an \"API\" is, why you'd want to build one, or how Express fits in, don't worry! That's why we're here.","title":"Overview"},{"location":"module-1/REST-HTTP-APIs/#whats-an-api","text":"A traditional software application has a user interface( UI ): a mechanism that allows a person to interact with the software. It may be a graphical user interface, a web-based user interface, a text-based user interface, or a voice interface. Whatever form it takes, the user interface is a way for a person to tell the software what they want to do. But what if we want to let other software interact with our application, rather than a person? A user interface built for human interaction isn't well-suited for programmatic interaction. That's where APIs come in. API is an acronym that stands for A pplication P rogramming I nterface. In its most general sense, an API is a well-defined way for one computer program to interact with another program. More technically, an API is a set of functions and data structures that allow other application developers to leverage the functionality and/or data of your software within their own applications. There are many different ways to implement an API, so the term can be somewhat ambiguous. There are high-level APIs and low-level APIs, internal APIs and public APIs, and so on, but in all cases they help different programs interact. Let's look at two examples.","title":"What's an API?"},{"location":"module-1/REST-HTTP-APIs/#example-one-native-api","text":"If you are building a desktop application that runs on macOS or Windows, you will likely want your app to have menus and buttons and windows and other familiar user interface elements. You could build these things from scratch, drawing each pixel and handling every keystroke and mouse click in your code in order to make it look and act like other software, but that's a LOT of work ! Fortunately, the creators of macOS and Windows provided APIs that make your life as an application developer much easier. These APIs provide many functions (methods) that can help you create menus and buttons, respond to mouse clicks, etc. Other functions might help you interact with the file system or determine who is currently logged in. These APIs are building blocks that make it easier for application developers to create new software by giving your application well-defined ways to interact with the features of the operating system.","title":"Example One - Native API"},{"location":"module-1/REST-HTTP-APIs/#example-two-web-api","text":"The HTML APIs you learned in Web 101 like Canvas, Geolocation and Drag and Drop. These are also APIs because they provide the developer(you) with functionality that can be accessed through property names like .getContext() or isdraggable= . These are built into the HTML language but not implicitly used or required, yet are available by simply knowing their property names. Pretty cool, right?","title":"Example Two - Web API"},{"location":"module-1/REST-HTTP-APIs/#example-three-rest-api","text":"Let's say you're building a tourism mobile app with detailed information about the historical sites in your city. You'd also like to provide the traveler with a list of highly-rated restaurants that are near each site. You could gather this information yourself and include it in your app, but restaurants come and go, ratings change, and it's somewhat outside of the main scope of your app. Besides, other apps like Yelp already have this pretty well covered. Fortunately, Yelp provides an API that you can use to leverage their business data and ratings. Using their API, your app can search for nearby restaurants that are rated 4 stars or higher and conveniently display them alongside the site the traveler is currently viewing.","title":"Example Three - REST API"},{"location":"module-1/REST-HTTP-APIs/#which-are-we-building","text":"There's a subtle difference between the examples we just covered. In the first, your desktop app is running on a computer right alongside the operating system. Your app and the operating system can interact directly. In the second, you are accessing objects built-into the language itself. In the third example, your app is running on a smart phone. Does the person using your app need to have the Yelp app installed? Is your tourism app talking directly to the Yelp mobile app? No, it's not. Your app is using a remote API . It communicates with a remote server located somewhere in \"the cloud\". More precisely, your app communicates over the internet with server software made by Yelp, which is running on a computer in some data center, and that software was specifically designed to allow other programs to interact with it in a well-defined way. Each of these examples can be termed APIs, but it is APIs in the third example, a remote RESTful APIs , that we will be building in this course, using a specific architectural style known as a REST API. We'll get into the details of REST APIs later. For now, just be aware that when many people say \"API\" they often mean this specific kind of remote API known as a RESTful API . But APIs come in many forms and you'll undoubtedly become familiar with many different types in your career. Following is a short video that explains the concept of APIs and how they enable the connectivity that we have become accustomed to in modern applications.","title":"Which Are We Building?"},{"location":"module-1/REST-HTTP-APIs/#see-it-whats-an-api","text":"","title":"See It - What's An API?"},{"location":"module-1/REST-HTTP-APIs/#practice-explore-the-star-wars-api","text":"Go to the Star Wars API site and experiment with it. The site gives you a simple UI and hints so you can try different API requests. Be sure to use the hints and see what the return values are. Visit the documentation page for a full explanation of what it offers and will allow you to do. Here are a few things to try: Try retrieving a few different people by changing the id value. What happens if you put in an invalid id value, such as 9999? Can you retrieve a list of all people? Discover other types of information you can access, besides people. Do you notice any common pattern for how you use the API? You can fork this CodePen or create your own repo to play with.","title":"Practice - Explore the Star Wars API"},{"location":"module-1/REST-HTTP-APIs/#what-is-rest","text":"REST stands for RE presentational S tate T ransfer. It is an architectural style\u2014a set of guiding principles\u2014for building distributed systems. This site provides an overview of these principles and the history of REST. Systems that adhere to these principles are commonly said to be RESTful . We're not going to focus too much on the theory behind REST. Instead, we'll focus on the practical application of REST to APIs, using common industry patterns. Still, there are a few terms and concepts that we must review.","title":"What is REST"},{"location":"module-1/REST-HTTP-APIs/#what-is-a-resource","text":"A resource is key concept in REST. It's a general term that represents any information that can be named. Resources are often the basic data entities that our APIs work with, but they can also be more abstract concepts or processes. In the Star Wars API, the resources are things like \"people\", \"starships\", and \"planets\". Resources are commonly named using plural nouns. For example, to access information about the people in Star Wars, we use \"people\" rather than the singular \"person\". By convention, resource names are usually expressed as nouns rather than verbs or actions. E.g., planets rather than getPlanet , or StudentEnrollment rather than EnrollStudent . Occasionally, resources can also be more abstract concepts or processes. For example, a \"StudentEnrollment\" resource might be a multi-step process that updates Student and Class resources, while also enforcing rules about which classes a student can enroll in, sending notifications, and so on.","title":"What is a Resource?"},{"location":"module-1/REST-HTTP-APIs/#the-uri-part","text":"Resources are accessed using U niform R esource I dentifiers, or URI s. URIs are very similar to the familiar URL(UR Locator)) that we use on the web. There are subtle theoretical differences between URIs and URLs that we will not concern ourselves with, but you can read more about if you're interested. Let's revisit the URI that we used to access information about Luke Skywalker: https://swapi.dev/api/people/1 Part Explanation https://swapi.dev/api The base URL for accessing the API. This includes the protocol that will be used (https), the location of the API (swapi.dev), and a base path (/api). /people The resource we're accessing, \"people\" /1 An identifier that tells the API which person we're interested in Here's another example. Note that we don't specify an ID for any particular person. Instead, we're accessing all people. https://swapi.dev/api/people Part Explanation https://swapi.dev/api The base URL for accessing the API /people The resource we're accessing, \"people\"","title":"The URI Part"},{"location":"module-1/REST-HTTP-APIs/#client-server","text":"You're going to hear the terms client and server a lot, so let's make sure we understand what they mean. The client-server model is a way of distributing work among multiple parts of a software system, with the parts often (but not necessarily) running on separate computers and communicating over a network. For example, when we click the https://swapi.dev/api/people/1 link, our web browser is the client . The computer at swapi.dev that sends back the data about Luke Skywalker is the server . In general, software making a request is a client . Software that listens for requests and sends back a response is a server . Request and response are important concepts that we'll be working with as we build APIs.","title":"Client-Server"},{"location":"module-1/REST-HTTP-APIs/#httphttps","text":"HTTP is the protocol that clients and servers use to communicate on the web. HTTPS is a more secure version of HTTP in which the information being exchanged is encrypted. The first part of a URI (e.g., HTTP:) indicates which protocol is being used so the client and server know how to talk to each other\u2014 it sets the rules for the conversation . Technically, a REST API can use any protocol to communicate, but in practice they usually use HTTP or HTTPS. HTTP has two types of messages: requests and responses . We won't necessarily be creating request and response messages from scratch\u2014we have frameworks and other tools to help with that\u2014but we will be working with some of their parts and it is good to have a mental picture of what these messages look like. A request message/object is made up of the following parts: Part Explanation Request Method Also commonly called the verb, the request method indicates what type of action we're requesting. Some commonly used methods are GET, PUT, DELETE, and POST. Path The path to the resource that we're working with. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the request, e.g. Content-Type: application/json (which indicates that the content of the body will be in JSON format.) Body A payload that can be sent with the request. A response message/object has these parts: Part Explanation Status Code / Message A numeric code and short message that indicate whether the request was successful. Headers A collection of colon-separated key-value pairs that can be used to provide additional context about the response, e.g., Content-Type: application/json indicates that the content of the body is in JSON format. Body A payload that can be sent with the response. You can find more detailed information about HTTP here .","title":"HTTP/HTTPS"},{"location":"module-1/REST-HTTP-APIs/#interacting-with-a-rest-api","text":"Up to this point, we've interacted with the Star Wars API by using a browser. This is convenient but limiting. The browser's address bar and links can only make one type of request, known as a GET request, which is used (unsurprisingly) to get a resource. But what if we want to create, update, or delete a resource? We either have to write code or use another tool. Fortunately, there is a powerful and free tool called Postman that we can use to more fully interact with REST APIs.","title":"Interacting with a REST API"},{"location":"module-1/REST-HTTP-APIs/#beyond-get-http-verbs","text":"The Star Wars API was a useful starting place, but it only allows us to retrieve information. In the following video, we'll look at another API , provided by Ben Howdle, and dig in to the full range of request types and how they're used in REST APIs. First we'll explore the API using the interface provided by the website and then we'll use Postman to interact with the API.","title":"Beyond GET: HTTP Verbs"},{"location":"module-1/REST-HTTP-APIs/#additional-resources","text":"Article, RestfulAPI - What is REST? Article, Daniel Miessler - What\u2019s the Difference Between a URI and a URL? Req/Res API","title":"Additional Resources"},{"location":"module-1/REST-HTTP-APIs/#know-your-docs","text":"MDN Docs - HTTP(S) Request Object","title":"Know Your Docs"},{"location":"module-1/axios-HTTPstatusCodes/","text":"Axios and HTTP(S) Status Codes The only way of finding the limits of the possible is by going beyond them into the impossible.\u2003\u2014Arthur C. Clarke Overview In the last lesson we refreshed our knowledge of Node and NPM. Now we are going to add another npm package to our repertoire: axios . We are also going to get familiar with the common HTTP protocols and status codes. Axios Axios works just like fetch() but is a more robust. It's also a replacement because fetch() is only available in the browser. When we're working in Node, we're on the server so we have a need for an HTTP client, therefore we use a package like Axios. In the past, fetch has served our needs just fine and it may continue to do so for many people, but our goal here is to introduce a popular alternative. Some notable differences: No more response.json() More configurable Custom error handling Axios can be installed via NPM ( npm i axios ) and called just like fetch: axios('https://someurl') . No matter which HTTP client you use, you will always have to deal with the same web standards/protocols for APIs: Before you continue, read about HTTP requests . We need to understand the methods, headers and body. HTTP Requests Each API request (using fetch() or axios() ) will contain a method. These methods help computers (and humans) determine how the request is intended to function. There are four main methods: GET A GET request tells an application that we are requesting some sort of information. This could include reading data from a database or a text file. It could also include returning a random number. It depends on what is applicable for the system. A key differentiator for this type of request is that a GET request contains no body. 1 2 3 4 5 axios . get ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); }) POST A POST request tells an application that it needs to create something. A POST request sends along some sort of payload in the HTTP request body and the application can read that to determine what needs to be inserted into a database, saved to a file, etc. 1 2 3 4 axios . post ( '/user' , { firstName : 'Fred' , lastName : 'Flintstone' }) PUT A PUT request is an update. This method tells the application/server that something needs to be changed or updated. PUT requests will also send along a body to help the application decide what needs to be altered. 1 2 3 4 axios . put ( '/user?ID=12345' , { firstName : 'Fred' , lastName : 'Flintstone' }) DELETE A DELETE request may or may not have a body but its purpose is to remove something from an application, hence the keyword \"delete\".1 1 2 3 4 5 axios . delete ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); }) When you build an app for graduation and to get a job with these 4 methods you will have built a CRUD app: Create, Read, Update, Delete. YT, Telusko - HTTP Requests HTTP Status Codes Each time we send a request we will get a response back and that response will include a status code. The objective of the status code is to tell us the results of the request. For instance, a request could have been successful, failed to find information or couldn't find the desired resource/server. These codes tell us what went right and what went wrong. 200 - There are multiple variations of the 200 status code including 201 and 204, but generally anything in the 200 range indicates a successful response. Things went according to plan. 300 - Status codes in the 300s are used for caching, proxy or SEO purposes. The main one is a 301 redirect which means a resource was \"moved permanently\". We won't run into these codes much in this class. In fact, you won't run into them that often in your career unless you do a lot of networking related tasks. 400 - 400 status codes mean something went wrong with the request. There are lots of variations of these so we will cover a few. The main ones are: 400 - Bad Request_: This is a generic \"something is wrong\" status code. You will need to change your request and try again. 401 - Unauthorized_: You've likely forgotten an API key or some other Authorization header required to complete the request. This is usually temporary. 403 - Forbidden_: Similar to a 401, this indicates that the server understands the request but is going to block it anyway. This is more permanent. For example: incorrect access rights. 404 - Not Found_: You may have seen this one before! This means that the requested resource could not be found. 500 - Status codes in the 500s mean something is really wrong. A 500 (Internal Server Error) could be an uncaught exception in your code. A 502 (Bad Gateway) or a 503 (Service Unavailable) may indicate an infrastructure problem. Perhaps your server is down. Status Code Summary A lot to take in? Don't worry, you'll learn these as you go. Like most things repetition helps. For this course, the two things we should take away from status codes are: We are generally looking for a 200 (OK) Typically the higher the number, the worse of an issue it is Practice It Instructions On your computer, create a new folder called sampleHTTP and navigate to it: cd sampleHTTP . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by hitting Enter over and over all the way through the last step: \"Is this OK? (yes)\". cd sampleHTTP : into the sampleHTTP folder npm i axios . Axios is the HTTP client we'll be using for this little project. Create a file called index.js in your project folder: touch index.js . Open this new directory in your text editor: code . Import axios on the first line: const axios = require('axios') . On the third line make a call to axios with the URL of ACA: axios('https://austincodingacademy.com/') . Use .then() to get the response and console.log it. 1 2 3 4 axios ( 'https://austincodingacademy.com/' ) . then ( function ( response ) { console . log ( response ) }) - [ ] Run the program ( node index.js ) - [ ] What is the status code? What is the response? NOTE: You're going to get a very long response, and you might not be able to scroll all the way to the top to see the status code. Try the following to get ONLY the response headers: 1 2 3 4 5 6 ```javascript axios.head('https://austincodingacademy.com/') .then(function (response) { console.log(response) }) ``` Additional Resources YT, Duomly - Fetch vs Axios YT, Traversy Media - Axios Crash Course Article, LogRocket - How to Make HTTP Requests with Axios.js Look ahead to the Questions for Student Led Discussion To be a successful developer you need to have the curiosity and passion to problem solve. Start practicing each night with the puzzles given to you in the Interview Challenges and start looking for others at places like HackerRank , GeeksForGeeks , CodeWars , and LeetCode . Know Your Docs Be sure to reference the Axios documentation on NPM . GitHub Repo - Axios.js","title":"Axios + Status Codes"},{"location":"module-1/axios-HTTPstatusCodes/#axios-and-https-status-codes","text":"The only way of finding the limits of the possible is by going beyond them into the impossible.\u2003\u2014Arthur C. Clarke","title":"Axios and HTTP(S) Status Codes"},{"location":"module-1/axios-HTTPstatusCodes/#overview","text":"In the last lesson we refreshed our knowledge of Node and NPM. Now we are going to add another npm package to our repertoire: axios . We are also going to get familiar with the common HTTP protocols and status codes.","title":"Overview"},{"location":"module-1/axios-HTTPstatusCodes/#axios","text":"Axios works just like fetch() but is a more robust. It's also a replacement because fetch() is only available in the browser. When we're working in Node, we're on the server so we have a need for an HTTP client, therefore we use a package like Axios. In the past, fetch has served our needs just fine and it may continue to do so for many people, but our goal here is to introduce a popular alternative. Some notable differences: No more response.json() More configurable Custom error handling Axios can be installed via NPM ( npm i axios ) and called just like fetch: axios('https://someurl') . No matter which HTTP client you use, you will always have to deal with the same web standards/protocols for APIs: Before you continue, read about HTTP requests . We need to understand the methods, headers and body.","title":"Axios"},{"location":"module-1/axios-HTTPstatusCodes/#http-requests","text":"Each API request (using fetch() or axios() ) will contain a method. These methods help computers (and humans) determine how the request is intended to function. There are four main methods:","title":"HTTP Requests"},{"location":"module-1/axios-HTTPstatusCodes/#get","text":"A GET request tells an application that we are requesting some sort of information. This could include reading data from a database or a text file. It could also include returning a random number. It depends on what is applicable for the system. A key differentiator for this type of request is that a GET request contains no body. 1 2 3 4 5 axios . get ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); })","title":"GET"},{"location":"module-1/axios-HTTPstatusCodes/#post","text":"A POST request tells an application that it needs to create something. A POST request sends along some sort of payload in the HTTP request body and the application can read that to determine what needs to be inserted into a database, saved to a file, etc. 1 2 3 4 axios . post ( '/user' , { firstName : 'Fred' , lastName : 'Flintstone' })","title":"POST"},{"location":"module-1/axios-HTTPstatusCodes/#put","text":"A PUT request is an update. This method tells the application/server that something needs to be changed or updated. PUT requests will also send along a body to help the application decide what needs to be altered. 1 2 3 4 axios . put ( '/user?ID=12345' , { firstName : 'Fred' , lastName : 'Flintstone' })","title":"PUT"},{"location":"module-1/axios-HTTPstatusCodes/#delete","text":"A DELETE request may or may not have a body but its purpose is to remove something from an application, hence the keyword \"delete\".1 1 2 3 4 5 axios . delete ( '/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ); }) When you build an app for graduation and to get a job with these 4 methods you will have built a CRUD app: Create, Read, Update, Delete. YT, Telusko - HTTP Requests","title":"DELETE"},{"location":"module-1/axios-HTTPstatusCodes/#http-status-codes","text":"Each time we send a request we will get a response back and that response will include a status code. The objective of the status code is to tell us the results of the request. For instance, a request could have been successful, failed to find information or couldn't find the desired resource/server. These codes tell us what went right and what went wrong. 200 - There are multiple variations of the 200 status code including 201 and 204, but generally anything in the 200 range indicates a successful response. Things went according to plan. 300 - Status codes in the 300s are used for caching, proxy or SEO purposes. The main one is a 301 redirect which means a resource was \"moved permanently\". We won't run into these codes much in this class. In fact, you won't run into them that often in your career unless you do a lot of networking related tasks. 400 - 400 status codes mean something went wrong with the request. There are lots of variations of these so we will cover a few. The main ones are: 400 - Bad Request_: This is a generic \"something is wrong\" status code. You will need to change your request and try again. 401 - Unauthorized_: You've likely forgotten an API key or some other Authorization header required to complete the request. This is usually temporary. 403 - Forbidden_: Similar to a 401, this indicates that the server understands the request but is going to block it anyway. This is more permanent. For example: incorrect access rights. 404 - Not Found_: You may have seen this one before! This means that the requested resource could not be found. 500 - Status codes in the 500s mean something is really wrong. A 500 (Internal Server Error) could be an uncaught exception in your code. A 502 (Bad Gateway) or a 503 (Service Unavailable) may indicate an infrastructure problem. Perhaps your server is down.","title":"HTTP Status Codes"},{"location":"module-1/axios-HTTPstatusCodes/#status-code-summary","text":"A lot to take in? Don't worry, you'll learn these as you go. Like most things repetition helps. For this course, the two things we should take away from status codes are: We are generally looking for a 200 (OK) Typically the higher the number, the worse of an issue it is","title":"Status Code Summary"},{"location":"module-1/axios-HTTPstatusCodes/#practice-it","text":"","title":"Practice It"},{"location":"module-1/axios-HTTPstatusCodes/#instructions","text":"On your computer, create a new folder called sampleHTTP and navigate to it: cd sampleHTTP . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by hitting Enter over and over all the way through the last step: \"Is this OK? (yes)\". cd sampleHTTP : into the sampleHTTP folder npm i axios . Axios is the HTTP client we'll be using for this little project. Create a file called index.js in your project folder: touch index.js . Open this new directory in your text editor: code . Import axios on the first line: const axios = require('axios') . On the third line make a call to axios with the URL of ACA: axios('https://austincodingacademy.com/') . Use .then() to get the response and console.log it. 1 2 3 4 axios ( 'https://austincodingacademy.com/' ) . then ( function ( response ) { console . log ( response ) }) - [ ] Run the program ( node index.js ) - [ ] What is the status code? What is the response? NOTE: You're going to get a very long response, and you might not be able to scroll all the way to the top to see the status code. Try the following to get ONLY the response headers: 1 2 3 4 5 6 ```javascript axios.head('https://austincodingacademy.com/') .then(function (response) { console.log(response) }) ```","title":"Instructions"},{"location":"module-1/axios-HTTPstatusCodes/#additional-resources","text":"YT, Duomly - Fetch vs Axios YT, Traversy Media - Axios Crash Course Article, LogRocket - How to Make HTTP Requests with Axios.js Look ahead to the Questions for Student Led Discussion To be a successful developer you need to have the curiosity and passion to problem solve. Start practicing each night with the puzzles given to you in the Interview Challenges and start looking for others at places like HackerRank , GeeksForGeeks , CodeWars , and LeetCode .","title":"Additional Resources"},{"location":"module-1/axios-HTTPstatusCodes/#know-your-docs","text":"Be sure to reference the Axios documentation on NPM . GitHub Repo - Axios.js","title":"Know Your Docs"},{"location":"module-1/class-1/","text":"Class 1: Get Familiar with Node, NPM, & Postman Well begun is half done.\u2003\u2014Greek Proverb Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Node.js Test software: Postman Program using remote API Introductions Questions for Student Led Discussion Interview Challenge Plan and organize Daily Student Presentations Creation Time Download and follow the README.md in the Node Repo Download and practice Postman against the Pokemon API Push Yourself Further Build a word-count algorithm Look for Charizard! Exit Recap, Attendance, and Reminders Introductions Since we don't know each other, at least not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.) Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 20 mins See Your Challenge Here Student Presentations, 10 mins See Student Presentations List Creation Time, 60-90 mins Node/NPM Recap Today we'll recap Node.js and NPM. The goal of this assignment is to complete a set of functions so that all of the tests pass. Additionally, one set of functions will use a popular NPM package, moment.js, to help us format dates and times. Fork and clone the following repository: Node Practice . Follow the README to complete the functions and make all the tests pass. via GIPHY YT, Programming with Mosh - JS Array.Reduce Learn to Use Postman Today you'll download Postman and become familiar with its interface for making API calls. The instructor will come around to ensure the tool is correctly installed and you have an understanding of its purpose. YT, Raghav Pal - Postman Tutorial Ep. 1: What is Postman? Postman Docs - Install & Introduction Download Postman . Open the application. Make a GET request to the Star Wars API: https://swapi.dev/api . You should have received a list of available endpoints . . . make a request to the planets one. What's the diameter of Naboo ? Back up: In case SWAPI isn't up use ReqRes YT, Raghav Pal - Postman Tutorial Ep.2: Postman's UI YT, Raghav Pal - Postman Tutorial Ep.3: Create a Request Push Yourself Further Repl.it, Matt Viteri - Word Count Using Postman and the Pokemon API: Use the Pokemon API to find the Pokemon Charizard . The base URL is: https://pokeapi.co/api/v2/pokemon/ . Make a GET request and use a path parameter of the Pokemon's name to access information about it. Use the information provided to lookup Charizard 's \"type\". Access the corresponding endpoint to find more details about the \"fire\" type. Locate the list of moves associated with this type. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 1 Node, NPM, & Postman"},{"location":"module-1/class-1/#class-1-get-familiar-with-node-npm-postman","text":"Well begun is half done.\u2003\u2014Greek Proverb","title":"Class 1: Get Familiar with Node, NPM, &amp; Postman"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Node.js Test software: Postman Program using remote API Introductions Questions for Student Led Discussion Interview Challenge Plan and organize Daily Student Presentations Creation Time Download and follow the README.md in the Node Repo Download and practice Postman against the Pokemon API Push Yourself Further Build a word-count algorithm Look for Charizard! Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#introductions","text":"Since we don't know each other, at least not your instructor, everyone should answer these questions aloud: Hey, my name is . . . I currently work as a . . . but I love to spend my time . . . I'm excited about learning to program because . . . My best time to do a study group or tutoring is . . . (example: Mondays at noon.)","title":"Introductions"},{"location":"module-1/class-1/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-1/#interview-challenge-20-mins","text":"See Your Challenge Here","title":"Interview Challenge, 20 mins"},{"location":"module-1/class-1/#student-presentations-10-mins","text":"See Student Presentations List","title":"Student Presentations, 10 mins"},{"location":"module-1/class-1/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-1/#nodenpm-recap","text":"Today we'll recap Node.js and NPM. The goal of this assignment is to complete a set of functions so that all of the tests pass. Additionally, one set of functions will use a popular NPM package, moment.js, to help us format dates and times. Fork and clone the following repository: Node Practice . Follow the README to complete the functions and make all the tests pass. via GIPHY YT, Programming with Mosh - JS Array.Reduce","title":"Node/NPM Recap"},{"location":"module-1/class-1/#learn-to-use-postman","text":"Today you'll download Postman and become familiar with its interface for making API calls. The instructor will come around to ensure the tool is correctly installed and you have an understanding of its purpose. YT, Raghav Pal - Postman Tutorial Ep. 1: What is Postman? Postman Docs - Install & Introduction Download Postman . Open the application. Make a GET request to the Star Wars API: https://swapi.dev/api . You should have received a list of available endpoints . . . make a request to the planets one. What's the diameter of Naboo ? Back up: In case SWAPI isn't up use ReqRes YT, Raghav Pal - Postman Tutorial Ep.2: Postman's UI YT, Raghav Pal - Postman Tutorial Ep.3: Create a Request","title":"Learn to Use Postman"},{"location":"module-1/class-1/#_1","text":"","title":""},{"location":"module-1/class-1/#push-yourself-further","text":"Repl.it, Matt Viteri - Word Count Using Postman and the Pokemon API: Use the Pokemon API to find the Pokemon Charizard . The base URL is: https://pokeapi.co/api/v2/pokemon/ . Make a GET request and use a path parameter of the Pokemon's name to access information about it. Use the information provided to lookup Charizard 's \"type\". Access the corresponding endpoint to find more details about the \"fire\" type. Locate the list of moves associated with this type.","title":"Push Yourself Further"},{"location":"module-1/class-1/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: HTTP Request with Axios The best way out is always through.\u2003\u2014Robert Frost Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Practice passing Jest Tests Using Axios as an HTTP Client Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the Axios Practice Repo Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to be making API calls with Axios. The goal of this exercise is to get comfortable using axios (like fetch) in a Node.js environment and familiarizing ourselves with the types of responses and status codes we receive from APIs. Fork and clone the following repository: Axios Practice . Follow the README to complete the functions and make all the tests pass. Follow Up Video YT, Mahtab Alam - Making HTTP Calls in Node with Axios.js Push Yourself Further Medium Tutorial, Sebastian Eschweiler - Getting Started with Axios.js Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Axios Practice Assignment Create Class 2 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 2 Axios Practice"},{"location":"module-1/class-2/#class-2-http-request-with-axios","text":"The best way out is always through.\u2003\u2014Robert Frost","title":"Class 2: HTTP Request with Axios"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Practice passing Jest Tests Using Axios as an HTTP Client Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and Clone the Axios Practice Repo Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-mins","text":"Today we are going to be making API calls with Axios. The goal of this exercise is to get comfortable using axios (like fetch) in a Node.js environment and familiarizing ourselves with the types of responses and status codes we receive from APIs. Fork and clone the following repository: Axios Practice . Follow the README to complete the functions and make all the tests pass.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-2/#follow-up-video","text":"YT, Mahtab Alam - Making HTTP Calls in Node with Axios.js","title":"Follow Up Video"},{"location":"module-1/class-2/#push-yourself-further","text":"Medium Tutorial, Sebastian Eschweiler - Getting Started with Axios.js","title":"Push Yourself Further"},{"location":"module-1/class-2/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-2/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create Axios Practice Assignment Create Class 2 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-3/","text":"Class 3: 1st Express Server The surest way not to fail is to determine to succeed.\u2003\u2014Richard Brinsley Sheridan Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using Express.js to build JavaScript servers Using Postman as a testing software Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time 311_wk2_day1_express repo Complete the Express server Test with Postman Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to set up a basic Express server and add a few routes. We will practice creating/altering routes and seeing the results in Postman. Fork and clone the following repository: Express Intro Practice cd into the new directory and npm i Follow the README to: get started build routes and test them with Postman Remember to use the homework for this class to build your first routes. YT, Traversy Media - JS Crash Course This video is an hour and fourteen minutes long but it covers all the topics we learned today. It uses Express and Postman. You might try listening at 1.5x speed but you should definitely follow along. Push Yourself Further Follow along with this tutorial on installing and setting up express . This article includes concepts like \"middleware\" which we practiced with body-parser but haven't talked about in depth yet. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 3 First Server"},{"location":"module-1/class-3/#class-3-1st-express-server","text":"The surest way not to fail is to determine to succeed.\u2003\u2014Richard Brinsley Sheridan","title":"Class 3: 1st Express Server"},{"location":"module-1/class-3/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using Express.js to build JavaScript servers Using Postman as a testing software Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time 311_wk2_day1_express repo Complete the Express server Test with Postman Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-3/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-3/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-3/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-3/#creation-time-60-90-mins","text":"Today we are going to set up a basic Express server and add a few routes. We will practice creating/altering routes and seeing the results in Postman. Fork and clone the following repository: Express Intro Practice cd into the new directory and npm i Follow the README to: get started build routes and test them with Postman Remember to use the homework for this class to build your first routes. YT, Traversy Media - JS Crash Course This video is an hour and fourteen minutes long but it covers all the topics we learned today. It uses Express and Postman. You might try listening at 1.5x speed but you should definitely follow along.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-3/#push-yourself-further","text":"Follow along with this tutorial on installing and setting up express . This article includes concepts like \"middleware\" which we practiced with body-parser but haven't talked about in depth yet.","title":"Push Yourself Further"},{"location":"module-1/class-3/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-3/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-4/","text":"Class 4: Serving Static Files A failure is a man who has blundered, but is not able to cash in on the experience.\u2003\u2014Elbert Hubbard Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: () Building routers and controllers with Express.js Saving data to and generating a static file Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the Repo Create routers, controllers and static files, REPEAT!! Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to work with three new ways to organize our express server. We will create routers, controllers and use express.static to render the files in the public folder. The result will be an all-in-one website you can interact with. Fork and clone the following repository: Express Continued Practice Follow the README to build routes, controllers and serve static files YT, BuzzTeam - Express.JS: You First Controller Push Yourself Further Complete the following Mozilla tutorial on routes and controllers Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 4 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 4 Serving Static Files"},{"location":"module-1/class-4/#class-4-serving-static-files","text":"A failure is a man who has blundered, but is not able to cash in on the experience.\u2003\u2014Elbert Hubbard","title":"Class 4: Serving Static Files"},{"location":"module-1/class-4/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: () Building routers and controllers with Express.js Saving data to and generating a static file Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the Repo Create routers, controllers and static files, REPEAT!! Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-4/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-4/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-4/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-4/#creation-time-60-90-mins","text":"Today we are going to work with three new ways to organize our express server. We will create routers, controllers and use express.static to render the files in the public folder. The result will be an all-in-one website you can interact with. Fork and clone the following repository: Express Continued Practice Follow the README to build routes, controllers and serve static files YT, BuzzTeam - Express.JS: You First Controller","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-4/#push-yourself-further","text":"Complete the following Mozilla tutorial on routes and controllers","title":"Push Yourself Further"},{"location":"module-1/class-4/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-4/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-4/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 4 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/codeSandboxes/","text":"Coding in a Sandbox Code sandboxes are really useful tools to share ideas, play with possibilities and explore new concepts without the pressures of building your file structure, setting up your machine or depending on the console. In class we'll use CodeSandBox to share snippets of code and to provide a place for practice and discovery. Get in the habit of browsing and playing with these small code snippets as you work through the ebook. It's where \"the rubber meets the road\", so to speak. Sandboxes are where you actually get to apply the concepts you just learned about PLUS you will frequently use them in your new career to test code in a controlled environment. There are plenty of sandboxes to play in: CodePen , Repl.it , JSBin , JSFiddle and more ! Get your hands dirty and explore for yourself! Practice It Go sign up for a Repl.it account now! Go sign up for a CodeSandBox account now!","title":"Code Sandboxes"},{"location":"module-1/codeSandboxes/#coding-in-a-sandbox","text":"Code sandboxes are really useful tools to share ideas, play with possibilities and explore new concepts without the pressures of building your file structure, setting up your machine or depending on the console. In class we'll use CodeSandBox to share snippets of code and to provide a place for practice and discovery. Get in the habit of browsing and playing with these small code snippets as you work through the ebook. It's where \"the rubber meets the road\", so to speak. Sandboxes are where you actually get to apply the concepts you just learned about PLUS you will frequently use them in your new career to test code in a controlled environment. There are plenty of sandboxes to play in: CodePen , Repl.it , JSBin , JSFiddle and more ! Get your hands dirty and explore for yourself!","title":"Coding in a Sandbox"},{"location":"module-1/codeSandboxes/#practice-it","text":"Go sign up for a Repl.it account now! Go sign up for a CodeSandBox account now!","title":"Practice It"},{"location":"module-1/expressControllers/","text":"Controllers Overview Controller is just industry jargon for the files that hold the logic of our routes. The logic in those files is just plain JavaScript that uses Axios to fetch data. We create a folder called controllers/ and then put files in it called users.js , customers.js , etc. But first, why controllers? Why Controllers After we create Routers it makes sense to create controller files so as to separate and organize our code even more. Just like we talked about having clean code and separation of responsibilities in the routers section, the same applies here. Since we've already covered routers, let's start there. Take a look at the following code (and keep in mind that it is pseudo-code, not all syntax is exact): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // users.js file router . get ( '/users' , ( req , res ) => { const users = [] if ( req . body . query ) { // go find users that match that query const users = await db . find ( query ) } if ( ! users . length ) { // no users, throw error res . status ( 404 ). send ( 'No users found' ) } res . json ( users ) }) What we are looking at here is the size of the function. You might think this looks perfectly reasonable and I would agree with you in this specific example, but if we had a function that was 100 lines long then suddenly this does not seem so reasonable. Just like we don't want 50 routes in one file, we also don't want multiple routes that are 50-100 lines long. It becomes hard to understand what each is supposed to do. This is where the concept of controllers comes in. Again, a \"controller\" is not something specific to Express, it's just plain JavaScript we happen to call controller . Creating a Controller Let's create a folder called controllers/ and another file inside it called users.js . Our file structure will now start to look like this: 1 2 3 4 5 6 7 8 9 src/ - index.js - controllers/ - users.js - routers/ - users.js - customers.js - merchants.js - admins.js Now, in controllers/users.js we are going to take the code we saw above and put it in it's own function (to be exported): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // controllers/users.js file const findWithQuery = () => { const users = [] if ( req . body . query ) { // go find users that match that query const users = await db . find ( query ) } if ( ! users . length ) { // no users, throw error res . status ( 404 ). send ( 'No users found' ) } res . json ( users ) } // exports each of the functions/methods we build as an object module . exports = { findWithQuery // other methods could be listed here with a ',' after each. } In this way we create a findWithQuery method on the users controller object we can call and use later with dot-notation. (You'll see in the next example.) Go back into our router ( routers/users.js ) and import the above controller so that the function/ method can be used in the router. 1 2 3 4 5 // routers/users.js file const UsersController = require ( '../controllers/users.js' ) router . get ( '/users' , UsersController . findWithQuery ) Look how much simpler that route is! Every time \"/users\" is hit, the attached function will be called. This is what we are looking for. As we mentioned previously, we will have controllers for all types of routes, so as our application grows so will our use of our \"controllers\" directory, which will look like this eventually: 1 2 3 4 5 - controllers/ - users.js - customers.js - merchants.js - admin.js Additional Resources YT, Academind - Adding Controllers Look ahead to the Questions for Student Led Discussion Know Your Docs MDN Docs - Express Routes","title":"Controllers"},{"location":"module-1/expressControllers/#controllers","text":"","title":"Controllers"},{"location":"module-1/expressControllers/#overview","text":"Controller is just industry jargon for the files that hold the logic of our routes. The logic in those files is just plain JavaScript that uses Axios to fetch data. We create a folder called controllers/ and then put files in it called users.js , customers.js , etc. But first, why controllers?","title":"Overview"},{"location":"module-1/expressControllers/#why-controllers","text":"After we create Routers it makes sense to create controller files so as to separate and organize our code even more. Just like we talked about having clean code and separation of responsibilities in the routers section, the same applies here. Since we've already covered routers, let's start there. Take a look at the following code (and keep in mind that it is pseudo-code, not all syntax is exact): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // users.js file router . get ( '/users' , ( req , res ) => { const users = [] if ( req . body . query ) { // go find users that match that query const users = await db . find ( query ) } if ( ! users . length ) { // no users, throw error res . status ( 404 ). send ( 'No users found' ) } res . json ( users ) }) What we are looking at here is the size of the function. You might think this looks perfectly reasonable and I would agree with you in this specific example, but if we had a function that was 100 lines long then suddenly this does not seem so reasonable. Just like we don't want 50 routes in one file, we also don't want multiple routes that are 50-100 lines long. It becomes hard to understand what each is supposed to do. This is where the concept of controllers comes in. Again, a \"controller\" is not something specific to Express, it's just plain JavaScript we happen to call controller .","title":"Why Controllers"},{"location":"module-1/expressControllers/#creating-a-controller","text":"Let's create a folder called controllers/ and another file inside it called users.js . Our file structure will now start to look like this: 1 2 3 4 5 6 7 8 9 src/ - index.js - controllers/ - users.js - routers/ - users.js - customers.js - merchants.js - admins.js Now, in controllers/users.js we are going to take the code we saw above and put it in it's own function (to be exported): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // controllers/users.js file const findWithQuery = () => { const users = [] if ( req . body . query ) { // go find users that match that query const users = await db . find ( query ) } if ( ! users . length ) { // no users, throw error res . status ( 404 ). send ( 'No users found' ) } res . json ( users ) } // exports each of the functions/methods we build as an object module . exports = { findWithQuery // other methods could be listed here with a ',' after each. } In this way we create a findWithQuery method on the users controller object we can call and use later with dot-notation. (You'll see in the next example.) Go back into our router ( routers/users.js ) and import the above controller so that the function/ method can be used in the router. 1 2 3 4 5 // routers/users.js file const UsersController = require ( '../controllers/users.js' ) router . get ( '/users' , UsersController . findWithQuery ) Look how much simpler that route is! Every time \"/users\" is hit, the attached function will be called. This is what we are looking for. As we mentioned previously, we will have controllers for all types of routes, so as our application grows so will our use of our \"controllers\" directory, which will look like this eventually: 1 2 3 4 5 - controllers/ - users.js - customers.js - merchants.js - admin.js","title":"Creating a Controller"},{"location":"module-1/expressControllers/#additional-resources","text":"YT, Academind - Adding Controllers Look ahead to the Questions for Student Led Discussion","title":"Additional Resources"},{"location":"module-1/expressControllers/#know-your-docs","text":"MDN Docs - Express Routes","title":"Know Your Docs"},{"location":"module-1/expressRouters/","text":"Express Controllers If you want to succeed in the world you must make your own opportunities as you go on. The man who waits for some seventh wave to toss him on dry land will find that the seventh wave is a long time a-coming. You can commit no greater folly than to sit by the road side until some one comes along and invites you to ride with him to wealth or influence.\u2003\u2014John B. Gough Overview We recently learned about Express and created our first web server. In doing so we learned about routes and how they intercept various types of requests like PUT, POST, GET...etc. We also understand paths and callbacks function with the parameters req and res . In the last project we were putting all of the logic to get data inside the same file: index.js . This technique works and can be used but for large applications, aka, the ones you'll be working on after you graduate, you'll notice there's a different pattern implemented. Instead of keeping the data retrieving logic in the index.js file we'll separate it from the routes ( app.get() ...etc. into a different file and then import that logic into the index.js file and call it when the route is called. In short, we're going to move the parameters ( path and the callback function ) into a separate file called router .js, then move the callback function into a different file called controller .js. After that we'll import the logic of the controller into the router , give it to the appropriate route then import the router into the index.js file and assign it to the correct method! READY? Try to understand the three files below before moving on. Hint, its not doing anything different than what you've already done; but now, it's separated into 3 different files. src/index.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ) // import the router object and save to a variable called `router` const router = require ( './routers/' ) const app = express () app . use ( router . getUsers ) // ...more code here...blah...blah...app.listen() src/router.js 1 2 3 4 5 6 7 8 9 10 11 const express = require ( 'express' ) // save the functionality of Express's `router` as a variable called `router` const router = express . Router () // import the exposed object in `controller.js` and save it to a variable const controller = require ( './controller.js' ) // define the logic associated with '/users'` as the method: getAllUsers router . getUsers ( '/users' , controller . getAllUsers ) // make the router object available globally to the rest of the app module . export = router src/controller.js 1 2 3 4 5 6 7 8 9 const getAllUsers = ( req , res ) => { // perform some logic to get user from the database res . json ( users ) } // make the function available globally as a property on this anonymous object module . exports = { getAllUsers } IMPORTANT: Make sense of this code before moving on. Draw it so you have a visual guide as you learn how to implement this. Why Routers and Controllers Imagine that we have an Express app that has 50 routes in it. Where would you put them all? So far, it has just been our index.js (sometimes called server.js ) file, but is that really sustainable or scalable? Let's see: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // index.js file const express = require ( 'express' ) const app = express () const port = process . env . PORT || 4000 app . get ( '/users' , ( req , res ) => { // perform some logic res . json ( users ) }) app . get ( '/users/:id' , ( req , res ) => { // perform some logic res . json ( user ) }) app . post ( '/users' , ( req , res ) => { // perform some logic res . send ( 'success' ) }) // Add in 47 other routes here...... // .........line 489................ // ................You get the idea. app . listen ( port , () => console . log ( `Example app listening on port ${ port } !` )) Just think about how long this file would be! Fortunately, we have ways to get around that, which is where routers come in. Creating A Router A \"router\" is a functionality that is included in Express to make the above process easier for us to organize. Here's how it works. You: Create a new file (ex. users.js ) Create a new router (this will handle all users routers) Export the router Import the router into index.js .use() it as middleware (like body-parser ) Let's see an example: To keep it organized from the get go we'll make two folder first: routers/ and controllers/ In these two folders we'll keep their respective files: users.js and userController.js ...so forth and so forth. For now, let's create a new folder called routers and a file in it called users.js and copy/paste the following into it: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // src/routers/users.js const express = require ( 'express' ) const router = express . Router () // Now we simply use our \"router\" just like our \"app\" to create routes. router . get ( '/users' , ( req , res ) => { // perform some logic res . json ( users ) }) router . get ( '/users/:id' , ( req , res ) => { // perform some logic res . json ( user ) }) router . post ( '/users' , ( req , res ) => { // perform some logic res . send ( 'success' ) }) // And then we export the router: module . exports = router Now . . . we head back to index.js and we require this router : const users = require('./users') Finally, we use it as middleware like this: app.use(users) where \"users\" is the parameter we just imported above. So now our index.js file looks like this: 1 2 3 4 5 6 7 8 9 10 11 // src/index.js file const express = require ( 'express' ) const users = require ( './routers/users' ) const app = express () const port = process . env . PORT || 4000 app . use ( users ) app . listen ( port , () => console . log ( `Example app listening on port ${ port } !` )) This now works just as before except we don't have 50 routes defined in our index.js file. After we created routes for our other resources we might have a file that looks like this: 1 2 3 4 5 6 7 8 9 // src/index.js file //...more code here... app . use ( users ) app . use ( customers ) app . use ( merchants ) app . use ( admin ) //...more code here And those routes would all exist in their corresponding files: routers/customers.js , routers/merchants.js , routers/admin.js . Hopefully we can see how using routers allows us to write cleaner code in our index.js file as well as separate the responsibilities of our routes to keep the working parts of our app organized and easily accessible. Additional Resources YT, Hungry Turtle Code - How to Use Express Router Know Your Docs Express Docs - Routing","title":"Routers"},{"location":"module-1/expressRouters/#express-controllers","text":"If you want to succeed in the world you must make your own opportunities as you go on. The man who waits for some seventh wave to toss him on dry land will find that the seventh wave is a long time a-coming. You can commit no greater folly than to sit by the road side until some one comes along and invites you to ride with him to wealth or influence.\u2003\u2014John B. Gough","title":"Express Controllers"},{"location":"module-1/expressRouters/#overview","text":"We recently learned about Express and created our first web server. In doing so we learned about routes and how they intercept various types of requests like PUT, POST, GET...etc. We also understand paths and callbacks function with the parameters req and res . In the last project we were putting all of the logic to get data inside the same file: index.js . This technique works and can be used but for large applications, aka, the ones you'll be working on after you graduate, you'll notice there's a different pattern implemented. Instead of keeping the data retrieving logic in the index.js file we'll separate it from the routes ( app.get() ...etc. into a different file and then import that logic into the index.js file and call it when the route is called. In short, we're going to move the parameters ( path and the callback function ) into a separate file called router .js, then move the callback function into a different file called controller .js. After that we'll import the logic of the controller into the router , give it to the appropriate route then import the router into the index.js file and assign it to the correct method! READY? Try to understand the three files below before moving on. Hint, its not doing anything different than what you've already done; but now, it's separated into 3 different files. src/index.js 1 2 3 4 5 6 7 8 const express = require ( 'express' ) // import the router object and save to a variable called `router` const router = require ( './routers/' ) const app = express () app . use ( router . getUsers ) // ...more code here...blah...blah...app.listen() src/router.js 1 2 3 4 5 6 7 8 9 10 11 const express = require ( 'express' ) // save the functionality of Express's `router` as a variable called `router` const router = express . Router () // import the exposed object in `controller.js` and save it to a variable const controller = require ( './controller.js' ) // define the logic associated with '/users'` as the method: getAllUsers router . getUsers ( '/users' , controller . getAllUsers ) // make the router object available globally to the rest of the app module . export = router src/controller.js 1 2 3 4 5 6 7 8 9 const getAllUsers = ( req , res ) => { // perform some logic to get user from the database res . json ( users ) } // make the function available globally as a property on this anonymous object module . exports = { getAllUsers } IMPORTANT: Make sense of this code before moving on. Draw it so you have a visual guide as you learn how to implement this.","title":"Overview"},{"location":"module-1/expressRouters/#why-routers-and-controllers","text":"Imagine that we have an Express app that has 50 routes in it. Where would you put them all? So far, it has just been our index.js (sometimes called server.js ) file, but is that really sustainable or scalable? Let's see: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // index.js file const express = require ( 'express' ) const app = express () const port = process . env . PORT || 4000 app . get ( '/users' , ( req , res ) => { // perform some logic res . json ( users ) }) app . get ( '/users/:id' , ( req , res ) => { // perform some logic res . json ( user ) }) app . post ( '/users' , ( req , res ) => { // perform some logic res . send ( 'success' ) }) // Add in 47 other routes here...... // .........line 489................ // ................You get the idea. app . listen ( port , () => console . log ( `Example app listening on port ${ port } !` )) Just think about how long this file would be! Fortunately, we have ways to get around that, which is where routers come in.","title":"Why Routers and Controllers"},{"location":"module-1/expressRouters/#creating-a-router","text":"A \"router\" is a functionality that is included in Express to make the above process easier for us to organize. Here's how it works. You: Create a new file (ex. users.js ) Create a new router (this will handle all users routers) Export the router Import the router into index.js .use() it as middleware (like body-parser ) Let's see an example: To keep it organized from the get go we'll make two folder first: routers/ and controllers/ In these two folders we'll keep their respective files: users.js and userController.js ...so forth and so forth. For now, let's create a new folder called routers and a file in it called users.js and copy/paste the following into it: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // src/routers/users.js const express = require ( 'express' ) const router = express . Router () // Now we simply use our \"router\" just like our \"app\" to create routes. router . get ( '/users' , ( req , res ) => { // perform some logic res . json ( users ) }) router . get ( '/users/:id' , ( req , res ) => { // perform some logic res . json ( user ) }) router . post ( '/users' , ( req , res ) => { // perform some logic res . send ( 'success' ) }) // And then we export the router: module . exports = router Now . . . we head back to index.js and we require this router : const users = require('./users') Finally, we use it as middleware like this: app.use(users) where \"users\" is the parameter we just imported above. So now our index.js file looks like this: 1 2 3 4 5 6 7 8 9 10 11 // src/index.js file const express = require ( 'express' ) const users = require ( './routers/users' ) const app = express () const port = process . env . PORT || 4000 app . use ( users ) app . listen ( port , () => console . log ( `Example app listening on port ${ port } !` )) This now works just as before except we don't have 50 routes defined in our index.js file. After we created routes for our other resources we might have a file that looks like this: 1 2 3 4 5 6 7 8 9 // src/index.js file //...more code here... app . use ( users ) app . use ( customers ) app . use ( merchants ) app . use ( admin ) //...more code here And those routes would all exist in their corresponding files: routers/customers.js , routers/merchants.js , routers/admin.js . Hopefully we can see how using routers allows us to write cleaner code in our index.js file as well as separate the responsibilities of our routes to keep the working parts of our app organized and easily accessible.","title":"Creating A Router"},{"location":"module-1/expressRouters/#additional-resources","text":"YT, Hungry Turtle Code - How to Use Express Router","title":"Additional Resources"},{"location":"module-1/expressRouters/#know-your-docs","text":"Express Docs - Routing","title":"Know Your Docs"},{"location":"module-1/expressStaticFiles/","text":"Serving Static Files in Express.js Overview Static files are plain files. While there are a few definitions of the term \"static\" in programming, we won't get into that here. We simply need to know that it's a collection of files/folders. The files could be JavaScript, HTML, CSS, etc. What's the point? Well . . . you might want to show a specific HTML page when the user navigates to the main route \"/\" . In a more complex example, we may create a front-end with create-react-app and when we are ready for production we can compile the app into a collection of files and have the server display those to the user. How to Serve Static Files In order to use static files we use the built in .static method of express as middleware. For example: 1 app . use ( express . static ( 'public' )) This tells express to show the contents of the \"public\" folder when a user navigates to the web server. In a more complete example, our index.js file looks like this: index.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ) const app = express () const port = process . env . PORT || 4000 // tell our Express server to serve the files in the public folder app . use ( express . static ( 'public' )) app . listen ( port , () => console . log ( `App is listening on port: ${ port } !` )) Folder Structure 1 2 3 4 5 6 7 8 9 10 11 src/ - index.js - controllers/ - users.js - routers/ - users.js - customers.js - merchants.js - admins.js - public/ - index.html public/index.html Code 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < title > Home Page </ title > </ head > < body > < h1 > Welcome to the home page! </ h1 > < p > This page can be used for many purposes, such as login. </ p > </ body > </ html > Rendered at http://localhost:4000/ Practice It Use the sandbox above to get familiar with routes and controllers Click the start button and run the server Interact with the routes via Postman. You will find the URL on the right side of your screen after you open the Repl.it (top-right). Verify that all the routes work as intended Test /users , /users/2 Move the routes in index.js over to the routes/users.js folder and import/ require() them back into index.js using const users = require('./routers/users.js') & app.use() Move the (req, res) => {} functions out of the routes and into the controllers/ folder. Then import these back into the routes/ folder as you did before and use as expected: app.get('/users', usersController.list) If everything was done correctly the app will function exactly as it was in the beginning. Test with Postman as you do each small step. TEST ! TEST !! TEST !! Once you've move your routes and built your controllers practice building the routes to create a user!! Remember to reference your docs!! Additional Resources YT, Codedamn - ExpressJS 15: Serving Static Files Know Your Docs Express Docs - Static","title":"Static Files"},{"location":"module-1/expressStaticFiles/#serving-static-files-in-expressjs","text":"","title":"Serving Static Files in Express.js"},{"location":"module-1/expressStaticFiles/#overview","text":"Static files are plain files. While there are a few definitions of the term \"static\" in programming, we won't get into that here. We simply need to know that it's a collection of files/folders. The files could be JavaScript, HTML, CSS, etc. What's the point? Well . . . you might want to show a specific HTML page when the user navigates to the main route \"/\" . In a more complex example, we may create a front-end with create-react-app and when we are ready for production we can compile the app into a collection of files and have the server display those to the user.","title":"Overview"},{"location":"module-1/expressStaticFiles/#how-to-serve-static-files","text":"In order to use static files we use the built in .static method of express as middleware. For example: 1 app . use ( express . static ( 'public' )) This tells express to show the contents of the \"public\" folder when a user navigates to the web server. In a more complete example, our index.js file looks like this: index.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ) const app = express () const port = process . env . PORT || 4000 // tell our Express server to serve the files in the public folder app . use ( express . static ( 'public' )) app . listen ( port , () => console . log ( `App is listening on port: ${ port } !` )) Folder Structure 1 2 3 4 5 6 7 8 9 10 11 src/ - index.js - controllers/ - users.js - routers/ - users.js - customers.js - merchants.js - admins.js - public/ - index.html public/index.html Code 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < title > Home Page </ title > </ head > < body > < h1 > Welcome to the home page! </ h1 > < p > This page can be used for many purposes, such as login. </ p > </ body > </ html > Rendered at http://localhost:4000/","title":"How to Serve Static Files"},{"location":"module-1/expressStaticFiles/#practice-it","text":"Use the sandbox above to get familiar with routes and controllers Click the start button and run the server Interact with the routes via Postman. You will find the URL on the right side of your screen after you open the Repl.it (top-right). Verify that all the routes work as intended Test /users , /users/2 Move the routes in index.js over to the routes/users.js folder and import/ require() them back into index.js using const users = require('./routers/users.js') & app.use() Move the (req, res) => {} functions out of the routes and into the controllers/ folder. Then import these back into the routes/ folder as you did before and use as expected: app.get('/users', usersController.list) If everything was done correctly the app will function exactly as it was in the beginning. Test with Postman as you do each small step. TEST ! TEST !! TEST !! Once you've move your routes and built your controllers practice building the routes to create a user!! Remember to reference your docs!!","title":"Practice It"},{"location":"module-1/expressStaticFiles/#additional-resources","text":"YT, Codedamn - ExpressJS 15: Serving Static Files","title":"Additional Resources"},{"location":"module-1/expressStaticFiles/#know-your-docs","text":"Express Docs - Static","title":"Know Your Docs"},{"location":"module-1/introToExpress/","text":"Intro to Express There is only one definition of success\u2014to be able to spend your life in your own way.\u2003\u2014Christopher Morley Overview Recently we've re-familiarized ourselves with Node and NPM and developed an understanding of axios as an alternative to fetch. We've also practiced consuming APIs with both Postman and Axios. So far, the APIs we've interacted with are programs that someone else has built. With Express, we will start to understand how to build our own APIs. What is Express.js Express is a (very popular) NPM package that turns our Node.js applications into a web server. Express can help us serve static files (images, etc) or create routes to build API endpoints. We will use Express to build the \"backend\" of our application. Why do we need a web server (or backend), anyway? There are several reasons. One key reason is for the protection of sensitive content. On our front-ends (HTML, CSS, JavaScript, React), everything we code into the app will be visible from the browser in one way or another. That means that if you store an API key or some other sensitive token in a variable, eventually someone will be able to inspect the website (through the console) and obtain that information. This inspection is not possible with a web server built with Express. Another reason we use a server is that it is how we integrate with a database. We will become more familiar with databases in the following chapters but it's good to know that in the software industry (as a best practice) we don't connect to a database directly from the frontend, a React app for example. Most database systems don't even allow this interaction. So a web server helps us account for this as well. Express is an amazing tool that helps us quickly accomplish these tasks. Fortunately for us, there is a wealth of information available on Express and we will see some of that soon. For now, feel free to check out the Express Homepage . A breakdown of concepts: Initiating the Server The first thing we typically do after we import express is to instantiate the server. The first few lines of our server usually look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // index.js // import the Express package const express = require ( 'express' ) // create a variable to hold the value of all of the server's functions/methods const app = express () // Middleware: this block is where authorization logic goes. We're not going to worry about it too much right now. We'll get into the details of authorization in a few weeks. app . use (( req , res , next ) => { //authorization logic would go here, after the check it calls the next() method to all the request to go to the next phase: get, put, post, etc... next () }) // at the bottom of the index.js file you'll tell the server `app` to listen give you feed back in the console when it is. // use this method to give you feedback as to when the server is successfully spun up (up and running)! app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) If this was in an npm init ed folder with Express installed ( npm i express ) you could run npm start or node index.js and get 'Server is listening on port 8080.' on your console. Creating Routes After that we are free to start creating routes . The app object has properties on it already that include: .get , .put , .post and .delete (among others). These properties correspond to the HTTP request methods you learned about in 101, 211, and now in 311. Remember when we used fetch() , the default request method was get so when we wanted to post form data we had to write the attribute method=\"POST\" NOTE: in this use of the word method we mean something different than when we say an object's method . The method of fetch refers to the type of HTTP Request that will be sent. In our Express app we'll define methods on the app object that will act as routes to handle these types of/ method ical requests. Whew...moving on... So, while we're building our server we have to think about the potential requests types that may & will come to it from our front-end or some other developer using our API. They'll be sending POST types, GET types, PUTs and DELETEs. To design and build for those types of requests we use these built in methods: .get , .put , .post and .delete (that correspond to those types of request), by simply defining their value with the functionality we want them to do. To start doing this we begin writing them like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // the GET Method app . get () // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) To continue defining the functionality of these methods we'll be putting some parameters inside each of these... The 1st Argument: the Path The path is a string that determines what route should be used. For example, all of our data will come through this one server so it needs to be pass through one root path: \"http://localhost:4000/\" . But if we wanted to serve user data and car data we'd need to define them at different paths. To do this we'd say that cars are at \"http://localhost:4000/cars\" and users are at \"http://localhost:4000/users\" . Therefore the path is \"/cars\" or \"/users\" . To define them you'd write it like this: 1 2 `app.get('/cars')` `app.get('/users')` We only need to define the last segment of the path: /users or /cars because our server lives at https://localhost:4000/ . Once our request from either Postman or our front-end app finds the server at the URL: https://localhost:4000/ , ( or any other URL it sits on once we host it remotely ), the path tells Express where to direct the request so that it finds the right route to get the expected resource (cars or users). if you look at the APIs we've worked with in 101 and 211 you'll see this same pattern used in those servers... /posts/ , /images , /products , /users , etc. Paths can also accept variables. Say that we wanted to obtain a specific user by their id , say 543 . In that case the full URL would be http://localhost:4000/users/543 . This will get the user whose id is equal to \"543\". But then someone might want user: 106, or user: 201, etc. To design for all of these potential request in our server we would write that route with a variable: :id . As in, 1 app . get ( '/users/:id' ) ` This is what our app starts to look like with that logic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // GET all users. Usually known as \"get all\" app . get ( \"/users\" ) // GET just one user by id. Usually known as \"get one\" app . get ( \"/users/:id\" ) // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) The 2nd Argument: a Callback Function After the path we have to define a second parameter that tells the server what's supposed to happen when this route is called. This second parameter is a callback function; meaning that this is what is suppose to happen when the method is called. In order for these callbacks to work they themselves need at least two argument passed into them: req (request) and res (response). The Req Parameter req represents the request object. This is the message that is sent from the frontend to our backend server. This object includes two main properties: headers and body . If you used Postman to submit a request with a body of { user: 'John' } then we could access that by referring to req.body . There are other properties of the incoming request that we can access as well, such as req.params , req.headers and req.cookies . NOTE: you must use a Cookie parser to do that last one. res represents the response object. This is what we will send back to the end user (client) on the frontend from the backend. We can send responses in a variety of formats but the two most popular are plain text and JSON. For example, let's say you want to send the text \"success\" to a user once an operation is complete. In that case you would complete whatever functionality you wanted inside of the callback and then call a the send method on the res object: res.send(\"success\") . The user will see this message after executing the specified action with our API. More commonly we are sending data payloads (data about a specific item: user or car, whatever) back to the user. On a GET request we might send the entire data object of a user back so that the client(front-end app/Postman). In that case, we called the json method on the res object to convert & package the data payload into a JSON string before we send it back to the client: res.json(user) . This user parameter could be anything we wanted but naming it this way helps us developers know what's supposed to be in there. The same logic would go for our car data: res.json(car) We will become more familiar with req and res as we practice more. However, now that we have our parameters and have a visual for the callback function we can put it all together. We mentioned previously that the first parameter is the path and the second parameter is the callback function , so when we write it all together we arrive at a variation of the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () // ...more code here... // GET method to get all users with the second argument including req & res that will resolve to a 'success' message being sent to the client/frontend app . get ( '/users' , ( req , res ) => { // ...perform some logic in here like getting the user data from the database... // then send back to the client a message saying 'success' res . send ( 'success' ) }) // GET method to get only one user by their id app . get ( '/users/:id' , ( req , res ) => { // ...store the id of the user request using the params of the req object coming from the client... const userId = req . params . id // ...get the user data from the database using the `userId` variable... // send the back to client a message saying 'success' res . send ( `We'll be sending you user ${ userId } shortly.` ) }) // ...more code here... // ...app.listen()... What you see above is a couple of routes/ endpoints . We will create many like these throughout this course. Take some time to understand how these methods work and the arguments that are being passed into them and what they are doing. In the coming sections we'll be adding on to these **endpoints to actually get data from a database so we can return actual data!! Practice It Before playing in the sandbox below, be sure to read this blog first! In the Express Playground above, hover over different sections of the code to get more info. Read the article to get a better understand of how this playground operates and what Express is meant to do. Additional Resources YT, SelfTuts - Pt. 1 What is Express in Node.js Article, Code Analogies - The Basics of Express.js Look ahead to the Questions for Student Led Discussion Know Your Docs Geeks4Geeks Docs - Express & Cookie-Parser Express Docs - Basics Routing","title":"Intro To Express"},{"location":"module-1/introToExpress/#intro-to-express","text":"There is only one definition of success\u2014to be able to spend your life in your own way.\u2003\u2014Christopher Morley","title":"Intro to Express"},{"location":"module-1/introToExpress/#overview","text":"Recently we've re-familiarized ourselves with Node and NPM and developed an understanding of axios as an alternative to fetch. We've also practiced consuming APIs with both Postman and Axios. So far, the APIs we've interacted with are programs that someone else has built. With Express, we will start to understand how to build our own APIs.","title":"Overview"},{"location":"module-1/introToExpress/#what-is-expressjs","text":"Express is a (very popular) NPM package that turns our Node.js applications into a web server. Express can help us serve static files (images, etc) or create routes to build API endpoints. We will use Express to build the \"backend\" of our application. Why do we need a web server (or backend), anyway? There are several reasons. One key reason is for the protection of sensitive content. On our front-ends (HTML, CSS, JavaScript, React), everything we code into the app will be visible from the browser in one way or another. That means that if you store an API key or some other sensitive token in a variable, eventually someone will be able to inspect the website (through the console) and obtain that information. This inspection is not possible with a web server built with Express. Another reason we use a server is that it is how we integrate with a database. We will become more familiar with databases in the following chapters but it's good to know that in the software industry (as a best practice) we don't connect to a database directly from the frontend, a React app for example. Most database systems don't even allow this interaction. So a web server helps us account for this as well. Express is an amazing tool that helps us quickly accomplish these tasks. Fortunately for us, there is a wealth of information available on Express and we will see some of that soon. For now, feel free to check out the Express Homepage . A breakdown of concepts:","title":"What is Express.js"},{"location":"module-1/introToExpress/#initiating-the-server","text":"The first thing we typically do after we import express is to instantiate the server. The first few lines of our server usually look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // index.js // import the Express package const express = require ( 'express' ) // create a variable to hold the value of all of the server's functions/methods const app = express () // Middleware: this block is where authorization logic goes. We're not going to worry about it too much right now. We'll get into the details of authorization in a few weeks. app . use (( req , res , next ) => { //authorization logic would go here, after the check it calls the next() method to all the request to go to the next phase: get, put, post, etc... next () }) // at the bottom of the index.js file you'll tell the server `app` to listen give you feed back in the console when it is. // use this method to give you feedback as to when the server is successfully spun up (up and running)! app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) If this was in an npm init ed folder with Express installed ( npm i express ) you could run npm start or node index.js and get 'Server is listening on port 8080.' on your console.","title":"Initiating the Server"},{"location":"module-1/introToExpress/#creating-routes","text":"After that we are free to start creating routes . The app object has properties on it already that include: .get , .put , .post and .delete (among others). These properties correspond to the HTTP request methods you learned about in 101, 211, and now in 311. Remember when we used fetch() , the default request method was get so when we wanted to post form data we had to write the attribute method=\"POST\" NOTE: in this use of the word method we mean something different than when we say an object's method . The method of fetch refers to the type of HTTP Request that will be sent. In our Express app we'll define methods on the app object that will act as routes to handle these types of/ method ical requests. Whew...moving on... So, while we're building our server we have to think about the potential requests types that may & will come to it from our front-end or some other developer using our API. They'll be sending POST types, GET types, PUTs and DELETEs. To design and build for those types of requests we use these built in methods: .get , .put , .post and .delete (that correspond to those types of request), by simply defining their value with the functionality we want them to do. To start doing this we begin writing them like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // the GET Method app . get () // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) }) To continue defining the functionality of these methods we'll be putting some parameters inside each of these...","title":"Creating Routes"},{"location":"module-1/introToExpress/#the-1st-argument-the-path","text":"The path is a string that determines what route should be used. For example, all of our data will come through this one server so it needs to be pass through one root path: \"http://localhost:4000/\" . But if we wanted to serve user data and car data we'd need to define them at different paths. To do this we'd say that cars are at \"http://localhost:4000/cars\" and users are at \"http://localhost:4000/users\" . Therefore the path is \"/cars\" or \"/users\" . To define them you'd write it like this: 1 2 `app.get('/cars')` `app.get('/users')` We only need to define the last segment of the path: /users or /cars because our server lives at https://localhost:4000/ . Once our request from either Postman or our front-end app finds the server at the URL: https://localhost:4000/ , ( or any other URL it sits on once we host it remotely ), the path tells Express where to direct the request so that it finds the right route to get the expected resource (cars or users). if you look at the APIs we've worked with in 101 and 211 you'll see this same pattern used in those servers... /posts/ , /images , /products , /users , etc. Paths can also accept variables. Say that we wanted to obtain a specific user by their id , say 543 . In that case the full URL would be http://localhost:4000/users/543 . This will get the user whose id is equal to \"543\". But then someone might want user: 106, or user: 201, etc. To design for all of these potential request in our server we would write that route with a variable: :id . As in, 1 app . get ( '/users/:id' ) ` This is what our app starts to look like with that logic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () app . use (( req , res , next ) => { next () }) // GET all users. Usually known as \"get all\" app . get ( \"/users\" ) // GET just one user by id. Usually known as \"get one\" app . get ( \"/users/:id\" ) // the POST Method app . post () // the PUT Method app . put () // the DELETE Method app . delete () app . listen ( 8080 , () => { console . log ( 'Server is listening on port 8080.' ) })","title":"The 1st Argument: the Path"},{"location":"module-1/introToExpress/#the-2nd-argument-a-callback-function","text":"After the path we have to define a second parameter that tells the server what's supposed to happen when this route is called. This second parameter is a callback function; meaning that this is what is suppose to happen when the method is called. In order for these callbacks to work they themselves need at least two argument passed into them: req (request) and res (response).","title":"The 2nd Argument: a Callback Function"},{"location":"module-1/introToExpress/#the-req-parameter","text":"req represents the request object. This is the message that is sent from the frontend to our backend server. This object includes two main properties: headers and body . If you used Postman to submit a request with a body of { user: 'John' } then we could access that by referring to req.body . There are other properties of the incoming request that we can access as well, such as req.params , req.headers and req.cookies . NOTE: you must use a Cookie parser to do that last one. res represents the response object. This is what we will send back to the end user (client) on the frontend from the backend. We can send responses in a variety of formats but the two most popular are plain text and JSON. For example, let's say you want to send the text \"success\" to a user once an operation is complete. In that case you would complete whatever functionality you wanted inside of the callback and then call a the send method on the res object: res.send(\"success\") . The user will see this message after executing the specified action with our API. More commonly we are sending data payloads (data about a specific item: user or car, whatever) back to the user. On a GET request we might send the entire data object of a user back so that the client(front-end app/Postman). In that case, we called the json method on the res object to convert & package the data payload into a JSON string before we send it back to the client: res.json(user) . This user parameter could be anything we wanted but naming it this way helps us developers know what's supposed to be in there. The same logic would go for our car data: res.json(car) We will become more familiar with req and res as we practice more. However, now that we have our parameters and have a visual for the callback function we can put it all together. We mentioned previously that the first parameter is the path and the second parameter is the callback function , so when we write it all together we arrive at a variation of the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // index.js const express = require ( 'express' ) const app = express () // ...more code here... // GET method to get all users with the second argument including req & res that will resolve to a 'success' message being sent to the client/frontend app . get ( '/users' , ( req , res ) => { // ...perform some logic in here like getting the user data from the database... // then send back to the client a message saying 'success' res . send ( 'success' ) }) // GET method to get only one user by their id app . get ( '/users/:id' , ( req , res ) => { // ...store the id of the user request using the params of the req object coming from the client... const userId = req . params . id // ...get the user data from the database using the `userId` variable... // send the back to client a message saying 'success' res . send ( `We'll be sending you user ${ userId } shortly.` ) }) // ...more code here... // ...app.listen()... What you see above is a couple of routes/ endpoints . We will create many like these throughout this course. Take some time to understand how these methods work and the arguments that are being passed into them and what they are doing. In the coming sections we'll be adding on to these **endpoints to actually get data from a database so we can return actual data!!","title":"The Req Parameter"},{"location":"module-1/introToExpress/#practice-it","text":"Before playing in the sandbox below, be sure to read this blog first! In the Express Playground above, hover over different sections of the code to get more info. Read the article to get a better understand of how this playground operates and what Express is meant to do.","title":"Practice It"},{"location":"module-1/introToExpress/#additional-resources","text":"YT, SelfTuts - Pt. 1 What is Express in Node.js Article, Code Analogies - The Basics of Express.js Look ahead to the Questions for Student Led Discussion","title":"Additional Resources"},{"location":"module-1/introToExpress/#know-your-docs","text":"Geeks4Geeks Docs - Express & Cookie-Parser Express Docs - Basics Routing","title":"Know Your Docs"},{"location":"module-1/nodeRecap/","text":"Node Recap He who moves not forward goes backward.\u2003\u2014Johann Wolfgang von Goethe Overview In this class we are going to be focused on creating and deploying APIs with Node.js and Express. Hopefully we are starting to feel quite comfortable using Node but we will spend the first class recapping/summarizing our knowledge of Node and NPM so that we can really hit the ground running in the coming weeks. JavaScript, why? JavaScript was originally designed to work on the web and so it only ran in browsers (Chrome/Safari/IE). Its purpose was to add functionality to websites to make them interactive and it has been very successful in this regard. Eventually, experts in the language decided they wanted to take the benefits of JavaScript and use them OUTSIDE of a web browser, for example on a server, and thus Node.js was born. Node.js is an open-source environment that executes JavaScript outside of a web browser. Why? While there are many benefits of using JavaScript, we'll focus on the big one for you as the developer. You may have heard the term fullstack used in the software industry to reference a person who works on both the frontend and the backend. The frontend almost always includes JavaScript while the backend could be any assortment of server-side languages such as Java, C# or Python. Because of this, many traditional full-stack developers were proficient in at least two languages. Adding Node.js into that mix allows the developer to focus on only one, JavaScript. With Node.js, we can run JavaScript on both the client side and the server. See It - What is Node.js Practice It Open the Repl.it below. Alter the function to include functionality for an international phone number. Ex. (+1). Add one number to the beginning of the array to support this. Additionally, remove all formatting (besides the +) from the phone number such that the result is returned as +19775631212 . This should make the logic of the function very simple. Without the advent of Node.js, we wouldn't be able to use JavaScript as a scripting language in the terminal as we can here in this Repl.it example or in our own terminal on our personal machine. Try It on Your Personal Machine By the time you come to this course you should have installed Node.js and be able to type into your terminal/bash node -v to get the current version of Node.js you have installed and running. On your desktop, create a file called: myTestFile.js and open it with your text editor, VS Code or your preference. Copy/paste the code from the Repl.it into that file, save, and return to your terminal/bash. cd desktop to change into your Desktop directory. Run the command node myTestFile.js + Enter You should see the same results you saw in the Repl.it online terminal. Now delete the file myTestFile.js to keep your desktop clean and organized. This is the power of Node.js. Without it, JavaScript couldn't be run outside of your browser. Try it in the Browser Now go back to Chrome and type Cmd + Option + I or ++ctrl+shift+i+ to open your dev tools tray. Navigate to the console. Copy/paste the formatPhone function into the console and hit Enter . Copy/paste the invocation of the function formatPhone([9, 7, 7, 5, 6, 3, 1, 2, 1, 2]) and hit Enter . You should get the exact same return value. It's important to note the difference in the environment. If you built a web page like you did in 101 and added functionality to it with JavaScript, the code was running in the browser. But if you were running unit tests on your terminal apps like you did in JS211, your JavaScript code was running in the Node environment. Without having to switch between a front-end scripting language and a back-end programming language we can focus all of our attention on one language, JavaScript. So let's get really good with JavaScript in this course!! NPM NPM stands for Node Package Manager . It also stands for Not Pancake Mix or any other assortment of clever acronyms developers can think of, and it's become something of a running joke on their website. The purpose of this tool is to allow you to integrate third-party code into your application. Third-party code means code another developer has written and published to NPM. Many developers in the open-source community work on projects that will benefit the masses and these projects can be downloaded via NPM and used in your project. A package.json file keeps track of all the packages you are currently using in your current project. Likewise, if you were building with Python and pip (the Python equivalent of npm ) you would see all of your code packages in a requirements.txt file. See It - NPM Practice It: NPM We are going to practice creating a new project with NPM. When complete, we will have a new folder with a package.json file inside and we will have included an external package in our project to tinker with. Navigate to your desktop: cd desktop + Enter . Create a new folder called \"sampleProject\" : mkdir sampleProject on your desktop. Navigate to it cd sampleProject + Enter . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by typing Enter over and over all the way through the last step: \"Is this OK? (yes)\". -> Y + Enter ls on Mac or dir on Windows and you will see package.json , right? Let's install moment , a date/time package by typing npm i moment . Now open the sampleProject folder in your text editor. Do you see moment listed in your package.json file? Do you see a new folder called \" node_modules/ \"? This folder keeps up with all of our third-party code packages. Now, create a file called index.js in your project folder. Import moment into the file by copy/pasting: const moment = require('moment') on the first line. On the third line create a variable for the current day: const day = moment().format('dddd') . On the fifth line log a message for the user that tells them what day it is: console.log('Today is', day) . Use our Node environment to run the code: node index.js . Know Your Docs Node Docs - Nodejs.org NPM Docs - Moment.js","title":"Node & NPM"},{"location":"module-1/nodeRecap/#node-recap","text":"He who moves not forward goes backward.\u2003\u2014Johann Wolfgang von Goethe","title":"Node Recap"},{"location":"module-1/nodeRecap/#overview","text":"In this class we are going to be focused on creating and deploying APIs with Node.js and Express. Hopefully we are starting to feel quite comfortable using Node but we will spend the first class recapping/summarizing our knowledge of Node and NPM so that we can really hit the ground running in the coming weeks.","title":"Overview"},{"location":"module-1/nodeRecap/#javascript-why","text":"JavaScript was originally designed to work on the web and so it only ran in browsers (Chrome/Safari/IE). Its purpose was to add functionality to websites to make them interactive and it has been very successful in this regard. Eventually, experts in the language decided they wanted to take the benefits of JavaScript and use them OUTSIDE of a web browser, for example on a server, and thus Node.js was born. Node.js is an open-source environment that executes JavaScript outside of a web browser. Why? While there are many benefits of using JavaScript, we'll focus on the big one for you as the developer. You may have heard the term fullstack used in the software industry to reference a person who works on both the frontend and the backend. The frontend almost always includes JavaScript while the backend could be any assortment of server-side languages such as Java, C# or Python. Because of this, many traditional full-stack developers were proficient in at least two languages. Adding Node.js into that mix allows the developer to focus on only one, JavaScript. With Node.js, we can run JavaScript on both the client side and the server.","title":"JavaScript, why?"},{"location":"module-1/nodeRecap/#see-it-what-is-nodejs","text":"","title":"See It - What is Node.js"},{"location":"module-1/nodeRecap/#practice-it","text":"Open the Repl.it below. Alter the function to include functionality for an international phone number. Ex. (+1). Add one number to the beginning of the array to support this. Additionally, remove all formatting (besides the +) from the phone number such that the result is returned as +19775631212 . This should make the logic of the function very simple. Without the advent of Node.js, we wouldn't be able to use JavaScript as a scripting language in the terminal as we can here in this Repl.it example or in our own terminal on our personal machine.","title":"Practice It"},{"location":"module-1/nodeRecap/#try-it-on-your-personal-machine","text":"By the time you come to this course you should have installed Node.js and be able to type into your terminal/bash node -v to get the current version of Node.js you have installed and running. On your desktop, create a file called: myTestFile.js and open it with your text editor, VS Code or your preference. Copy/paste the code from the Repl.it into that file, save, and return to your terminal/bash. cd desktop to change into your Desktop directory. Run the command node myTestFile.js + Enter You should see the same results you saw in the Repl.it online terminal. Now delete the file myTestFile.js to keep your desktop clean and organized. This is the power of Node.js. Without it, JavaScript couldn't be run outside of your browser.","title":"Try It on Your Personal Machine"},{"location":"module-1/nodeRecap/#try-it-in-the-browser","text":"Now go back to Chrome and type Cmd + Option + I or ++ctrl+shift+i+ to open your dev tools tray. Navigate to the console. Copy/paste the formatPhone function into the console and hit Enter . Copy/paste the invocation of the function formatPhone([9, 7, 7, 5, 6, 3, 1, 2, 1, 2]) and hit Enter . You should get the exact same return value. It's important to note the difference in the environment. If you built a web page like you did in 101 and added functionality to it with JavaScript, the code was running in the browser. But if you were running unit tests on your terminal apps like you did in JS211, your JavaScript code was running in the Node environment. Without having to switch between a front-end scripting language and a back-end programming language we can focus all of our attention on one language, JavaScript. So let's get really good with JavaScript in this course!!","title":"Try it in the Browser"},{"location":"module-1/nodeRecap/#npm","text":"NPM stands for Node Package Manager . It also stands for Not Pancake Mix or any other assortment of clever acronyms developers can think of, and it's become something of a running joke on their website. The purpose of this tool is to allow you to integrate third-party code into your application. Third-party code means code another developer has written and published to NPM. Many developers in the open-source community work on projects that will benefit the masses and these projects can be downloaded via NPM and used in your project. A package.json file keeps track of all the packages you are currently using in your current project. Likewise, if you were building with Python and pip (the Python equivalent of npm ) you would see all of your code packages in a requirements.txt file.","title":"NPM"},{"location":"module-1/nodeRecap/#see-it-npm","text":"","title":"See It - NPM"},{"location":"module-1/nodeRecap/#practice-it-npm","text":"We are going to practice creating a new project with NPM. When complete, we will have a new folder with a package.json file inside and we will have included an external package in our project to tinker with. Navigate to your desktop: cd desktop + Enter . Create a new folder called \"sampleProject\" : mkdir sampleProject on your desktop. Navigate to it cd sampleProject + Enter . Run the command npm init to initialize your project. READ THE WORDS PRINTED ON YOUR SCREEN!! Accept all the default options by typing Enter over and over all the way through the last step: \"Is this OK? (yes)\". -> Y + Enter ls on Mac or dir on Windows and you will see package.json , right? Let's install moment , a date/time package by typing npm i moment . Now open the sampleProject folder in your text editor. Do you see moment listed in your package.json file? Do you see a new folder called \" node_modules/ \"? This folder keeps up with all of our third-party code packages. Now, create a file called index.js in your project folder. Import moment into the file by copy/pasting: const moment = require('moment') on the first line. On the third line create a variable for the current day: const day = moment().format('dddd') . On the fifth line log a message for the user that tells them what day it is: console.log('Today is', day) . Use our Node environment to run the code: node index.js .","title":"Practice It: NPM"},{"location":"module-1/nodeRecap/#know-your-docs","text":"Node Docs - Nodejs.org NPM Docs - Moment.js","title":"Know Your Docs"},{"location":"module-1/preClassOneChecklist/","text":"Pre-Class One Checklist Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Downloaded Postman Downloaded Node Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the Moment.js Practice Section Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Pre-Class Checklist"},{"location":"module-1/preClassOneChecklist/#pre-class-one-checklist","text":"Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Downloaded Postman Downloaded Node Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the Moment.js Practice Section Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Pre-Class One Checklist"},{"location":"module-1/prepareYourMachine/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"module-1/prepareYourMachine/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"module-1/prepareYourMachine/#see-it","text":"","title":"See It"},{"location":"module-1/prepareYourMachine/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"module-1/prepareYourMachine/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"module-1/prepareYourMachine/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"module-1/prepareYourMachine/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"module-1/submittingHomework/","text":"Submitting Coding Homework Create Your Development Folder For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in. Create a Repo for Each Assignment Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future. Move Your Project Files For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo. Push to GitHub You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again. Host Your Webpage Before you can view your web page in a browser and turn in your assignment, you need to set your repository as a GitHub page. This tells GitHub you want to display this repo to the web. Go to your GitHub account and open your ACA_web101_yourname repo. Click the Settings icon in the top navigation menu. Scroll down almost to the bottom of the page to the GitHub Pages section. Click the Source dropdown and select the main or master branch (the first option). Click the Save button. The page will automatically refresh. Scroll back down to the GitHub Pages section, and you will see a message and link that says \u201cYour site is published at https://yourusername.github.io/ACA_web101_yourname.\" . Click the link. This is the Root of your live site. Always test your site to make sure everything is working. You can make and push changes as many times as you need. Bookmark this link so you can find it throughout the course. This will be the link you turn in for your assignments. You will only use GitHub pages when you want to host a page to the world. Most of our assignments won't require you to do this but it's a darn handy tool for when you want to get something up on the cheap. Turn in Your Assignment Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Submitting Homework"},{"location":"module-1/submittingHomework/#submitting-coding-homework","text":"","title":"Submitting Coding Homework"},{"location":"module-1/submittingHomework/#create-your-development-folder","text":"For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in.","title":"Create Your Development Folder"},{"location":"module-1/submittingHomework/#create-a-repo-for-each-assignment","text":"Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future.","title":"Create a Repo for Each Assignment"},{"location":"module-1/submittingHomework/#move-your-project-files","text":"For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo.","title":"Move Your Project Files"},{"location":"module-1/submittingHomework/#push-to-github","text":"You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again.","title":"Push to GitHub"},{"location":"module-1/submittingHomework/#host-your-webpage","text":"Before you can view your web page in a browser and turn in your assignment, you need to set your repository as a GitHub page. This tells GitHub you want to display this repo to the web. Go to your GitHub account and open your ACA_web101_yourname repo. Click the Settings icon in the top navigation menu. Scroll down almost to the bottom of the page to the GitHub Pages section. Click the Source dropdown and select the main or master branch (the first option). Click the Save button. The page will automatically refresh. Scroll back down to the GitHub Pages section, and you will see a message and link that says \u201cYour site is published at https://yourusername.github.io/ACA_web101_yourname.\" . Click the link. This is the Root of your live site. Always test your site to make sure everything is working. You can make and push changes as many times as you need. Bookmark this link so you can find it throughout the course. This will be the link you turn in for your assignments. You will only use GitHub pages when you want to host a page to the world. Most of our assignments won't require you to do this but it's a darn handy tool for when you want to get something up on the cheap.","title":"Host Your Webpage"},{"location":"module-1/submittingHomework/#turn-in-your-assignment","text":"Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Turn in Your Assignment"},{"location":"module-1/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"How to Succeed"},{"location":"module-1/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"module-1/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"module-1/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"module-1/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"module-1/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"},{"location":"module-1/whatIsNodeJS/","text":"What is Node.js While the name of the course you are starting may be called JavaScript 311 it's important to remember that JavaScript's native home is the browser. In all of its lifetime the only place JavaScript could be read was in the browser for use on the internet. It is only recently that JavaScript has been able to be run on a computer or server. Strangely enough, this is how many web apps are built now, with full \"JavaScript\" front and back ends. With the advent of Node.js, JavaScript is able to do many more things than it could do pre-2009. All this to say, what you'll be working in, while it looks like JavaScript, behaves like JavaScript and is based in JavaScript, is really Node.js. Node.js is a language built on JavaScript using Chrome's V8 JavaScript engine. Built by Ryan Dahl and first released in 2009, its many powers include the importing and exporting of modules. Remember the giant library of libraries discussed in Web 101? This is it. Node is the giant library and each of these modules are called \"libraries\". This means that we could build a module with really cool functions, push it to Node and then someone else could find it and use it for their project. This also means we could do the same. The following video is a requirement for all Intermediate students. Watch it and take notes! It's quite clear and thorough! What is Node.js Exactly Install Node Before you come into to class make sure you have installed Node.js . Click on the one on the left: \"Recommended for Most Users\" After you've installed it you should be able to go to the Terminal/Bash/CommandPrompt and type in node -v and get an output of v10.16.0 or something close to that.","title":"Working in Node"},{"location":"module-1/whatIsNodeJS/#what-is-nodejs","text":"While the name of the course you are starting may be called JavaScript 311 it's important to remember that JavaScript's native home is the browser. In all of its lifetime the only place JavaScript could be read was in the browser for use on the internet. It is only recently that JavaScript has been able to be run on a computer or server. Strangely enough, this is how many web apps are built now, with full \"JavaScript\" front and back ends. With the advent of Node.js, JavaScript is able to do many more things than it could do pre-2009. All this to say, what you'll be working in, while it looks like JavaScript, behaves like JavaScript and is based in JavaScript, is really Node.js. Node.js is a language built on JavaScript using Chrome's V8 JavaScript engine. Built by Ryan Dahl and first released in 2009, its many powers include the importing and exporting of modules. Remember the giant library of libraries discussed in Web 101? This is it. Node is the giant library and each of these modules are called \"libraries\". This means that we could build a module with really cool functions, push it to Node and then someone else could find it and use it for their project. This also means we could do the same. The following video is a requirement for all Intermediate students. Watch it and take notes! It's quite clear and thorough!","title":"What is Node.js"},{"location":"module-1/whatIsNodeJS/#what-is-nodejs-exactly","text":"","title":"What is Node.js Exactly"},{"location":"module-1/whatIsNodeJS/#install-node","text":"Before you come into to class make sure you have installed Node.js . Click on the one on the left: \"Recommended for Most Users\" After you've installed it you should be able to go to the Terminal/Bash/CommandPrompt and type in node -v and get an output of v10.16.0 or something close to that.","title":"Install Node"},{"location":"module-2/advancedSELECTstatments/","text":"Advanced SELECT The thing always happens that you really believe in; and the belief in a thing makes it happen.\u2003\u2014Frank Loyd Wright Overview Last class we set up a database, connected our Workbench Tool to it and learned how we can run some simple queries to retrieve the data we want. That's a huge step and we should be very proud of that! We're quickly learning how to become a \"back-end\" developer. Today we are going to build on that knowledge and talk about data relationships and how they can help us achieve even more impressive results. We will learn more about tables , rows ( entities ) as well as the keys that help form relationships between them, hence relational database . We will end with more advanced SELECT statements that JOIN tables together to achieve more complex results. We're going to discuss a few topics today and then end with practice JOIN ing tables together. So first we need to understand how relationships work between our data. Tables/Rows We saw this in our last lesson but didn't touch on it in too much detail. Basically, all of the data we store in our database will exist in tables . Tables are logical groupings of data based on shared characteristics. For example, all users (in our last example) had a first_name , last_name , address , etc. The same would be true for cars or products, we would put them in their own table because the share similar characteristics or properties. These \"properties\", known as fields are the columns of the table and the rows are each individual entity within our dataset . Remember this table from last lesson? id email age first_name password 001 bob@email.com 55 Bob B wonderful55 002 sarah@email.com 75 Sarah F turtleLove1955 003 emily@email.com 25 Emily T rainbowHearts33 The value in each of these cells of the user is called an entry . In the table above we see 5 fields , 3 entities , and 15 entries The rows, or entities represent each item in our table. For example, there is one row for each \"user\". When we query our data we are looking to return the rows that match our criteria. In the \"users\" example we may look for each row (\"user\") that has a first_name that starts with S . 1 SELECT * FROM users WHERE first_name LIKE 'S%' This query would return all the fields of user 002: | 002 | sarah@email.com | 75 | Sarah F | turtleLove1955 | because their first_name begins with an S . How do we know how many rows exist in my table? Try running the following SQL command: 1 SELECT COUNT ( * ) FROM users If you do this on the \"users\" table from last class you should see the number 500. NOTE: MySQL has many commands built into the language and all you have to do is read them, play with them, and move them into your server's codebase when you build the query that returns what you're looking for. That's why we use MySQL Workbench!! Keys Keys are indexes in MySQL, just like indexes in JavaScript Arrays. What does that mean? Well . . . it's simply the way in which MySQL works to organize data. There are three types of keys that we need to be concerned with. They are primary , unique and foreign . Primary Key A primary key is a field that identifies each row in the table. It could technically be a group of columns but we won't talk about that now as that technique is out of fashion What we need to remember is the three rules of primary keys : It must be unique to each row; and cannot be null . Also, these keys are almost always numbers, not strings, since MySQL naturally works faster with numbers and speed will eventually be a concern if we have a big dataset. In many cases, the primary key is an auto-increment ing number like 1, 2, 3, 4, etc. or like the table above: 001 , 002 , 003 , and so forth. It's important to note: a table can only have one primary key . Unique Key A unique key enforces uniqueness on specific columns of your data. There can be many unique keys on a table. An easy example of this will be referencing our \"users\" data again. Let's say that we have a bunch of user data but no two users should have the same email address. In this case we have to place a unique key on the email column and MySQL will prevent us from inserting duplicates. Foreign Key Foreign keys help us manage the relationship between tables. These fields have the same meaning in different tables and help us reduce redundancy. Let's say our \"users\" data is split up into two tables. One is called \"users\" and one is called \"userContacts\". | users table | | id | first_name | | - | - | | 001 | emily | | 002 | erica | | 003 | beverly| | usersContacts table | | user_id | email | street_address | phone | - | - | - | - | | 001 | emily@email.com | 123 Michigan Street | 555-555-5555 | | 002 | erica@email.com | 34 Miracle Street | 555-555-5555 | | 003 | beverly@email.com | 123 Magic Street | 555-555-5555 | The first table contains users id s and first_name s and the second contains their phone numbers and email & street_addresses . We would put the user id on the \"usersContacts\" table as a foreign key which helps relate that data to the first table (\"users\"). It also prevents us from adding to \"usersContacts\" without first adding to \"users\" since we would want to avoid an orphaned record in \"usersContacts\" that has no \"user\". Foreign keys are also used frequently to JOIN tables. A more visual example might help here. Note: Foreign keys are the most difficult to understand so don't worry if you can't visualize it in your mind just yet. The practice and homework will help enforce this principle JOIN Ok, we've done all the hard work of getting our tables set up with the appropriate keys and you're scratching your head because it only partially makes sense( or none at all... ). That's fine. Here comes the fun part ( hopefully )! If you had fun understanding SELECT and realizing how powerful it is to perform queries, just wait. Now we are going to start combining tables together. Because we've used foreign keys to form relationships between our data, we can now SELECT data from multiple tables that meets our criteria. Check this out: 1 2 3 4 5 6 7 SELECT users . first_name , usersContact . email FROM users JOIN usersContact WHERE users . id = usersContact . user_id ; So what's going on here? first_name only exists on the users table and email only exists on the usersContact table but because we've created a relationship between the two tables (via the foreign_key , user_id on the \"usersContact\" table) we can now SELECT data from both and know that we are guaranteed to have a usersContact for each \"user\". Why split the data? You might be asking yourself: \"Why did we take the original 'users' table and split the data into two tables?\" There are a few answers to this including normalization but what I'd like to touch on here is business impact. We might want to get a list of all user emails in the system. But we don't necessarily care what the users names or addresses are we just want to email everyone something. In this case it's beneficial to our system that we don't have to retrieve unnecessary information. The dataset would be a lot larger with all the additional fields included. Also, it might be possible for a user to have multiple contacts (phones, emails). If that's the case it's great that the data is split up so that we can just create a new entry in the \"usersContact\" table and not have to create a whole new user entirely. We'll take a look at our new data in the homework. Check out the Addition Resources ! Practice It - JOIN Follow the link to open this DBfiddle Alter the SQL fiddle: In the schema SQL, change the \"firstName\" column to be \"seller\" instead ( There are two instances to find and change ). Change your Query SQL to ask for the correct field name \"seller\" Move the price to be before the items' names and descriptions in the query return. GROUP BY The GROUP BY statement does pretty much what its name implies. It allows us to group data by a certain criteria. The caveat is that you can only display the fields that appear in the GROUP BY clause when you are viewing the data. That is, unless we specify an aggregate function such as COUNT or SUM for the rest of the data. It's very common to use COUNT with GROUP BY so let's see an example: 1 2 3 4 5 6 SELECT county , count ( * ) FROM users GROUP BY county ; The above will display a list of all the counties and a count of the users in each one. If we try to add an additional field into the select, such as \"phone1\" we get: 1 2 3 4 5 6 7 SELECT county , phone1 count ( * ) FROM users GROUP BY county ; 1 Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains non-aggregated column 'admin.users.phone1' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by That is because there are multiple options for \"phone1\" and SQL doesn't know how to group them as we haven't specified that. We could sum the phone numbers ( SUM(phone1) ) and that would work but it would show us useless information. Why would we ever want the \"sum\" of a phone number? HAVING The HAVING clause is a lot easier. It's basically a WHERE clause for the GROUP BY . It allows us to display only aggregated information that matches our criteria. For example, show me a list of all the counties and the number of users who live in each one, but only if there are more than 5 users in it. We would write that like this: 1 2 3 4 5 6 7 SELECT county , count ( * ) AS tally FROM users GROUP BY county HAVING tally > 5 ; You may notice the word tally in there. We've simply renamed the count(*) field to \"tally\" so that we don't have to keep specifying it in the previous manner. Now this query will show me all counties where the tally is greater than 5. We will practice with this more in the upcoming project. Be sure to read ahead, read the docs below, and answer the Questions for Discussion for yourself before class. Additional Resources YT, theNewBoston - MySQL 22: How to JOIN Tables Know Your Docs MySQL Tutorial - Primary Key MySQL Tutorial - Unique Key Arcticle, LogicalRead - Foreign Key","title":"Advanced SELECT"},{"location":"module-2/advancedSELECTstatments/#advanced-select","text":"The thing always happens that you really believe in; and the belief in a thing makes it happen.\u2003\u2014Frank Loyd Wright","title":"Advanced SELECT"},{"location":"module-2/advancedSELECTstatments/#overview","text":"Last class we set up a database, connected our Workbench Tool to it and learned how we can run some simple queries to retrieve the data we want. That's a huge step and we should be very proud of that! We're quickly learning how to become a \"back-end\" developer. Today we are going to build on that knowledge and talk about data relationships and how they can help us achieve even more impressive results. We will learn more about tables , rows ( entities ) as well as the keys that help form relationships between them, hence relational database . We will end with more advanced SELECT statements that JOIN tables together to achieve more complex results. We're going to discuss a few topics today and then end with practice JOIN ing tables together. So first we need to understand how relationships work between our data.","title":"Overview"},{"location":"module-2/advancedSELECTstatments/#tablesrows","text":"We saw this in our last lesson but didn't touch on it in too much detail. Basically, all of the data we store in our database will exist in tables . Tables are logical groupings of data based on shared characteristics. For example, all users (in our last example) had a first_name , last_name , address , etc. The same would be true for cars or products, we would put them in their own table because the share similar characteristics or properties. These \"properties\", known as fields are the columns of the table and the rows are each individual entity within our dataset . Remember this table from last lesson? id email age first_name password 001 bob@email.com 55 Bob B wonderful55 002 sarah@email.com 75 Sarah F turtleLove1955 003 emily@email.com 25 Emily T rainbowHearts33 The value in each of these cells of the user is called an entry . In the table above we see 5 fields , 3 entities , and 15 entries The rows, or entities represent each item in our table. For example, there is one row for each \"user\". When we query our data we are looking to return the rows that match our criteria. In the \"users\" example we may look for each row (\"user\") that has a first_name that starts with S . 1 SELECT * FROM users WHERE first_name LIKE 'S%' This query would return all the fields of user 002: | 002 | sarah@email.com | 75 | Sarah F | turtleLove1955 | because their first_name begins with an S . How do we know how many rows exist in my table? Try running the following SQL command: 1 SELECT COUNT ( * ) FROM users If you do this on the \"users\" table from last class you should see the number 500. NOTE: MySQL has many commands built into the language and all you have to do is read them, play with them, and move them into your server's codebase when you build the query that returns what you're looking for. That's why we use MySQL Workbench!!","title":"Tables/Rows"},{"location":"module-2/advancedSELECTstatments/#keys","text":"Keys are indexes in MySQL, just like indexes in JavaScript Arrays. What does that mean? Well . . . it's simply the way in which MySQL works to organize data. There are three types of keys that we need to be concerned with. They are primary , unique and foreign .","title":"Keys"},{"location":"module-2/advancedSELECTstatments/#primary-key","text":"A primary key is a field that identifies each row in the table. It could technically be a group of columns but we won't talk about that now as that technique is out of fashion What we need to remember is the three rules of primary keys : It must be unique to each row; and cannot be null . Also, these keys are almost always numbers, not strings, since MySQL naturally works faster with numbers and speed will eventually be a concern if we have a big dataset. In many cases, the primary key is an auto-increment ing number like 1, 2, 3, 4, etc. or like the table above: 001 , 002 , 003 , and so forth. It's important to note: a table can only have one primary key .","title":"Primary Key"},{"location":"module-2/advancedSELECTstatments/#unique-key","text":"A unique key enforces uniqueness on specific columns of your data. There can be many unique keys on a table. An easy example of this will be referencing our \"users\" data again. Let's say that we have a bunch of user data but no two users should have the same email address. In this case we have to place a unique key on the email column and MySQL will prevent us from inserting duplicates.","title":"Unique Key"},{"location":"module-2/advancedSELECTstatments/#foreign-key","text":"Foreign keys help us manage the relationship between tables. These fields have the same meaning in different tables and help us reduce redundancy. Let's say our \"users\" data is split up into two tables. One is called \"users\" and one is called \"userContacts\". | users table | | id | first_name | | - | - | | 001 | emily | | 002 | erica | | 003 | beverly| | usersContacts table | | user_id | email | street_address | phone | - | - | - | - | | 001 | emily@email.com | 123 Michigan Street | 555-555-5555 | | 002 | erica@email.com | 34 Miracle Street | 555-555-5555 | | 003 | beverly@email.com | 123 Magic Street | 555-555-5555 | The first table contains users id s and first_name s and the second contains their phone numbers and email & street_addresses . We would put the user id on the \"usersContacts\" table as a foreign key which helps relate that data to the first table (\"users\"). It also prevents us from adding to \"usersContacts\" without first adding to \"users\" since we would want to avoid an orphaned record in \"usersContacts\" that has no \"user\". Foreign keys are also used frequently to JOIN tables. A more visual example might help here. Note: Foreign keys are the most difficult to understand so don't worry if you can't visualize it in your mind just yet. The practice and homework will help enforce this principle","title":"Foreign Key"},{"location":"module-2/advancedSELECTstatments/#join","text":"Ok, we've done all the hard work of getting our tables set up with the appropriate keys and you're scratching your head because it only partially makes sense( or none at all... ). That's fine. Here comes the fun part ( hopefully )! If you had fun understanding SELECT and realizing how powerful it is to perform queries, just wait. Now we are going to start combining tables together. Because we've used foreign keys to form relationships between our data, we can now SELECT data from multiple tables that meets our criteria. Check this out: 1 2 3 4 5 6 7 SELECT users . first_name , usersContact . email FROM users JOIN usersContact WHERE users . id = usersContact . user_id ; So what's going on here? first_name only exists on the users table and email only exists on the usersContact table but because we've created a relationship between the two tables (via the foreign_key , user_id on the \"usersContact\" table) we can now SELECT data from both and know that we are guaranteed to have a usersContact for each \"user\".","title":"JOIN"},{"location":"module-2/advancedSELECTstatments/#why-split-the-data","text":"You might be asking yourself: \"Why did we take the original 'users' table and split the data into two tables?\" There are a few answers to this including normalization but what I'd like to touch on here is business impact. We might want to get a list of all user emails in the system. But we don't necessarily care what the users names or addresses are we just want to email everyone something. In this case it's beneficial to our system that we don't have to retrieve unnecessary information. The dataset would be a lot larger with all the additional fields included. Also, it might be possible for a user to have multiple contacts (phones, emails). If that's the case it's great that the data is split up so that we can just create a new entry in the \"usersContact\" table and not have to create a whole new user entirely. We'll take a look at our new data in the homework. Check out the Addition Resources !","title":"Why split the data?"},{"location":"module-2/advancedSELECTstatments/#practice-it-join","text":"Follow the link to open this DBfiddle Alter the SQL fiddle: In the schema SQL, change the \"firstName\" column to be \"seller\" instead ( There are two instances to find and change ). Change your Query SQL to ask for the correct field name \"seller\" Move the price to be before the items' names and descriptions in the query return.","title":"Practice It - JOIN"},{"location":"module-2/advancedSELECTstatments/#group-by","text":"The GROUP BY statement does pretty much what its name implies. It allows us to group data by a certain criteria. The caveat is that you can only display the fields that appear in the GROUP BY clause when you are viewing the data. That is, unless we specify an aggregate function such as COUNT or SUM for the rest of the data. It's very common to use COUNT with GROUP BY so let's see an example: 1 2 3 4 5 6 SELECT county , count ( * ) FROM users GROUP BY county ; The above will display a list of all the counties and a count of the users in each one. If we try to add an additional field into the select, such as \"phone1\" we get: 1 2 3 4 5 6 7 SELECT county , phone1 count ( * ) FROM users GROUP BY county ; 1 Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains non-aggregated column 'admin.users.phone1' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by That is because there are multiple options for \"phone1\" and SQL doesn't know how to group them as we haven't specified that. We could sum the phone numbers ( SUM(phone1) ) and that would work but it would show us useless information. Why would we ever want the \"sum\" of a phone number?","title":"GROUP BY"},{"location":"module-2/advancedSELECTstatments/#having","text":"The HAVING clause is a lot easier. It's basically a WHERE clause for the GROUP BY . It allows us to display only aggregated information that matches our criteria. For example, show me a list of all the counties and the number of users who live in each one, but only if there are more than 5 users in it. We would write that like this: 1 2 3 4 5 6 7 SELECT county , count ( * ) AS tally FROM users GROUP BY county HAVING tally > 5 ; You may notice the word tally in there. We've simply renamed the count(*) field to \"tally\" so that we don't have to keep specifying it in the previous manner. Now this query will show me all counties where the tally is greater than 5. We will practice with this more in the upcoming project. Be sure to read ahead, read the docs below, and answer the Questions for Discussion for yourself before class.","title":"HAVING"},{"location":"module-2/advancedSELECTstatments/#additional-resources","text":"YT, theNewBoston - MySQL 22: How to JOIN Tables","title":"Additional Resources"},{"location":"module-2/advancedSELECTstatments/#know-your-docs","text":"MySQL Tutorial - Primary Key MySQL Tutorial - Unique Key Arcticle, LogicalRead - Foreign Key","title":"Know Your Docs"},{"location":"module-2/class-5/","text":"Class 5: SELECT Practice They can because they think they can.\u2003\u2014Virgil Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Creating a database instance on Google Cloud Using MySQL Workbench to test and query their database Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time PART 1 - Account, Database, and Connect: Create Google Cloud Instance and Connect to MySQL Workbench (Do together as a class) Clone the Repo PART 2 - The Project: Practice Querying Data from the New Database (Do as small groups) Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to set up our own database instance (which can hold many databases) on Google Cloud. We will continue to use this instance throughout the rest of this course. Once it's set up we will create a database and then import some data into a table called \"users\". We will then practice querying that data with SELECT statements. We will download a tool called MySQL Workbench to help us do this. Part One: Account, Database, & Connect Google Cloud Google Cloud Platform (GCP) is one of the most popular and robust platforms for maintaining infrastructure (servers) in the cloud. It has an intuitive user interface and support for many open source projects including MySQL. It continues to gain ground on AWS as the de-facto IAAS (Infrastructure as a Service) platform, but developers certainly have their options. Other cloud platforms include AWS, Microsoft Azure, IBM Cloud, etc. Pricing Google Cloud has a free option for developers getting started with the platform. Upon registration, each account receives $300 in credit to use on computing resources as you learn. A credit card is required for registration but you will not be auto-renewed, bumped into a paid version or charged at all without your permission. See below: Creating Your Account Navigate to: Google Cloud Click \"Get started for free\" in the top right corner Complete the steps to create account Credit card required here Credit card will not be charged Upon successful registration you should see the main dashboard Creating DB Instance Take a look at the navigation menu (top-left) on the dashboard. You should see a lot of options. Locate the heading that reads \"STORAGE\" and click the \"SQL\" option. Click \"CREATE INSTANCE\" near the top of the page. Select \"MySQL\" from the two options. Fill out the form with the following information Instance ID: \"first-instance\" Root password: a password of your choice All other defaults can be left alone Click \"Create\" and wait for the instance to be set up. This can take a few minutes. When the instance is ready there will be a green checkmark next to it. Click on the name \"first-instance\" to see an overview. In this overview screen, look for a menu option called \"DATABASES\" and click it. Create a database called \"admin\". We're almost done . . . we just need to allow the database instance to be accessed from outside of this console. To do that we need to whitelist our IP address. Navigate to the \"CONNECTIONS\" tab. Look for the checkbox by \"Public IP\", we need to add a network. Find your IP address here and enter it into the dialog box with a name. Note that you will need to do this for each network you want to access the database from (home, work, ACA, Starbucks, wherever . . .) Make sure to click the save button. We're ready to go! We have a database set up in Google Cloud that can be accessed from anywhere. Now we need to learn how to interact with it in the next step. Download MySQL Workbench Navigate to MySQL Workbench download Click \"Download Now\" At the bottom of the page select your system specs (Mac, Windows) Click the \"download\" button again and then click \"No thanks, just start my download\" on the next page When the download completes, install MySQL Workbench Start MySQL Workbench. For Windows Users For Older Mac Users download an early version of the workbench: https://downloads.mysql.com/archives/workbench/ and/or use this guide: https://www.macminivault.com/install-mysql-on-macos-high-sierra/ Connect MySQL Workbench to the Database on GCP When opening MySQL Workbench, one of the first things you see is some text that says \"MySQL Connections\" Click the little plus sign next to that text. A dialog box should pop up Fill out the following information: Connection Name: \"first-instance\" Hostname: The IP address of your db in GCP You can find this on the \"OVERVIEW\" tab Password: Click \"store in keychain\" and enter the password you gave your instance when you set it up in the last step Default Schema: We'll use the name of the database we created earlier, \"admin\" Click \"Test Connection\". It should have been successful Click \"Ok\" to save the connection The new connection should be listed under \"MySQL Connections\", double click it to connect to the database We should have successfully created a database and connected to it. We've done a lot of setup so far but for our homework we'll add some data to our database and begin querying the data. Reference the following docs for additional information and walkthroughs of what we've covered so far. Additional Resources GCP Docs - Cloud SQL Quickstart GCP Docs - MySQL Workbench GCP Docs - Connecting from external applications Google Search - What's my IP Article, Kaggle - SELECT WHERE Part Two: Making a DB Make sure you follow the previous steps to configure Google Cloud and MySQL Workbench Fork and clone the following repository: DB Select Follow the README.md to enter data into your database and query it YT, Caleb Curry - MySQL 24: How to use a WHERE Clause Push Yourself Further Read the following sections in this MySQL Advanced Select tutorial and try them out on the DBfiddle from our pre-work. ORDER BY SELECT DISTINCT IN OR AND BETWEEN LIMIT Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 5 SELECT"},{"location":"module-2/class-5/#class-5-select-practice","text":"They can because they think they can.\u2003\u2014Virgil","title":"Class 5: SELECT Practice"},{"location":"module-2/class-5/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Creating a database instance on Google Cloud Using MySQL Workbench to test and query their database Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time PART 1 - Account, Database, and Connect: Create Google Cloud Instance and Connect to MySQL Workbench (Do together as a class) Clone the Repo PART 2 - The Project: Practice Querying Data from the New Database (Do as small groups) Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-5/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-5/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-5/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-5/#creation-time-60-90-mins","text":"Today we are going to set up our own database instance (which can hold many databases) on Google Cloud. We will continue to use this instance throughout the rest of this course. Once it's set up we will create a database and then import some data into a table called \"users\". We will then practice querying that data with SELECT statements. We will download a tool called MySQL Workbench to help us do this.","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-5/#part-one-account-database-connect","text":"","title":"Part One: Account, Database, &amp; Connect"},{"location":"module-2/class-5/#google-cloud","text":"Google Cloud Platform (GCP) is one of the most popular and robust platforms for maintaining infrastructure (servers) in the cloud. It has an intuitive user interface and support for many open source projects including MySQL. It continues to gain ground on AWS as the de-facto IAAS (Infrastructure as a Service) platform, but developers certainly have their options. Other cloud platforms include AWS, Microsoft Azure, IBM Cloud, etc.","title":"Google Cloud"},{"location":"module-2/class-5/#pricing","text":"Google Cloud has a free option for developers getting started with the platform. Upon registration, each account receives $300 in credit to use on computing resources as you learn. A credit card is required for registration but you will not be auto-renewed, bumped into a paid version or charged at all without your permission. See below:","title":"Pricing"},{"location":"module-2/class-5/#creating-your-account","text":"Navigate to: Google Cloud Click \"Get started for free\" in the top right corner Complete the steps to create account Credit card required here Credit card will not be charged Upon successful registration you should see the main dashboard","title":"Creating Your Account"},{"location":"module-2/class-5/#creating-db-instance","text":"Take a look at the navigation menu (top-left) on the dashboard. You should see a lot of options. Locate the heading that reads \"STORAGE\" and click the \"SQL\" option. Click \"CREATE INSTANCE\" near the top of the page. Select \"MySQL\" from the two options. Fill out the form with the following information Instance ID: \"first-instance\" Root password: a password of your choice All other defaults can be left alone Click \"Create\" and wait for the instance to be set up. This can take a few minutes. When the instance is ready there will be a green checkmark next to it. Click on the name \"first-instance\" to see an overview. In this overview screen, look for a menu option called \"DATABASES\" and click it. Create a database called \"admin\". We're almost done . . . we just need to allow the database instance to be accessed from outside of this console. To do that we need to whitelist our IP address. Navigate to the \"CONNECTIONS\" tab. Look for the checkbox by \"Public IP\", we need to add a network. Find your IP address here and enter it into the dialog box with a name. Note that you will need to do this for each network you want to access the database from (home, work, ACA, Starbucks, wherever . . .) Make sure to click the save button. We're ready to go! We have a database set up in Google Cloud that can be accessed from anywhere. Now we need to learn how to interact with it in the next step.","title":"Creating DB Instance"},{"location":"module-2/class-5/#download-mysql-workbench","text":"Navigate to MySQL Workbench download Click \"Download Now\" At the bottom of the page select your system specs (Mac, Windows) Click the \"download\" button again and then click \"No thanks, just start my download\" on the next page When the download completes, install MySQL Workbench Start MySQL Workbench. For Windows Users For Older Mac Users download an early version of the workbench: https://downloads.mysql.com/archives/workbench/ and/or use this guide: https://www.macminivault.com/install-mysql-on-macos-high-sierra/","title":"Download MySQL Workbench"},{"location":"module-2/class-5/#connect-mysql-workbench-to-the-database-on-gcp","text":"When opening MySQL Workbench, one of the first things you see is some text that says \"MySQL Connections\" Click the little plus sign next to that text. A dialog box should pop up Fill out the following information: Connection Name: \"first-instance\" Hostname: The IP address of your db in GCP You can find this on the \"OVERVIEW\" tab Password: Click \"store in keychain\" and enter the password you gave your instance when you set it up in the last step Default Schema: We'll use the name of the database we created earlier, \"admin\" Click \"Test Connection\". It should have been successful Click \"Ok\" to save the connection The new connection should be listed under \"MySQL Connections\", double click it to connect to the database We should have successfully created a database and connected to it. We've done a lot of setup so far but for our homework we'll add some data to our database and begin querying the data. Reference the following docs for additional information and walkthroughs of what we've covered so far.","title":"Connect MySQL Workbench to the Database on GCP"},{"location":"module-2/class-5/#additional-resources","text":"GCP Docs - Cloud SQL Quickstart GCP Docs - MySQL Workbench GCP Docs - Connecting from external applications Google Search - What's my IP Article, Kaggle - SELECT WHERE","title":"Additional Resources"},{"location":"module-2/class-5/#part-two-making-a-db","text":"Make sure you follow the previous steps to configure Google Cloud and MySQL Workbench Fork and clone the following repository: DB Select Follow the README.md to enter data into your database and query it YT, Caleb Curry - MySQL 24: How to use a WHERE Clause","title":"Part Two: Making a DB"},{"location":"module-2/class-5/#push-yourself-further","text":"Read the following sections in this MySQL Advanced Select tutorial and try them out on the DBfiddle from our pre-work. ORDER BY SELECT DISTINCT IN OR AND BETWEEN LIMIT","title":"Push Yourself Further"},{"location":"module-2/class-5/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-5/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-6/","text":"Class 6: Advanced SELECT We are all motivated by a keen desire for praise, and the better a man is, the more he is inspired to glory.\u2003\u2014Cicero Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Advanced SELECT queries using multiple tables How to use GROUP BY & HAVING Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Review GROUP BY & HAVING 311-wk3-day2-advanced-select repo Push Yourself Further Overview of Checkpoint 1: Express CRUD Server Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to do some advanced querying of our database. We are going to reconstruct our tables so that the \"users\" information is split into three tables and we will practice JOIN ing and GROUP ing data to fit our needs. So far we've covered the SELECT , FROM , WHERE and JOIN command keywords, and most recently we've added GROUP BY and HAVING to our repertoire. Be sure to reference the lecture and the docs provided to complete today's project. Fork and clone the following repository: Advanced Select Follow the README.md to join tables, group by and generate an ER (Entity Relationship) diagram. YT, O'Reilly Training - SQL Tutorial: Relational Databases Explained Push Yourself Further Follow the steps below to create an ER (Entity Relationship) diagram for your homework project. Assuming the homework was complete, you should have three tables: users, usersContact and usersAddress. Open MySQL Workbench. Ensure you are connected to your database. Test a query by running SELECT * FROM users; . In the MySQL Workbench menu, select Database -> Reverse Engineer. A dialog box should have appeared. In the first dropdown (stored connection), select the connection to your instance. Click \"continue\" three times until a list of databases appears. There should only be one (\"admin\"). Select the \"admin\" database and continue accepting all other defaults. You should see your ER diagram displayed. Hover over the tables to see the relationships (usersContact and usersAddress point back to users). Click around the diagram and discover other information about your tables. Checkpoint 1: Express CRUD Server So far we've recapped node/NPM, learned protocols, Axios, Express, routes and controllers, static files, status codes and had an intro to MySQL. We will use most of these technologies for this assignment. Express bodyParser Routes Controllers Use of static data (provided) GET/POST/PUT/DELETE Appropriate status codes We will NOT be utilizing static files or MySQL. Checkpoint Objective We are going to build an Express CRUD app using the knowledge we have of Express so far. Instructions Fork and clone the following repository: Checkpoint 1 Follow the README to create an Express CRUD app Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Advanced Select Assignment Create Checkpoint 1 Assignment Create Class 6 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 6 Advanced SELECT"},{"location":"module-2/class-6/#class-6-advanced-select","text":"We are all motivated by a keen desire for praise, and the better a man is, the more he is inspired to glory.\u2003\u2014Cicero","title":"Class 6: Advanced SELECT"},{"location":"module-2/class-6/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Advanced SELECT queries using multiple tables How to use GROUP BY & HAVING Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Review GROUP BY & HAVING 311-wk3-day2-advanced-select repo Push Yourself Further Overview of Checkpoint 1: Express CRUD Server Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-6/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-6/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-6/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-6/#creation-time-60-90-mins","text":"Today we are going to do some advanced querying of our database. We are going to reconstruct our tables so that the \"users\" information is split into three tables and we will practice JOIN ing and GROUP ing data to fit our needs. So far we've covered the SELECT , FROM , WHERE and JOIN command keywords, and most recently we've added GROUP BY and HAVING to our repertoire. Be sure to reference the lecture and the docs provided to complete today's project. Fork and clone the following repository: Advanced Select Follow the README.md to join tables, group by and generate an ER (Entity Relationship) diagram. YT, O'Reilly Training - SQL Tutorial: Relational Databases Explained","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-6/#push-yourself-further","text":"Follow the steps below to create an ER (Entity Relationship) diagram for your homework project. Assuming the homework was complete, you should have three tables: users, usersContact and usersAddress. Open MySQL Workbench. Ensure you are connected to your database. Test a query by running SELECT * FROM users; . In the MySQL Workbench menu, select Database -> Reverse Engineer. A dialog box should have appeared. In the first dropdown (stored connection), select the connection to your instance. Click \"continue\" three times until a list of databases appears. There should only be one (\"admin\"). Select the \"admin\" database and continue accepting all other defaults. You should see your ER diagram displayed. Hover over the tables to see the relationships (usersContact and usersAddress point back to users). Click around the diagram and discover other information about your tables.","title":"Push Yourself Further"},{"location":"module-2/class-6/#checkpoint-1-express-crud-server","text":"So far we've recapped node/NPM, learned protocols, Axios, Express, routes and controllers, static files, status codes and had an intro to MySQL. We will use most of these technologies for this assignment. Express bodyParser Routes Controllers Use of static data (provided) GET/POST/PUT/DELETE Appropriate status codes We will NOT be utilizing static files or MySQL.","title":"Checkpoint 1: Express CRUD Server"},{"location":"module-2/class-6/#checkpoint-objective","text":"We are going to build an Express CRUD app using the knowledge we have of Express so far.","title":"Checkpoint Objective"},{"location":"module-2/class-6/#instructions","text":"Fork and clone the following repository: Checkpoint 1 Follow the README to create an Express CRUD app","title":"Instructions"},{"location":"module-2/class-6/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-6/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-6/#exit-recap-attendance-and-reminders-5-mins","text":"Create Advanced Select Assignment Create Checkpoint 1 Assignment Create Class 6 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-7/","text":"Class 7: SQL CRUD Nothing great was ever achieved without enthusiasm.\u2003\u2014Ralph Waldo Emerson Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: The remaining CRUD operations in SQL: Create, Update, and Delete Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the 311_wk4_day1_crud Repo Initialize your data Create the 4 required statements to build a full CRUD SQL database. Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to work on the CRUD operations of our database. We will practice INSERT ing, UPDATE ing and DELETE ing records from our tables and use our existing knowledge of SELECT to help us verify the changes we made. After this lesson we should have everything we need to interact with SQL databases. Fork and clone the following repository: SQL CRUD Follow the README.md to INSERT , UPDATE and DELETE records. YT, the Bad Tutorials - SQL Tutorial 25: ORDER BY NOTE: As mentioned before, we will often want to check to make sure the inserts, updates or deletes worked as expected, and we do that by running a SELECT query on the data to view it. NOTE 2: One important clause that we haven't talked about yet is the ORDER BY clause . It will help you order the data in your tables by a field or group of fields. For example, if you just inserted a record, you may want to perform a SELECT statement in descending \"order by\" id so that the newest record is at the top. The video above will explain this clause. Push Yourself Further The following document covers INSERT s, UPDATE s and DELETE s as well as commands to create and drop tables and databases. Additionally, the DISTINCT command will give you an easy way to de-dupe result sets. Review the following document on most popular sql commands Continue using the MySQL Documentation to further your learning. You will need to continuously reference docs like this in order to know how to write your SQL statements. Additionally, Google searches like \"MySQL find all records that start with A\" can be helpful in pointing you to Stack Overflow articles on the appropriate topic. The key is knowing what to search for. Often it's easier than you think. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 7 SQL CRUD"},{"location":"module-2/class-7/#class-7-sql-crud","text":"Nothing great was ever achieved without enthusiasm.\u2003\u2014Ralph Waldo Emerson","title":"Class 7: SQL CRUD"},{"location":"module-2/class-7/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: The remaining CRUD operations in SQL: Create, Update, and Delete Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the 311_wk4_day1_crud Repo Initialize your data Create the 4 required statements to build a full CRUD SQL database. Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-7/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-7/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-7/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-7/#creation-time-60-90-mins","text":"Today we are going to work on the CRUD operations of our database. We will practice INSERT ing, UPDATE ing and DELETE ing records from our tables and use our existing knowledge of SELECT to help us verify the changes we made. After this lesson we should have everything we need to interact with SQL databases. Fork and clone the following repository: SQL CRUD Follow the README.md to INSERT , UPDATE and DELETE records. YT, the Bad Tutorials - SQL Tutorial 25: ORDER BY NOTE: As mentioned before, we will often want to check to make sure the inserts, updates or deletes worked as expected, and we do that by running a SELECT query on the data to view it. NOTE 2: One important clause that we haven't talked about yet is the ORDER BY clause . It will help you order the data in your tables by a field or group of fields. For example, if you just inserted a record, you may want to perform a SELECT statement in descending \"order by\" id so that the newest record is at the top. The video above will explain this clause.","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-7/#push-yourself-further","text":"The following document covers INSERT s, UPDATE s and DELETE s as well as commands to create and drop tables and databases. Additionally, the DISTINCT command will give you an easy way to de-dupe result sets. Review the following document on most popular sql commands Continue using the MySQL Documentation to further your learning. You will need to continuously reference docs like this in order to know how to write your SQL statements. Additionally, Google searches like \"MySQL find all records that start with A\" can be helpful in pointing you to Stack Overflow articles on the appropriate topic. The key is knowing what to search for. Often it's easier than you think.","title":"Push Yourself Further"},{"location":"module-2/class-7/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-7/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-8/","text":"Class 8: MySQL + Express For hope is but the dream of those that wake.\u2003\u2014Matthew Prior Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: How to use NPM MySQL with Express to connect to an SQL database Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the 311_wk4_day2_node_mysql Repo Complete the SQL database to Express app connection for a full CRUD API with SQL database Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to work on the CRUD operations of our database again but this time all the operations will be in an Express app. After today we will have a fully functioning API attached to an SQL database. We still have a few more things to do in this course but at this point you should be proud because we've gotten through the meat of it! More best practices such as authentication to come . . . In the example below we see how to parse this immense data into just what we need, dynamically. Fork and clone the following repository: Node MySQL Follow the README to SELECT , INSERT , UPDATE and DELETE records from an Express app Here's a cool video about wrapping the callbacks from the connection pool in promises. More importantly, this video handles Express and MySQL from start --> finish ! YT, Covalence - MySQL, Node, Express Walk-Through Push Yourself Further There are a couple semi-advanced concepts in SQL that we haven't covered yet, but that's ok. The bulk of our time has been prioritizing the necessities. That being said, if you really want to take it to the next level (AND YOU SHOULD) you can spend some time on your own learning about transactions and stored procedures . MySQL Docs - Transaction Medium, Peter Lafferty - MySQL Stored Procedures 101 NPM MySQL Docs - Transactions NPM MySQL Docs - Stored Procedures Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create MySQL+CRUD Assignment Create Class 8 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 8 MySQL + Express"},{"location":"module-2/class-8/#class-8-mysql-express","text":"For hope is but the dream of those that wake.\u2003\u2014Matthew Prior","title":"Class 8: MySQL + Express"},{"location":"module-2/class-8/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: How to use NPM MySQL with Express to connect to an SQL database Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the 311_wk4_day2_node_mysql Repo Complete the SQL database to Express app connection for a full CRUD API with SQL database Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-8/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-8/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-8/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-8/#creation-time-60-90-mins","text":"Today we are going to work on the CRUD operations of our database again but this time all the operations will be in an Express app. After today we will have a fully functioning API attached to an SQL database. We still have a few more things to do in this course but at this point you should be proud because we've gotten through the meat of it! More best practices such as authentication to come . . . In the example below we see how to parse this immense data into just what we need, dynamically. Fork and clone the following repository: Node MySQL Follow the README to SELECT , INSERT , UPDATE and DELETE records from an Express app Here's a cool video about wrapping the callbacks from the connection pool in promises. More importantly, this video handles Express and MySQL from start --> finish ! YT, Covalence - MySQL, Node, Express Walk-Through","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-8/#push-yourself-further","text":"There are a couple semi-advanced concepts in SQL that we haven't covered yet, but that's ok. The bulk of our time has been prioritizing the necessities. That being said, if you really want to take it to the next level (AND YOU SHOULD) you can spend some time on your own learning about transactions and stored procedures . MySQL Docs - Transaction Medium, Peter Lafferty - MySQL Stored Procedures 101 NPM MySQL Docs - Transactions NPM MySQL Docs - Stored Procedures","title":"Push Yourself Further"},{"location":"module-2/class-8/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-8/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-8/#exit-recap-attendance-and-reminders-5-mins","text":"Create MySQL+CRUD Assignment Create Class 8 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/databaseIntro/","text":"Databases Keep steadily before you the fact that all true success depends at last upon yourself.\u2003\u2014Theodore T. Hunger Overview We've spent the last few days learning how to use Express.js to build a server. But as you've probably picked up by now, holding our data in a static folder isn't ideal for large and dynamic apps. We need data to persist and allow multiple users to interact with the same set of data. To do this we need a third element added to our full-stack app: a database Today we're going to learn what, how, and where to setup databases . What is A Database A database is an organized set of data stored and accessed electronically. It helps provide a layer of persistence to our applications. That means, even if our application breaks or is shut down, we can still access its data. Next time the app starts up, it should be able to pick up where it left off. We can integrate with our database in multiple ways. One of those ways is through our server built with Express. This is how our users will interact with our dataset. We can also use our terminals/command lines and various other visual tools to query this data from outside our application/server. This becomes very useful in debugging, for example. There are many types of databases available to us but in this course we will focus on one of the most popular, MySQL . MySQL MySQL has many interesting capabilities including the ability to combine NoSQL and SQL (sometimes known as non-relational and relational, respectively) in a single database. We will be focusing on the SQL side of things. This means that all of our data will be structured in \"tables\" and those tables will have \"relationships\", hence relational. We will come to understand this more in the coming weeks. For now let's talk about the two types of operations we can perform on our databases, read and write . Read vs Write Read A read operation means we are fetching or reading some data from the database. You can think of this like the GET requests we learned about previously. In MySQL, this manifests itself in the form of SELECT statements. We use that keyword ( select ) to retrieve a subset of data based on some criteria that we pass in. Write A write operation is something that creates , updates or deletes data. These could correspond to our POST , PUT and DELETE HTTP request types we've learned and built already. The MySQL keywords that represent these actions are: INSERT , UPDATE , DELETE . How Data is Stored When we create a database using some flavor of SQL, like mySQL we divided our types of data into tables . Using past examples we might have a users table and a cars table and a products table. All of these tables could be in the same database but keeping them in separate tables allows us to keep and organize related data within \"categories\". In side the tables we divide our individual entities up by fields . If you were looking at an spreadsheet the fields would be the columns while the rows would be the entities . So each user in our users table would be an entity but their properties/attributes like id , email , age , name , password , etc... would all be fields . The value in each of these fields of the user is called an entry . In the following table we see 5 fields , 3 entities , and 15 entries id email age name password 001 bob@email.com 55 Bob B wonderful55 002 sarah@email.com 75 Sarah F turtleLove1955 003 emily@email.com 25 Emily T rainbowHearts33 Make sense? SELECT Statements Now that down, let's take a deeper look into SELECT statements. This will be our first foray into the world of MySQL. SELECT is a keyword that we use when we want to query data from our database. Other keywords were mentioned above ( INSERT , UPDATE ) and it's important to note that these keywords are typically written in capital letters. Let's start with an example of SELECT : 1 SELECT * FROM adminAccounts This query selects everything(*) from the adminAccounts table. Let's talk about what's going on here: We are using SELECT to tell the database management system ( DBMS ) that we are querying/asking for data. The asterisk , * , is known as a wildcard and its role is to include all fields in the query. The keyword FROM exists in all SELECT statements and is a precursor to the final argument. The final part/argument of this statement, the word adminAccounts , is the name of the table in the database that we are querying. Think of SELECT as a function and you're passing it two arguments: * , and a function FROM which itself gets an argument, which in this case is adminAccounts . The following code is NOT valid!! But may help you start seeing the pattern: 1 2 3 4 */ not valid mysql code */ used for illustrative purposes only SELECT ( * , FROM ( adminAccounts )) AGAIN, the code above is not valid but may help you see a pattern since you're familiar with JavaScript. Let's look at a more complicated example: 1 SELECT SUM ( logins ) FROM adminAccounts WHERE firstName LIKE 'd%' This query selects the sum of all the logins by users whose first name starts with the letter \"d\". Let's break it down once again: We start with the SELECT keyword. This time we use the SUM keyword combined with the field \"logins\" to get a total of all the logins. We see FROM again to help us determine which table to query from. Designate the adminAccounts table again. Now we are going to use the WHERE keyword which helps us narrow our search to specific result sets. We specify that we want to return only rows/ entities where the first name starts with the letter d . That's what the LIKE keyword paired with d% does. The percentage sign, % , is a wildcard . The wildcard allows for anything to come after the d like David, Dana, Devin, Deidre , all of these would match and be returned. Now we have two working examples of SELECT statements. Check out the full capabilities of SELECT statements here . Additional Resources YT, 365Science - 10 Min Intro to MySQL Know Your Docs MySQL Docs - SELECT","title":"Database Intro"},{"location":"module-2/databaseIntro/#databases","text":"Keep steadily before you the fact that all true success depends at last upon yourself.\u2003\u2014Theodore T. Hunger","title":"Databases"},{"location":"module-2/databaseIntro/#overview","text":"We've spent the last few days learning how to use Express.js to build a server. But as you've probably picked up by now, holding our data in a static folder isn't ideal for large and dynamic apps. We need data to persist and allow multiple users to interact with the same set of data. To do this we need a third element added to our full-stack app: a database Today we're going to learn what, how, and where to setup databases .","title":"Overview"},{"location":"module-2/databaseIntro/#what-is-a-database","text":"A database is an organized set of data stored and accessed electronically. It helps provide a layer of persistence to our applications. That means, even if our application breaks or is shut down, we can still access its data. Next time the app starts up, it should be able to pick up where it left off. We can integrate with our database in multiple ways. One of those ways is through our server built with Express. This is how our users will interact with our dataset. We can also use our terminals/command lines and various other visual tools to query this data from outside our application/server. This becomes very useful in debugging, for example. There are many types of databases available to us but in this course we will focus on one of the most popular, MySQL .","title":"What is A Database"},{"location":"module-2/databaseIntro/#mysql","text":"MySQL has many interesting capabilities including the ability to combine NoSQL and SQL (sometimes known as non-relational and relational, respectively) in a single database. We will be focusing on the SQL side of things. This means that all of our data will be structured in \"tables\" and those tables will have \"relationships\", hence relational. We will come to understand this more in the coming weeks. For now let's talk about the two types of operations we can perform on our databases, read and write .","title":"MySQL"},{"location":"module-2/databaseIntro/#read-vs-write","text":"","title":"Read vs Write"},{"location":"module-2/databaseIntro/#read","text":"A read operation means we are fetching or reading some data from the database. You can think of this like the GET requests we learned about previously. In MySQL, this manifests itself in the form of SELECT statements. We use that keyword ( select ) to retrieve a subset of data based on some criteria that we pass in.","title":"Read"},{"location":"module-2/databaseIntro/#write","text":"A write operation is something that creates , updates or deletes data. These could correspond to our POST , PUT and DELETE HTTP request types we've learned and built already. The MySQL keywords that represent these actions are: INSERT , UPDATE , DELETE .","title":"Write"},{"location":"module-2/databaseIntro/#how-data-is-stored","text":"When we create a database using some flavor of SQL, like mySQL we divided our types of data into tables . Using past examples we might have a users table and a cars table and a products table. All of these tables could be in the same database but keeping them in separate tables allows us to keep and organize related data within \"categories\". In side the tables we divide our individual entities up by fields . If you were looking at an spreadsheet the fields would be the columns while the rows would be the entities . So each user in our users table would be an entity but their properties/attributes like id , email , age , name , password , etc... would all be fields . The value in each of these fields of the user is called an entry . In the following table we see 5 fields , 3 entities , and 15 entries id email age name password 001 bob@email.com 55 Bob B wonderful55 002 sarah@email.com 75 Sarah F turtleLove1955 003 emily@email.com 25 Emily T rainbowHearts33 Make sense?","title":"How Data is Stored"},{"location":"module-2/databaseIntro/#select-statements","text":"Now that down, let's take a deeper look into SELECT statements. This will be our first foray into the world of MySQL. SELECT is a keyword that we use when we want to query data from our database. Other keywords were mentioned above ( INSERT , UPDATE ) and it's important to note that these keywords are typically written in capital letters. Let's start with an example of SELECT : 1 SELECT * FROM adminAccounts This query selects everything(*) from the adminAccounts table. Let's talk about what's going on here: We are using SELECT to tell the database management system ( DBMS ) that we are querying/asking for data. The asterisk , * , is known as a wildcard and its role is to include all fields in the query. The keyword FROM exists in all SELECT statements and is a precursor to the final argument. The final part/argument of this statement, the word adminAccounts , is the name of the table in the database that we are querying. Think of SELECT as a function and you're passing it two arguments: * , and a function FROM which itself gets an argument, which in this case is adminAccounts . The following code is NOT valid!! But may help you start seeing the pattern: 1 2 3 4 */ not valid mysql code */ used for illustrative purposes only SELECT ( * , FROM ( adminAccounts )) AGAIN, the code above is not valid but may help you see a pattern since you're familiar with JavaScript. Let's look at a more complicated example: 1 SELECT SUM ( logins ) FROM adminAccounts WHERE firstName LIKE 'd%' This query selects the sum of all the logins by users whose first name starts with the letter \"d\". Let's break it down once again: We start with the SELECT keyword. This time we use the SUM keyword combined with the field \"logins\" to get a total of all the logins. We see FROM again to help us determine which table to query from. Designate the adminAccounts table again. Now we are going to use the WHERE keyword which helps us narrow our search to specific result sets. We specify that we want to return only rows/ entities where the first name starts with the letter d . That's what the LIKE keyword paired with d% does. The percentage sign, % , is a wildcard . The wildcard allows for anything to come after the d like David, Dana, Devin, Deidre , all of these would match and be returned. Now we have two working examples of SELECT statements. Check out the full capabilities of SELECT statements here .","title":"SELECT Statements"},{"location":"module-2/databaseIntro/#additional-resources","text":"YT, 365Science - 10 Min Intro to MySQL","title":"Additional Resources"},{"location":"module-2/databaseIntro/#know-your-docs","text":"MySQL Docs - SELECT","title":"Know Your Docs"},{"location":"module-2/mySql-WorkbenchSetup/","text":"MySQL Workbench Setup Overview We've just learned to use that tool called Postman. What that tool allows us to do is quickly test our server app without having to build a front-end app or use the curl command in our terminals. This is really handy because you can just focus on your server app, prove that routes work the way they're expected to and then build your front-end app using those same requests you prepare in Postman. In the same way, when we're building a database we don't want to worry about our server app code being buggy when we're proving that our database is setup and accepted requests as expected; we just want to prove the database is working then we can connect our server to it. The Database equivalent of Postman is MySQL Workbench . It's a stand-alone tool that allows us to setup, connect, query and manage a MySQL database with a graphical user interface (GUI). We are going to download this tool and connect to your database in GCP (Google Cloud Platform) now. Practice It Download MySQL Workbench Navigate to MySQL Workbench download Click \"Download Now\" At the bottom of the page select your system specs (Mac, Windows) Click the \"download\" button again and then click \"No thanks, just start my download\" on the next page When the download completes, install MySQL Workbench Start MySQL Workbench. For Windows Users For Older Mac Users download an early version of the workbench: https://downloads.mysql.com/archives/workbench/ and/or use this guide: https://www.macminivault.com/install-mysql-on-macos-high-sierra/ Connect MySQL Workbench Watch the video below on connecting and using the MySQL Workbench. The instructor is using Windows but it works the same for Macs. Your goal is to be able to connect to this pre-existing database: 1 2 3 Host: den1.mysql1.gear.host User: aca311week3day1 Password: Wq87E!7mUF~7 Know Your Docs MySQL Docs - Home Page","title":"MySQL Workbench"},{"location":"module-2/mySql-WorkbenchSetup/#mysql-workbench-setup","text":"","title":"MySQL Workbench Setup"},{"location":"module-2/mySql-WorkbenchSetup/#overview","text":"We've just learned to use that tool called Postman. What that tool allows us to do is quickly test our server app without having to build a front-end app or use the curl command in our terminals. This is really handy because you can just focus on your server app, prove that routes work the way they're expected to and then build your front-end app using those same requests you prepare in Postman. In the same way, when we're building a database we don't want to worry about our server app code being buggy when we're proving that our database is setup and accepted requests as expected; we just want to prove the database is working then we can connect our server to it. The Database equivalent of Postman is MySQL Workbench . It's a stand-alone tool that allows us to setup, connect, query and manage a MySQL database with a graphical user interface (GUI). We are going to download this tool and connect to your database in GCP (Google Cloud Platform) now.","title":"Overview"},{"location":"module-2/mySql-WorkbenchSetup/#practice-it","text":"","title":"Practice It"},{"location":"module-2/mySql-WorkbenchSetup/#download-mysql-workbench","text":"Navigate to MySQL Workbench download Click \"Download Now\" At the bottom of the page select your system specs (Mac, Windows) Click the \"download\" button again and then click \"No thanks, just start my download\" on the next page When the download completes, install MySQL Workbench Start MySQL Workbench. For Windows Users For Older Mac Users download an early version of the workbench: https://downloads.mysql.com/archives/workbench/ and/or use this guide: https://www.macminivault.com/install-mysql-on-macos-high-sierra/","title":"Download MySQL Workbench"},{"location":"module-2/mySql-WorkbenchSetup/#connect-mysql-workbench","text":"Watch the video below on connecting and using the MySQL Workbench. The instructor is using Windows but it works the same for Macs. Your goal is to be able to connect to this pre-existing database: 1 2 3 Host: den1.mysql1.gear.host User: aca311week3day1 Password: Wq87E!7mUF~7","title":"Connect MySQL Workbench"},{"location":"module-2/mySql-WorkbenchSetup/#know-your-docs","text":"MySQL Docs - Home Page","title":"Know Your Docs"},{"location":"module-2/setupDatabaseOnGCP/","text":"Hosting a Database on Google Cloud Platform Overview While we could run a database on our local computer the same way we've been running our server app on our computer this isn't a good idea simple because we'll soon be running a front-end app on our computer while developing. THAT WOULD BE 3 APPS running on our computer while we're still coding....not a good idea. In addition, we want our data to persist on a computer that's available globally, literally globally to all those with an internet connection. To do this we need to put our data in a database that is hosted on a service like Azure, AWS, or Google Cloud (GCP). The video below shows you how to sign-up and use GCP to host a MySQL database but before you jump into that let's first get a big picture of what we're doing. The Big Picture We're learning how to build servers using Express.js. These servers will serve data to our front-end app we build in 411, thus a full-stack application. But we need to have a database to keep up with our data. Today you're going to sign-up for a GCP account and get free credit to run what's called a virtual machine (VM). This is going to be called an instance in the video below. The instance will work just like your personal computer. It will be a computer running on a very large computer somewhere in the world. This credit will go toward paying for that computer to run and accept requests. Once your server is built you'll host it on GCP, AWS, Heroku, or where ever. This too will be on a computer/virtual machine that is running and accepting requests and sending requests to your database. Then you'll build your front-end app using React. This will also be its own app and will need to run on a virtual machine somewhere like AWS, Azure, etc. The Costs of Hosting All of this costs money! Hosting apps and websites is not free. It costs money. We introduce you to GCP because it's an industry standard like Azure and AWS. As you move through this program you will likely run our of credit. Don't agree to pay for more and you won't be charged more! However, as you approach graduation you might need to move your DB, Server App, and Front-end(Client) app from GCP to Heroku or AWS to save money. This is totally fine and we have instructions for both. Please talk to your instructors and mentors to make sure you're not paying too much money. Sign-up and Setup a Database on GCP","title":"DB on GCP"},{"location":"module-2/setupDatabaseOnGCP/#hosting-a-database-on-google-cloud-platform","text":"","title":"Hosting a Database on Google Cloud Platform"},{"location":"module-2/setupDatabaseOnGCP/#overview","text":"While we could run a database on our local computer the same way we've been running our server app on our computer this isn't a good idea simple because we'll soon be running a front-end app on our computer while developing. THAT WOULD BE 3 APPS running on our computer while we're still coding....not a good idea. In addition, we want our data to persist on a computer that's available globally, literally globally to all those with an internet connection. To do this we need to put our data in a database that is hosted on a service like Azure, AWS, or Google Cloud (GCP). The video below shows you how to sign-up and use GCP to host a MySQL database but before you jump into that let's first get a big picture of what we're doing.","title":"Overview"},{"location":"module-2/setupDatabaseOnGCP/#the-big-picture","text":"We're learning how to build servers using Express.js. These servers will serve data to our front-end app we build in 411, thus a full-stack application. But we need to have a database to keep up with our data. Today you're going to sign-up for a GCP account and get free credit to run what's called a virtual machine (VM). This is going to be called an instance in the video below. The instance will work just like your personal computer. It will be a computer running on a very large computer somewhere in the world. This credit will go toward paying for that computer to run and accept requests. Once your server is built you'll host it on GCP, AWS, Heroku, or where ever. This too will be on a computer/virtual machine that is running and accepting requests and sending requests to your database. Then you'll build your front-end app using React. This will also be its own app and will need to run on a virtual machine somewhere like AWS, Azure, etc.","title":"The Big Picture"},{"location":"module-2/setupDatabaseOnGCP/#the-costs-of-hosting","text":"All of this costs money! Hosting apps and websites is not free. It costs money. We introduce you to GCP because it's an industry standard like Azure and AWS. As you move through this program you will likely run our of credit. Don't agree to pay for more and you won't be charged more! However, as you approach graduation you might need to move your DB, Server App, and Front-end(Client) app from GCP to Heroku or AWS to save money. This is totally fine and we have instructions for both. Please talk to your instructors and mentors to make sure you're not paying too much money.","title":"The Costs of Hosting"},{"location":"module-2/setupDatabaseOnGCP/#sign-up-and-setup-a-database-on-gcp","text":"","title":"Sign-up and Setup a Database on GCP"},{"location":"module-2/sqlAndExpressjs/","text":"Adding SQL Statements to an Express Server Constant dripping hollows out a stone.\u2003\u2014Lucretius Overview Up to this point we've learned about two technologies: MySQL and Express, separately. Now it's time to put them both together. The APIs we create will need access to a database, and while running these statements in MySQL Workbench has helped us learn . . . it's time to move the operations into Node.js. There are two aspects we need to talk about when using MySQL in Express: connections and queries. We will talk about each concept independently. Connections When we connected to MySQL Workbench in the previous few classes, we created a single connection . In a single connection, MySQL statements are executed in sequence, one after another. That means if we write two statements ( UPDATE etc, SELECT etc) the program will run the first and then the second. This is great when using MySQL Workbench but in the APIs we are creating, people will be making requests too quickly for a single connection to keep up with. Two hundred people might call SELECT * FROM users at nearly identical times but could experience drastically different wait times based on whether or not they were the first person or the 200th person. That is because the 200th person needs to wait for the SELECT statement to run 199 times before it executes for them. We solve this by using connection pools . Connection pools are groups of connections . We can specify any arbitrary number that represents how many concurrent connections our database instance can accept at any given time and our application will use those connections until it reaches the maximum number of allowed connections. For example, we may create a connection pool and give it a \"connection limit\" of 100. Now in the previous example, if 200 people hit our API at the same exact time, nobody will have to wait for more than 2 SQL queries to be run because we can spread our 200 operations over 100 different connections. Here's an example of creating a connection pool with the Node package: mysql in Express: 1 2 3 4 5 6 7 8 9 // create a variable to reference the createPool method on the mysql package and give it attributes const pool = mysql . createPool ({ connectionLimit : 100 , host : 'localhost' , user : 'root' , password : 'password' , database : 'admin' }) We will also create a singleton (object that can only be instantiated once) to return this connection pool to us so that we don't accidentally create multiple connection pools. In the code below you'll notice an if() statement, this is what's creating the singleton object . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // sql/connection.js file const mysql = require ( 'mysql' ) class Connection { constructor () { if ( ! this . pool ) { console . log ( 'creating connection pool...' ) this . pool = mysql . createPool ({ connectionLimit : 100 , host : 'localhost' , user : 'root' , password : 'password' , database : 'admin' }) return this . pool } return this . pool } } const instance = new Connection () module . exports = instance ; It's asking, \"is this pool object already created? If so let's just return that object. If not let's create a new connection pool object.\" We'll see more on this in the homework assignment. To use the connection pool singleton object we import it into any file that needs it like this: 1 const pool = require ( './sql/connection' ); Queries Now that we have our connection pool set up, it's time to use it to query, or mutate if we need, our database. To do that we pass the appropriate MySQL command to the .query method on the pool object: pool.query as string. Typically this will happen inside our controllers, like the following: 1 2 3 4 5 6 7 8 9 // aControllerFile.js pool . query ( 'SELECT * FROM users' , ( err , rows ) => { if ( err ) { console . log ({ 'message' : 'Error occurred: ' + err }) return res . status ( 500 ). send ( 'An unexpected error occurred' ) } res . json ( rows ) }); The above will bring back all of the rows from the \"users\" table. One thing to note is that the MySQL NPM package doesn't (currently) make use of promises so the queries will be written as callbacks. In this example, if we see an error we are going to log it and then tell the user that something unexpected happened. Otherwise, we are going to return the rows from the dataset. What if you want to specify specific fields to bring back or specify fields to limit the query using a WHERE clause? You can do that as well. 1 2 3 4 5 6 7 8 9 10 11 let sql = \"SELECT ??, ?? FROM ?? WHERE ?? = ?\" ; const replacements = [ \"id\" , \"first_name\" , \"users\" , \"id\" , 1 ]; sql = mysql . format ( sql , replacement ); pool . query ( sql , ( err , rows ) => { if ( err ) { console . log ({ message : \"Error occorred: \" + err }); return res . status ( 500 ). send ( \"An unexpected error occurred\" ); } res . json ( rows ); }) What's happening on the first three lines? A few things, let's break them down: We're creating a string and saving it to a variable called sql . We could name it anything we want, maybe sqlString ...whatever. Inside that string we use question marks ( ?? ) & ( ? ) to act as \"variables\". These \"variables\" allow us to create dynamic queries, that is to say, \"We don't know what all of our users will request and therefore we can't create controllers for each of them, instead we'll program a few controllers to dynamically handle all of those requests.\" When we build this string we're following the directions in the NPM MySQL Docs which says field names and table names get double question marks ( ?? ) and values get a single question mark ( ? ). Then we create an array called replacements filled with the values of our query. In this example they're statically placed but later you can create them dynamically based on the request. The order is important. Place the values in the order you want them appear in the string because after we pass them both through the .format method on the mysql object that SQL statement becomes: 1 SELECT id , first_name FROM users WHERE id = 1 Then we're using the .format method to put the string and array together into a single string that we can then pass as a SQL command to the .query method on the mysql object. You may be asking: Q: \"Why do we need to use this extra step? Couldn't we just write them in directly?\" A: Yep, you could but you won't be able to make it dynamically handle different types of requests. Q: \"But couldn't we use Template Literals to dynamically create a string for this instead?\" A: That would seem like the logical solution but using Template Literals would expose your server to a very really security threat called SQL Injection where a person could pass a truthy statement in at the end of the query and have all of your data returned to them! Q: So how does mysql.format() prevent that? A: The logic of this methods checks and cleans out sql injections and won't allow anything in that doesn't fit the string. Now you know. We're basically giving the .format method a SQL statement with some variables and an array of values to replace them with. It's important for you to understand the Node library package named MySQL . It has methods you can use to our advantage. One of them is the one you just saw: mysql.format() . Be sure to bookmark the NPM MySQL docs to keep them handy. Be sure to check out the Additional Resources Practice It Follow along with this video to create your own Express Server with the Node MySQL package: Video, Emily Moses@ACA - Setting up an Express Server w/MySQL Package Be sure to have this completed by the time you come into class. Additional Resources Tutorial, CodeForGeek - NodeJS & MySQL YT, Traversy Media - Using SQL in Express.js YT, Aman Karbanda - Node.js & SQL Connection Pool Video, Emily Moses@ACA - Setting up an Express Server w/MySQL Package Look ahead to the Questions for Student Led Discussion Know Your Docs NPM MySQL Docs - Home MDN Docs - title","title":"Adding SQL to Express"},{"location":"module-2/sqlAndExpressjs/#adding-sql-statements-to-an-express-server","text":"Constant dripping hollows out a stone.\u2003\u2014Lucretius","title":"Adding SQL Statements to an Express Server"},{"location":"module-2/sqlAndExpressjs/#overview","text":"Up to this point we've learned about two technologies: MySQL and Express, separately. Now it's time to put them both together. The APIs we create will need access to a database, and while running these statements in MySQL Workbench has helped us learn . . . it's time to move the operations into Node.js. There are two aspects we need to talk about when using MySQL in Express: connections and queries. We will talk about each concept independently.","title":"Overview"},{"location":"module-2/sqlAndExpressjs/#connections","text":"When we connected to MySQL Workbench in the previous few classes, we created a single connection . In a single connection, MySQL statements are executed in sequence, one after another. That means if we write two statements ( UPDATE etc, SELECT etc) the program will run the first and then the second. This is great when using MySQL Workbench but in the APIs we are creating, people will be making requests too quickly for a single connection to keep up with. Two hundred people might call SELECT * FROM users at nearly identical times but could experience drastically different wait times based on whether or not they were the first person or the 200th person. That is because the 200th person needs to wait for the SELECT statement to run 199 times before it executes for them. We solve this by using connection pools . Connection pools are groups of connections . We can specify any arbitrary number that represents how many concurrent connections our database instance can accept at any given time and our application will use those connections until it reaches the maximum number of allowed connections. For example, we may create a connection pool and give it a \"connection limit\" of 100. Now in the previous example, if 200 people hit our API at the same exact time, nobody will have to wait for more than 2 SQL queries to be run because we can spread our 200 operations over 100 different connections. Here's an example of creating a connection pool with the Node package: mysql in Express: 1 2 3 4 5 6 7 8 9 // create a variable to reference the createPool method on the mysql package and give it attributes const pool = mysql . createPool ({ connectionLimit : 100 , host : 'localhost' , user : 'root' , password : 'password' , database : 'admin' }) We will also create a singleton (object that can only be instantiated once) to return this connection pool to us so that we don't accidentally create multiple connection pools. In the code below you'll notice an if() statement, this is what's creating the singleton object . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // sql/connection.js file const mysql = require ( 'mysql' ) class Connection { constructor () { if ( ! this . pool ) { console . log ( 'creating connection pool...' ) this . pool = mysql . createPool ({ connectionLimit : 100 , host : 'localhost' , user : 'root' , password : 'password' , database : 'admin' }) return this . pool } return this . pool } } const instance = new Connection () module . exports = instance ; It's asking, \"is this pool object already created? If so let's just return that object. If not let's create a new connection pool object.\" We'll see more on this in the homework assignment. To use the connection pool singleton object we import it into any file that needs it like this: 1 const pool = require ( './sql/connection' );","title":"Connections"},{"location":"module-2/sqlAndExpressjs/#queries","text":"Now that we have our connection pool set up, it's time to use it to query, or mutate if we need, our database. To do that we pass the appropriate MySQL command to the .query method on the pool object: pool.query as string. Typically this will happen inside our controllers, like the following: 1 2 3 4 5 6 7 8 9 // aControllerFile.js pool . query ( 'SELECT * FROM users' , ( err , rows ) => { if ( err ) { console . log ({ 'message' : 'Error occurred: ' + err }) return res . status ( 500 ). send ( 'An unexpected error occurred' ) } res . json ( rows ) }); The above will bring back all of the rows from the \"users\" table. One thing to note is that the MySQL NPM package doesn't (currently) make use of promises so the queries will be written as callbacks. In this example, if we see an error we are going to log it and then tell the user that something unexpected happened. Otherwise, we are going to return the rows from the dataset. What if you want to specify specific fields to bring back or specify fields to limit the query using a WHERE clause? You can do that as well. 1 2 3 4 5 6 7 8 9 10 11 let sql = \"SELECT ??, ?? FROM ?? WHERE ?? = ?\" ; const replacements = [ \"id\" , \"first_name\" , \"users\" , \"id\" , 1 ]; sql = mysql . format ( sql , replacement ); pool . query ( sql , ( err , rows ) => { if ( err ) { console . log ({ message : \"Error occorred: \" + err }); return res . status ( 500 ). send ( \"An unexpected error occurred\" ); } res . json ( rows ); }) What's happening on the first three lines? A few things, let's break them down: We're creating a string and saving it to a variable called sql . We could name it anything we want, maybe sqlString ...whatever. Inside that string we use question marks ( ?? ) & ( ? ) to act as \"variables\". These \"variables\" allow us to create dynamic queries, that is to say, \"We don't know what all of our users will request and therefore we can't create controllers for each of them, instead we'll program a few controllers to dynamically handle all of those requests.\" When we build this string we're following the directions in the NPM MySQL Docs which says field names and table names get double question marks ( ?? ) and values get a single question mark ( ? ). Then we create an array called replacements filled with the values of our query. In this example they're statically placed but later you can create them dynamically based on the request. The order is important. Place the values in the order you want them appear in the string because after we pass them both through the .format method on the mysql object that SQL statement becomes: 1 SELECT id , first_name FROM users WHERE id = 1 Then we're using the .format method to put the string and array together into a single string that we can then pass as a SQL command to the .query method on the mysql object. You may be asking: Q: \"Why do we need to use this extra step? Couldn't we just write them in directly?\" A: Yep, you could but you won't be able to make it dynamically handle different types of requests. Q: \"But couldn't we use Template Literals to dynamically create a string for this instead?\" A: That would seem like the logical solution but using Template Literals would expose your server to a very really security threat called SQL Injection where a person could pass a truthy statement in at the end of the query and have all of your data returned to them! Q: So how does mysql.format() prevent that? A: The logic of this methods checks and cleans out sql injections and won't allow anything in that doesn't fit the string. Now you know. We're basically giving the .format method a SQL statement with some variables and an array of values to replace them with. It's important for you to understand the Node library package named MySQL . It has methods you can use to our advantage. One of them is the one you just saw: mysql.format() . Be sure to bookmark the NPM MySQL docs to keep them handy. Be sure to check out the Additional Resources","title":"Queries"},{"location":"module-2/sqlAndExpressjs/#practice-it","text":"Follow along with this video to create your own Express Server with the Node MySQL package: Video, Emily Moses@ACA - Setting up an Express Server w/MySQL Package Be sure to have this completed by the time you come into class.","title":"Practice It"},{"location":"module-2/sqlAndExpressjs/#additional-resources","text":"Tutorial, CodeForGeek - NodeJS & MySQL YT, Traversy Media - Using SQL in Express.js YT, Aman Karbanda - Node.js & SQL Connection Pool Video, Emily Moses@ACA - Setting up an Express Server w/MySQL Package Look ahead to the Questions for Student Led Discussion","title":"Additional Resources"},{"location":"module-2/sqlAndExpressjs/#know-your-docs","text":"NPM MySQL Docs - Home MDN Docs - title","title":"Know Your Docs"},{"location":"module-2/sqlCRUD/","text":"The SQL CRUD Commands Nothing contributes so much to tranquilize the mind as a steady purpose\u2014a point on which the soul may fix its intellectual eye.\u2003\u2014Mary Shelley Overview Last week we learned a lot about databases and SQL. We used SELECT to query data in a lot of different ways and we understand how tables provide relationships to our data. Today we are going to learn about the rest of the CRUD operations in SQL. Reminder: CRUD is an acronym that stands for: C reate, R ead, U pdate, D elete These are the basic operations we use to obtain and mutate (change) data. You'll hear this acronym used to reference APIs and, most frequently, database operations. You'll hear often that at the end of your course and by graduation you will have built a full-stack CRUD app. In terms of CRUD, we've already learned the \"R\" (read/ SELECT ). Now we will learn about INSERT /Create, UPDATE and DELETE . These operations will give us full control of our datasets. INSERT The INSERT command inserts an item (or a group of items) into the specified table. You can see bulk inserts in the initialize.sql file of your previous two homework assignments. An INSERT statement looks like this: 1 2 3 4 INSERT INTO users ( firstName , lastName , age ) VALUES ( 'matt' , 'miller' , 35 ); Notice how the values match up (in order) with the names of the fields. id firstName lastName age 1 bob brandy 55 2 sarah sassafrass 75 3 emily erlanger 25 Question: There's an \"id\" field on this table that we don't see in the INSERT command. Why doesn't the \"id\" field need to be written in the INSERT statement? Check out/Google the AUTO_INCREMENT keyword for the answer to this question. UPDATE The UPDATE command updates a row or set of rows that match a certain criteria. You can change one or more fields in the dataset as long as they aren't PRIMARY KEYS . 1 2 3 4 5 6 UPDATE users SET first_name = 'Artie' WHERE id = 3 ; The statement above changes (SETs) the first name of user 3 to \"Artie\": Artie erlanger . DELETE The DELETE command removes a row or group of rows that match a certain condition. It's important to be careful with the DELETE command because you could inadvertently remove too many rows if you aren't specific with your WHERE clause. When that happens there's no getting that data back, short of a DB backup, and that can be time consuming and also assumes that you backed up your database in the first place. That being said, a DELETE command looks like this: 1 2 3 4 DELETE FROM users WHERE id = 3 ; The statement above DELETE s the user from the users table whose ( WHERE ) id is equal to 3 . What if you wanted to DELETE multiple users by id : 1 2 3 4 DELETE FROM users WHERE id IN ( 3 , 4 , 5 ); That's great! Users 3, 4 and 5 have been deleted. Notice how the IN() looks like a function? You can pass multiple parameters to it. But our deletions are not limited to removing records by their id s. Everything we can do with the WHERE clause in SELECT applies to DELETE . 1 2 3 4 DELETE FROM users WHERE firstName LIKE 'a%' ; The above query deletes all users from the database whose first name starts with the letter 'a'. Hopefully we are starting to see how this can become dangerous. Don't attempt to run queries like this in a production environment. Instead, we would look to see if there is more specific criteria we could use. Practice It - SQL CRUD Follow the link to open this fiddle Work through the INSERT , UPDATE & DELETE statements provided Run each statement one at a time, leaving the others commented out Observe the results Get creative and try some SQL CRUD of your own, altering the statements to your liking Be sure to INSERT new data so that you can play longer. Additional Resources YT, the Bad Tutorials - SQL Tutorial 12: Inserting Data into Tables YT, the Bad Tutorials - SQL Tutorial 11: UPDATE YT, the Bad Tutorials - SQL Tutorial 22: DELETE Know Your Docs MySQL Docs - INSERT MySQL Docs - UPDATE MySQL Docs - DELETE W3S Docs - AUTO INCREMENT W3S Docs - SQL","title":"SQL CRUD"},{"location":"module-2/sqlCRUD/#the-sql-crud-commands","text":"Nothing contributes so much to tranquilize the mind as a steady purpose\u2014a point on which the soul may fix its intellectual eye.\u2003\u2014Mary Shelley","title":"The SQL CRUD Commands"},{"location":"module-2/sqlCRUD/#overview","text":"Last week we learned a lot about databases and SQL. We used SELECT to query data in a lot of different ways and we understand how tables provide relationships to our data. Today we are going to learn about the rest of the CRUD operations in SQL. Reminder: CRUD is an acronym that stands for: C reate, R ead, U pdate, D elete These are the basic operations we use to obtain and mutate (change) data. You'll hear this acronym used to reference APIs and, most frequently, database operations. You'll hear often that at the end of your course and by graduation you will have built a full-stack CRUD app. In terms of CRUD, we've already learned the \"R\" (read/ SELECT ). Now we will learn about INSERT /Create, UPDATE and DELETE . These operations will give us full control of our datasets.","title":"Overview"},{"location":"module-2/sqlCRUD/#insert","text":"The INSERT command inserts an item (or a group of items) into the specified table. You can see bulk inserts in the initialize.sql file of your previous two homework assignments. An INSERT statement looks like this: 1 2 3 4 INSERT INTO users ( firstName , lastName , age ) VALUES ( 'matt' , 'miller' , 35 ); Notice how the values match up (in order) with the names of the fields. id firstName lastName age 1 bob brandy 55 2 sarah sassafrass 75 3 emily erlanger 25 Question: There's an \"id\" field on this table that we don't see in the INSERT command. Why doesn't the \"id\" field need to be written in the INSERT statement? Check out/Google the AUTO_INCREMENT keyword for the answer to this question.","title":"INSERT"},{"location":"module-2/sqlCRUD/#update","text":"The UPDATE command updates a row or set of rows that match a certain criteria. You can change one or more fields in the dataset as long as they aren't PRIMARY KEYS . 1 2 3 4 5 6 UPDATE users SET first_name = 'Artie' WHERE id = 3 ; The statement above changes (SETs) the first name of user 3 to \"Artie\": Artie erlanger .","title":"UPDATE"},{"location":"module-2/sqlCRUD/#delete","text":"The DELETE command removes a row or group of rows that match a certain condition. It's important to be careful with the DELETE command because you could inadvertently remove too many rows if you aren't specific with your WHERE clause. When that happens there's no getting that data back, short of a DB backup, and that can be time consuming and also assumes that you backed up your database in the first place. That being said, a DELETE command looks like this: 1 2 3 4 DELETE FROM users WHERE id = 3 ; The statement above DELETE s the user from the users table whose ( WHERE ) id is equal to 3 . What if you wanted to DELETE multiple users by id : 1 2 3 4 DELETE FROM users WHERE id IN ( 3 , 4 , 5 ); That's great! Users 3, 4 and 5 have been deleted. Notice how the IN() looks like a function? You can pass multiple parameters to it. But our deletions are not limited to removing records by their id s. Everything we can do with the WHERE clause in SELECT applies to DELETE . 1 2 3 4 DELETE FROM users WHERE firstName LIKE 'a%' ; The above query deletes all users from the database whose first name starts with the letter 'a'. Hopefully we are starting to see how this can become dangerous. Don't attempt to run queries like this in a production environment. Instead, we would look to see if there is more specific criteria we could use.","title":"DELETE"},{"location":"module-2/sqlCRUD/#practice-it-sql-crud","text":"Follow the link to open this fiddle Work through the INSERT , UPDATE & DELETE statements provided Run each statement one at a time, leaving the others commented out Observe the results Get creative and try some SQL CRUD of your own, altering the statements to your liking Be sure to INSERT new data so that you can play longer.","title":"Practice It - SQL CRUD"},{"location":"module-2/sqlCRUD/#additional-resources","text":"YT, the Bad Tutorials - SQL Tutorial 12: Inserting Data into Tables YT, the Bad Tutorials - SQL Tutorial 11: UPDATE YT, the Bad Tutorials - SQL Tutorial 22: DELETE","title":"Additional Resources"},{"location":"module-2/sqlCRUD/#know-your-docs","text":"MySQL Docs - INSERT MySQL Docs - UPDATE MySQL Docs - DELETE W3S Docs - AUTO INCREMENT W3S Docs - SQL","title":"Know Your Docs"},{"location":"module-2/writingSELECTstatements/","text":"Writing Basic SELECT Statements Don't worry about doing everything in the following video. For now, just watch how SELECT statements work. Practice It - MySQL Follow the link to open this fiddle . We are going to attempt three different SELECT statements on the data. IMPORTANT: delete each statement after running it successfully as the sandbox can only run one SQL statement at a time. Select all of the users from the users table. This should return 8 users and you will see the id increment from 1-8 Select only the users where their age is greater than 25. This should return 6 users. (Matt & Amber excluded) Select only the users where their firstNames look like they begin with the letter \"d\". There should only be 2 users (Dan & Donald) Try returning all the users whose last name ends with 'y' Try returning all the users whose first name ends with 'e' Know Your Docs MySQL Docs - Workbench MySQL Docs - SELECT","title":"SELECT Statements"},{"location":"module-2/writingSELECTstatements/#writing-basic-select-statements","text":"Don't worry about doing everything in the following video. For now, just watch how SELECT statements work.","title":"Writing Basic SELECT Statements"},{"location":"module-2/writingSELECTstatements/#practice-it-mysql","text":"Follow the link to open this fiddle . We are going to attempt three different SELECT statements on the data. IMPORTANT: delete each statement after running it successfully as the sandbox can only run one SQL statement at a time. Select all of the users from the users table. This should return 8 users and you will see the id increment from 1-8 Select only the users where their age is greater than 25. This should return 6 users. (Matt & Amber excluded) Select only the users where their firstNames look like they begin with the letter \"d\". There should only be 2 users (Dan & Donald) Try returning all the users whose last name ends with 'y' Try returning all the users whose first name ends with 'e'","title":"Practice It - MySQL"},{"location":"module-2/writingSELECTstatements/#know-your-docs","text":"MySQL Docs - Workbench MySQL Docs - SELECT","title":"Know Your Docs"},{"location":"module-3/auth0-intro/","text":"Authentication with Auth0 As you've seen in the code snippets, there are third-party systems that most (small/medium size) businesses use to secure their Node.js applications without writing all of that logic themselves. It's important to know the concepts though and that's why it was introduced. With that being said, it's time to introduce Auth0 ! We're going to do this section tutorial-style since it's the easiest way to follow along. To start . . . the first thing we need to do is create an Auth0 account. Since Auth0 is a third-party application, they require registration and you can do that here: https://auth0.com/signup . All you need is an email and password and you can get a free account to work with. While you're signing up, leave all default options until you get to the \"account type\" section and then choose \"personal\". If prompted, select any \"role\" and \"challenge\" you want and click \"Create Account\". After your account is created you need to go to the \"APIs\" section and create an API associated with your specific project. So navigate to your dashboard: https://manage.auth0.com/dashboard/us/ , select \"APIs\" from the left menu, and click \"CREATE API\". The system will ask you for three things: Name , Identifier , and Signing Algorithm . Leave the signing algorithm alone use the following: 1 2 3 Name: My Express App Identifier: my-express-app Click \"CREATE\". Finally, in the upper right-hand corner where your avatar is . . . click the icon and then click settings. On the main page (under the \"General\" tab) scroll down until you see \"API Authorization Settings\". Set the default directory to \"Username-Password-Authentication\" and save your changes. This will help us avoid authentication problems later. Now that we have our Auth0 account set up we are going to leave the integration with our Node.js app for class work time. If you want to get ahead and really understand what's going on here we would recommend the following Auth0 tutorial: Tutorial, Auth0 - Secure Express Server Authentication with Auth0 is a way to safely handle authentication. With tools like becrypt or argon2 we can store hashes and use Auth0 to save our usernames and passwords securely and safely. Additional Resources YT, Traversy Media - Node.js API Authentication with JWT Know Your Docs JWT Docs - Home Page Tutorial, Auth0 - Node, Express, Authentication","title":"Auth0"},{"location":"module-3/auth0-intro/#authentication-with-auth0","text":"As you've seen in the code snippets, there are third-party systems that most (small/medium size) businesses use to secure their Node.js applications without writing all of that logic themselves. It's important to know the concepts though and that's why it was introduced. With that being said, it's time to introduce Auth0 ! We're going to do this section tutorial-style since it's the easiest way to follow along. To start . . . the first thing we need to do is create an Auth0 account. Since Auth0 is a third-party application, they require registration and you can do that here: https://auth0.com/signup . All you need is an email and password and you can get a free account to work with. While you're signing up, leave all default options until you get to the \"account type\" section and then choose \"personal\". If prompted, select any \"role\" and \"challenge\" you want and click \"Create Account\". After your account is created you need to go to the \"APIs\" section and create an API associated with your specific project. So navigate to your dashboard: https://manage.auth0.com/dashboard/us/ , select \"APIs\" from the left menu, and click \"CREATE API\". The system will ask you for three things: Name , Identifier , and Signing Algorithm . Leave the signing algorithm alone use the following: 1 2 3 Name: My Express App Identifier: my-express-app Click \"CREATE\". Finally, in the upper right-hand corner where your avatar is . . . click the icon and then click settings. On the main page (under the \"General\" tab) scroll down until you see \"API Authorization Settings\". Set the default directory to \"Username-Password-Authentication\" and save your changes. This will help us avoid authentication problems later. Now that we have our Auth0 account set up we are going to leave the integration with our Node.js app for class work time. If you want to get ahead and really understand what's going on here we would recommend the following Auth0 tutorial: Tutorial, Auth0 - Secure Express Server Authentication with Auth0 is a way to safely handle authentication. With tools like becrypt or argon2 we can store hashes and use Auth0 to save our usernames and passwords securely and safely.","title":"Authentication with Auth0"},{"location":"module-3/auth0-intro/#additional-resources","text":"YT, Traversy Media - Node.js API Authentication with JWT","title":"Additional Resources"},{"location":"module-3/auth0-intro/#know-your-docs","text":"JWT Docs - Home Page Tutorial, Auth0 - Node, Express, Authentication","title":"Know Your Docs"},{"location":"module-3/class-10/","text":"Class 10: Team API Hackathon Part 1 + Checkpoint Two We are still masters of our fate. We are still captains of our souls.\u2003\u2014Winston Churchill Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: The effectiveness of scrum as it pertains to working in a team on a singular project. Student Presentations Creation Time Wrap up API from last class Review scrum practices and practice them Turn In final teamAPI-PR assignment Review Checkpoint-2 Specs Blog to Show You Know Exit Recap, Attendance, and Reminders Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Finish working on the API from last class. There should be a little more team rhythm today as we have figured out how to work with each other best. Also, towards the end (especially with SQL), tasks can be broken down a little more granularly and many people can work on the API at once. API Hackathon - Project Instructions Continue work on the following repository: API HACKATHON Make sure tickets are being moved across the Trello board when they are completed. Checkpoint Two - Data Model for your Capstone App Throughout this course and the next you will begin giving consideration to (and building) your final/Capstone App. The data need for this app will be the focus of this Checkpoint 2. You are going to lay out the data model that you'll use in our final project/Capstone App. You might be creating an ecommerce project, or a weather app, or perhaps you don't even know what you want to create. This is the time to figure it out. ( Hopefully not because you've been doing presentations over the app ) To complete this Checkpoint you'll need to plan the API for the app and build the data model. Checklist GitHub Repo named after your Capstone App's title. List of Data Needs in README.md . Tables, Fields, and Relationships listed in README.md . Copy of ER diagrams saved in Repo. Steps to create DB on GCP Instance, How to connect to it with Workbench, and how to seed it with data written in README.md . Files with SQL commands to initialize the data. Instructions Decide what the focus of your final project will be. Write it down. Create a name for this app/project. Create new repo titled the name of your app with a README.md file. In the README.md , list out the data you think you'll need for this app. Categorize the data into tables Define relationships between those tables Using any digital tool you like, construct an ER diagram that communicates those tables, their relationships and their fields/properties. Save a copy of this ER Diagram in the repo. Review the steps to create a DB, connect to it, seed it with data and write them down in the README.md . Write the SQL Commands that would create the tables in files named after the data like: userSeedData.sql , carSeedData.sql , productSeedData.sql , etc... Store those files in the repo Upload the repo's link to the Checkpoint-2 Assignment Here's a good resource to get you writing Markdown quickly ! Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create TEAM-API-Hackathon Assignment (if you haven't already) Checkpoint-2 Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 10 Hackathon pt. 2"},{"location":"module-3/class-10/#class-10-team-api-hackathon-part-1-checkpoint-two","text":"We are still masters of our fate. We are still captains of our souls.\u2003\u2014Winston Churchill","title":"Class 10: Team API Hackathon Part 1 + Checkpoint Two"},{"location":"module-3/class-10/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: The effectiveness of scrum as it pertains to working in a team on a singular project. Student Presentations Creation Time Wrap up API from last class Review scrum practices and practice them Turn In final teamAPI-PR assignment Review Checkpoint-2 Specs Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-10/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-10/#creation-time-60-90-mins","text":"Finish working on the API from last class. There should be a little more team rhythm today as we have figured out how to work with each other best. Also, towards the end (especially with SQL), tasks can be broken down a little more granularly and many people can work on the API at once.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-10/#api-hackathon-project-instructions","text":"Continue work on the following repository: API HACKATHON Make sure tickets are being moved across the Trello board when they are completed.","title":"API Hackathon - Project Instructions"},{"location":"module-3/class-10/#checkpoint-two-data-model-for-your-capstone-app","text":"Throughout this course and the next you will begin giving consideration to (and building) your final/Capstone App. The data need for this app will be the focus of this Checkpoint 2. You are going to lay out the data model that you'll use in our final project/Capstone App. You might be creating an ecommerce project, or a weather app, or perhaps you don't even know what you want to create. This is the time to figure it out. ( Hopefully not because you've been doing presentations over the app ) To complete this Checkpoint you'll need to plan the API for the app and build the data model.","title":"Checkpoint Two - Data Model for your Capstone App"},{"location":"module-3/class-10/#checklist","text":"GitHub Repo named after your Capstone App's title. List of Data Needs in README.md . Tables, Fields, and Relationships listed in README.md . Copy of ER diagrams saved in Repo. Steps to create DB on GCP Instance, How to connect to it with Workbench, and how to seed it with data written in README.md . Files with SQL commands to initialize the data.","title":"Checklist"},{"location":"module-3/class-10/#instructions","text":"Decide what the focus of your final project will be. Write it down. Create a name for this app/project. Create new repo titled the name of your app with a README.md file. In the README.md , list out the data you think you'll need for this app. Categorize the data into tables Define relationships between those tables Using any digital tool you like, construct an ER diagram that communicates those tables, their relationships and their fields/properties. Save a copy of this ER Diagram in the repo. Review the steps to create a DB, connect to it, seed it with data and write them down in the README.md . Write the SQL Commands that would create the tables in files named after the data like: userSeedData.sql , carSeedData.sql , productSeedData.sql , etc... Store those files in the repo Upload the repo's link to the Checkpoint-2 Assignment Here's a good resource to get you writing Markdown quickly !","title":"Instructions"},{"location":"module-3/class-10/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-10/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-10/#exit-recap-attendance-and-reminders-5-mins","text":"Create TEAM-API-Hackathon Assignment (if you haven't already) Checkpoint-2 Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-11/","text":"Class 11: Data Modeling with ER Diagrams Do not wait to strike till the iron is hot; but make it hot by striking.\u2003\u2014William B. Sprague Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using Google Cloud to create an instance of a database Configuring and importing data How to create a visual aid for data modeling, ER diagram Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the ER Diagrams Repo Configure and import data Create an ER diagram Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins We should have followed the pre-work and gained a deeper understanding surrounding ER diagrams and how to read them. In today's class we will import a sample database from MySQL and create an ER diagram. We will then answer some questions about it in order to re-enforce our understanding. Fork and clone the following repository: ER Diagrams Follow the README to import data, create an ER diagram and answer questions about it YT, Coding Passive Income - MySQL Triggers Push Yourself Further Read this article to understand database triggers . Follow along in MySQL Workbench to create the example described in the article Note: triggers can be dangerous because they are basically \"set and forget\". Make sure your database is well documented Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create ERD Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 11 Data Modeling"},{"location":"module-3/class-11/#class-11-data-modeling-with-er-diagrams","text":"Do not wait to strike till the iron is hot; but make it hot by striking.\u2003\u2014William B. Sprague","title":"Class 11: Data Modeling with ER Diagrams"},{"location":"module-3/class-11/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using Google Cloud to create an instance of a database Configuring and importing data How to create a visual aid for data modeling, ER diagram Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the ER Diagrams Repo Configure and import data Create an ER diagram Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-11/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-11/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-11/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-11/#creation-time-60-90-mins","text":"We should have followed the pre-work and gained a deeper understanding surrounding ER diagrams and how to read them. In today's class we will import a sample database from MySQL and create an ER diagram. We will then answer some questions about it in order to re-enforce our understanding. Fork and clone the following repository: ER Diagrams Follow the README to import data, create an ER diagram and answer questions about it YT, Coding Passive Income - MySQL Triggers","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-11/#push-yourself-further","text":"Read this article to understand database triggers . Follow along in MySQL Workbench to create the example described in the article Note: triggers can be dangerous because they are basically \"set and forget\". Make sure your database is well documented","title":"Push Yourself Further"},{"location":"module-3/class-11/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-11/#exit-recap-attendance-and-reminders-5-mins","text":"Create ERD Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-12/","text":"Class 12: Authentication in Express Fortune favors the brave.\u2003\u2014Publius Terence Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: JWT Authentication Logging in to a server Using Postman to test their authentication route Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time As a class make sure everyone has a Auth0 account and it is correctly setup Study the example screenshots together Fork and clone the 311_wk6_day2_authentication Repo Follow the instructions in the README.md file to create authentication routes Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Use these examples and the instructions in the README.md file of the repo to add authentication to the API. Fork and clone the following repository: Express Authentication Follow the README to create middleware for your routes YT, SelfTuts - Middleware in Express Push Yourself Further Read the Express doc on configuring middleware for your applications Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Express Authentication Assignment Create Class 12 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 12 Express Authentication"},{"location":"module-3/class-12/#class-12-authentication-in-express","text":"Fortune favors the brave.\u2003\u2014Publius Terence","title":"Class 12: Authentication in Express"},{"location":"module-3/class-12/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: JWT Authentication Logging in to a server Using Postman to test their authentication route Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time As a class make sure everyone has a Auth0 account and it is correctly setup Study the example screenshots together Fork and clone the 311_wk6_day2_authentication Repo Follow the instructions in the README.md file to create authentication routes Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-12/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-12/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-12/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-12/#creation-time-60-90-mins","text":"Use these examples and the instructions in the README.md file of the repo to add authentication to the API. Fork and clone the following repository: Express Authentication Follow the README to create middleware for your routes YT, SelfTuts - Middleware in Express","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-12/#push-yourself-further","text":"Read the Express doc on configuring middleware for your applications","title":"Push Yourself Further"},{"location":"module-3/class-12/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-12/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-12/#exit-recap-attendance-and-reminders-5-mins","text":"Create Express Authentication Assignment Create Class 12 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-9/","text":"Class 9: Hackathon In doubtful matters boldness is everything.\u2003\u2014Publilius Syrus Instructor Notes Dear INSTRUCTOR: Use this repo to guide the class Sprint Planning Meeting. Create a trello board either on ACA or your personal account to invite the class to. Members should create the tickets and assign themselves to it. Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using an Agile approach to build an API as a team Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Discuss Scrum and Agile approach Create Trello accounts and invite team members Fork and clone the API Hackathon Repo Hold first sprint planning meeting Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we will create Trello accounts (if you haven't already done so) and gain access to the ACA_311_HACKATHON Trello board. Creating a Trello Account Create a Trello account by navigating to Trello and clicking the \"Sign Up\" button on the top right. Sign up with either traditional or Google authentication. Use the same email as the one you signed up with Zollege & Canvas! Paste the email you used to sign up for Trello in the class RocketChat so that the instructor can \"invite\" you to the board ( ACA_Hackathon ). The RocketChat message should look like this: Trello access - <EMAIL ADDRESS> Start looking at the tasks on the list and deciding who will do what. You can be assigning yourself to the tickets that you think you can handle. Each person should have an even amount of tickets (or close). You should also get a feel for which order you believe the tasks need to happen in. Obviously choose the first tasks first. For example, you must set up Express before you can begin building routes or integrating MySQL. Don't worry, the instructor will act as an over-arching project manager for this assignment. Project Instructions We will use the following repo for both days this week. We will start work on the API today and finish next class. The API Hackathon is intended to re-enforce concepts and make you very comfortable creating these in the future. Your role as a full-stack or back-end developer will depend partially on this skill set. Fork and clone the following repository: API HACKATHON Follow the README and Trello board to create a Node/Express API with MySQL from scratch. Note: There is no follow-up video or further learning this week Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create TEAM-API-Hackathon Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 9 Hackathon pt. 1"},{"location":"module-3/class-9/#class-9-hackathon","text":"In doubtful matters boldness is everything.\u2003\u2014Publilius Syrus","title":"Class 9: Hackathon"},{"location":"module-3/class-9/#instructor-notes","text":"Dear INSTRUCTOR: Use this repo to guide the class Sprint Planning Meeting. Create a trello board either on ACA or your personal account to invite the class to. Members should create the tickets and assign themselves to it.","title":"Instructor Notes"},{"location":"module-3/class-9/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Using an Agile approach to build an API as a team Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Discuss Scrum and Agile approach Create Trello accounts and invite team members Fork and clone the API Hackathon Repo Hold first sprint planning meeting Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-9/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-9/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-9/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-9/#creation-time-60-90-mins","text":"Today we will create Trello accounts (if you haven't already done so) and gain access to the ACA_311_HACKATHON Trello board.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-9/#creating-a-trello-account","text":"Create a Trello account by navigating to Trello and clicking the \"Sign Up\" button on the top right. Sign up with either traditional or Google authentication. Use the same email as the one you signed up with Zollege & Canvas! Paste the email you used to sign up for Trello in the class RocketChat so that the instructor can \"invite\" you to the board ( ACA_Hackathon ). The RocketChat message should look like this: Trello access - <EMAIL ADDRESS> Start looking at the tasks on the list and deciding who will do what. You can be assigning yourself to the tickets that you think you can handle. Each person should have an even amount of tickets (or close). You should also get a feel for which order you believe the tasks need to happen in. Obviously choose the first tasks first. For example, you must set up Express before you can begin building routes or integrating MySQL. Don't worry, the instructor will act as an over-arching project manager for this assignment.","title":"Creating a Trello Account"},{"location":"module-3/class-9/#project-instructions","text":"We will use the following repo for both days this week. We will start work on the API today and finish next class. The API Hackathon is intended to re-enforce concepts and make you very comfortable creating these in the future. Your role as a full-stack or back-end developer will depend partially on this skill set. Fork and clone the following repository: API HACKATHON Follow the README and Trello board to create a Node/Express API with MySQL from scratch. Note: There is no follow-up video or further learning this week","title":"Project Instructions"},{"location":"module-3/class-9/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-9/#exit-recap-attendance-and-reminders-5-mins","text":"Create TEAM-API-Hackathon Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/dataModelsWithERDiagrams/","text":"Data Modeling with ER Diagrams Strong lives are motivated by dynamic purposes.\u2003\u2014Kenneth Hildebrand Overview At this point we have most of the knowledge needed for creating APIs. We've practiced this numerous times and you should be getting familiar with the process. Now we're going to take a break and do a deeper dive into the ER (Entity Relationship) diagrams we first looked at last week. Data Modeling Data modeling is the process of creating a data model for the relationships in your database. The data model emphasizes what data is needed and how it should be organized in a visual manner. In a nutshell, we want to make sure all data objects are accurately represented well before we write any code! One of the most common ways to do this is through the use of an ER diagram. Entity Relationship Model An Entity Relationship diagram uses UML Notation to visualize the relationships between our tables. UML stands for Unified Modeling Language and it is basically the go-to for designing object-oriented systems. Remember our ER diagram from Week 3 . . . Breaking Down the ER Diagram In the diagram above, the rectangles with our table names on them (usersContact) are called entities . It's just an object that represents some sort of important data. The table, once saved in the database would accept and store multiple entities with these fields /properties on them. Inside of the entity we see the attributes that correspond to our tables. Those are the field /column names and there may be symbols next to those fields. In fact, there is generally a symbol there that gives us some information about the field's responsibility. If it has a key icon, for example, that indicates that the field is the primary key . You can see a list of other field icons here . Here's another diagram to look at. Notice the icons on these tables. Cardinality The last thing we need to talk about in order to understand our ER diagrams is cardinality . Cardinality refers to the type of relationships that we maintain between our entities. These types of relationships are how we can enforce data integrity throughout our database. For example, I can't assign a userId on a child table like usersContacts to an id that DOESN'T EXIST on the parent table users. But what cardinality is really talking about is the max or min number of relationships that can be maintained between two entities. For example, a \"user\" can have multiple \"userContacts\" but only one \"usersAddress\". These relationships are usually described as \"one-to-many\" , \"one-to-one\" , or \"many-to-many\" . The lines between the entities and the small notations at the end of them dictate these relationships. Source: LucidCharts Let's look at the data from the \"employees\" database above: Follow the line between the \"employees\" table to the \"salaries\" table. Starting at the \"employees\" table we see a double hashmark, this means that the relationship an entity in the \"employees\" table can have one and only one relationship with what ever table its connected to on this line. at the other end of that line connected to the \"salaries\" table we see a trident and a hash mark. This means that each entity in this table can have one or many relationships with entities in the table it's connected to. Summary: Each employee can have one and only one salary. But a salary amount could be given to one or, even, all of the employees. Going further, looking at the \"salaries\" table we can see that there are from_date and to_date fields. So it looks like that table holds a history of each salary an employee has had over the course of some time. Are we starting to understand how to read these? You can see more cardinality symbols on the bottom of this page . To further illustrate, take a look at the \"departments\" entity. Notice the double hash and trident lines? This shows that each \"department\" can have only one \"title\" but multiple \"dept_emp\" (department employees). Determining our Data Model Most of the information above assumes you already have a working database, or at least a couple tables. We've talked about how to read/interpret our diagrams and in our homework assignment today we will work on creating an ER diagram, but let's take a second to talk about modeling the data that these diagrams come from. NOTE: data modeling is a broad subject. We will discuss only what's most important for us at this level. Let's now assume that we are starting completely from scratch. We do not have a database set up at this point but we know we are going to use MySQL. We will want to take the following actions: Understand the company's industry We need to know what we are building. Having an understanding of our business model will help us determine what our entities will be. Identify our entities What tables do we think we will need to create? If I am in the ecommerce space I will probably want a table called customers . Identify our attributes Now that we have our tables it's time to determine what fields should exist on those tables. Every \"customer\" should definitely have an id , but what else? We might want to know the customers' first and last names and probably some contact information. Identify our relationships We have a \"customers\" table and because we know that customers will place orders, we've also gone ahead and created an \"orders\" table. Each table has its own set of attributes but how are they related? What's the cardinality? Well . . . if we assume that any customer can have multiple orders (that would make sense, right?) then we know that we have established a \"one-to-many\" relationship. This is the thought process you will go through as you develop MySQL databases on your own. It may seem simple or it may seem complicated but data modeling is an important part of the development process and a good skill to have. Always begin by drawing it out on paper so you have a good visual understanding of your database's needs. Practice It Re-create the above diagram on Draw.io Find the elements you need under the \"Entity Relation\" tab on the left toolbar Hint: You can use an SQL statement to have the app automatically create the entities (tables) for you . . . Additional Resources YT, LucidChart - ERD Tutorial pt. 2 Article, TutorialsPoint - UML Notation Know Your Docs LucidChart Docs - ER Diagrams LucidChart - ERD Symbols Forum, StackOverflow - Column Icon Meanings","title":"ERDs/Data Modeling"},{"location":"module-3/dataModelsWithERDiagrams/#data-modeling-with-er-diagrams","text":"Strong lives are motivated by dynamic purposes.\u2003\u2014Kenneth Hildebrand","title":"Data Modeling with ER Diagrams"},{"location":"module-3/dataModelsWithERDiagrams/#overview","text":"At this point we have most of the knowledge needed for creating APIs. We've practiced this numerous times and you should be getting familiar with the process. Now we're going to take a break and do a deeper dive into the ER (Entity Relationship) diagrams we first looked at last week.","title":"Overview"},{"location":"module-3/dataModelsWithERDiagrams/#data-modeling","text":"Data modeling is the process of creating a data model for the relationships in your database. The data model emphasizes what data is needed and how it should be organized in a visual manner. In a nutshell, we want to make sure all data objects are accurately represented well before we write any code! One of the most common ways to do this is through the use of an ER diagram.","title":"Data Modeling"},{"location":"module-3/dataModelsWithERDiagrams/#entity-relationship-model","text":"An Entity Relationship diagram uses UML Notation to visualize the relationships between our tables. UML stands for Unified Modeling Language and it is basically the go-to for designing object-oriented systems. Remember our ER diagram from Week 3 . . .","title":"Entity Relationship Model"},{"location":"module-3/dataModelsWithERDiagrams/#breaking-down-the-er-diagram","text":"In the diagram above, the rectangles with our table names on them (usersContact) are called entities . It's just an object that represents some sort of important data. The table, once saved in the database would accept and store multiple entities with these fields /properties on them. Inside of the entity we see the attributes that correspond to our tables. Those are the field /column names and there may be symbols next to those fields. In fact, there is generally a symbol there that gives us some information about the field's responsibility. If it has a key icon, for example, that indicates that the field is the primary key . You can see a list of other field icons here . Here's another diagram to look at. Notice the icons on these tables.","title":"Breaking Down the ER Diagram"},{"location":"module-3/dataModelsWithERDiagrams/#cardinality","text":"The last thing we need to talk about in order to understand our ER diagrams is cardinality . Cardinality refers to the type of relationships that we maintain between our entities. These types of relationships are how we can enforce data integrity throughout our database. For example, I can't assign a userId on a child table like usersContacts to an id that DOESN'T EXIST on the parent table users. But what cardinality is really talking about is the max or min number of relationships that can be maintained between two entities. For example, a \"user\" can have multiple \"userContacts\" but only one \"usersAddress\". These relationships are usually described as \"one-to-many\" , \"one-to-one\" , or \"many-to-many\" . The lines between the entities and the small notations at the end of them dictate these relationships. Source: LucidCharts Let's look at the data from the \"employees\" database above: Follow the line between the \"employees\" table to the \"salaries\" table. Starting at the \"employees\" table we see a double hashmark, this means that the relationship an entity in the \"employees\" table can have one and only one relationship with what ever table its connected to on this line. at the other end of that line connected to the \"salaries\" table we see a trident and a hash mark. This means that each entity in this table can have one or many relationships with entities in the table it's connected to. Summary: Each employee can have one and only one salary. But a salary amount could be given to one or, even, all of the employees. Going further, looking at the \"salaries\" table we can see that there are from_date and to_date fields. So it looks like that table holds a history of each salary an employee has had over the course of some time. Are we starting to understand how to read these? You can see more cardinality symbols on the bottom of this page . To further illustrate, take a look at the \"departments\" entity. Notice the double hash and trident lines? This shows that each \"department\" can have only one \"title\" but multiple \"dept_emp\" (department employees).","title":"Cardinality"},{"location":"module-3/dataModelsWithERDiagrams/#determining-our-data-model","text":"Most of the information above assumes you already have a working database, or at least a couple tables. We've talked about how to read/interpret our diagrams and in our homework assignment today we will work on creating an ER diagram, but let's take a second to talk about modeling the data that these diagrams come from. NOTE: data modeling is a broad subject. We will discuss only what's most important for us at this level. Let's now assume that we are starting completely from scratch. We do not have a database set up at this point but we know we are going to use MySQL. We will want to take the following actions: Understand the company's industry We need to know what we are building. Having an understanding of our business model will help us determine what our entities will be. Identify our entities What tables do we think we will need to create? If I am in the ecommerce space I will probably want a table called customers . Identify our attributes Now that we have our tables it's time to determine what fields should exist on those tables. Every \"customer\" should definitely have an id , but what else? We might want to know the customers' first and last names and probably some contact information. Identify our relationships We have a \"customers\" table and because we know that customers will place orders, we've also gone ahead and created an \"orders\" table. Each table has its own set of attributes but how are they related? What's the cardinality? Well . . . if we assume that any customer can have multiple orders (that would make sense, right?) then we know that we have established a \"one-to-many\" relationship. This is the thought process you will go through as you develop MySQL databases on your own. It may seem simple or it may seem complicated but data modeling is an important part of the development process and a good skill to have. Always begin by drawing it out on paper so you have a good visual understanding of your database's needs.","title":"Determining our Data Model"},{"location":"module-3/dataModelsWithERDiagrams/#practice-it","text":"Re-create the above diagram on Draw.io Find the elements you need under the \"Entity Relation\" tab on the left toolbar Hint: You can use an SQL statement to have the app automatically create the entities (tables) for you . . .","title":"Practice It"},{"location":"module-3/dataModelsWithERDiagrams/#additional-resources","text":"YT, LucidChart - ERD Tutorial pt. 2 Article, TutorialsPoint - UML Notation","title":"Additional Resources"},{"location":"module-3/dataModelsWithERDiagrams/#know-your-docs","text":"LucidChart Docs - ER Diagrams LucidChart - ERD Symbols Forum, StackOverflow - Column Icon Meanings","title":"Know Your Docs"},{"location":"module-3/envOverview/","text":"Dotenv Explained Hi everyone, Today were going to be explaining what .env variables are and how to use them in further projects. first off a .env file is just a file named .env when you make this file it will be the secure place to store all of your sensitive data variables. Such as API-keys or anything that you don't want a hacker or just anyone knowing about. How to use In your terminal type npm install dotenv Create a touch .env file in the top directory of the repo your working in. to store variables in the file use this format. 1 2 PORT=3001 API_KEY=thisIsMyApiKey to use dotenv require it with this code require('dotenv').config() or import it import dotenv from 'dotenv' to use variables set in the .env file simply use process.env.API_KEY when you use this code it accesses the file and finds the variable by name. You can use a variable at the top of your file like this to allow for quick usage in your files. 1 const apiKey = process . env . API_KEY More explained Now that you have your secret variable stored you can use it in different files but also keep it hidden from others. Another side note is you always want to un-track your .env file when pushing to github or the better way is to create a .gitignore file. When you use a .gitignore file just place the name of the file you want ignored in the ignore file. From now on when you push to github it wont push this file up. .gitignore file 1 .env Extra Tips When using .env don't make more than one file and NEVER COMMIT. Also its important to just have a single .env file Not multiple. Video Overview Additional Resources Know Your Docs NPM docs - dotenv","title":".env Overview"},{"location":"module-3/envOverview/#dotenv-explained","text":"Hi everyone, Today were going to be explaining what .env variables are and how to use them in further projects. first off a .env file is just a file named .env when you make this file it will be the secure place to store all of your sensitive data variables. Such as API-keys or anything that you don't want a hacker or just anyone knowing about.","title":"Dotenv Explained"},{"location":"module-3/envOverview/#how-to-use","text":"In your terminal type npm install dotenv Create a touch .env file in the top directory of the repo your working in. to store variables in the file use this format. 1 2 PORT=3001 API_KEY=thisIsMyApiKey to use dotenv require it with this code require('dotenv').config() or import it import dotenv from 'dotenv' to use variables set in the .env file simply use process.env.API_KEY when you use this code it accesses the file and finds the variable by name. You can use a variable at the top of your file like this to allow for quick usage in your files. 1 const apiKey = process . env . API_KEY","title":"How to use"},{"location":"module-3/envOverview/#more-explained","text":"Now that you have your secret variable stored you can use it in different files but also keep it hidden from others. Another side note is you always want to un-track your .env file when pushing to github or the better way is to create a .gitignore file. When you use a .gitignore file just place the name of the file you want ignored in the ignore file. From now on when you push to github it wont push this file up.","title":"More explained"},{"location":"module-3/envOverview/#gitignore-file","text":"1 .env","title":".gitignore file"},{"location":"module-3/envOverview/#extra-tips","text":"When using .env don't make more than one file and NEVER COMMIT. Also its important to just have a single .env file Not multiple.","title":"Extra Tips"},{"location":"module-3/envOverview/#video-overview","text":"","title":"Video Overview"},{"location":"module-3/envOverview/#additional-resources","text":"","title":"Additional Resources"},{"location":"module-3/envOverview/#know-your-docs","text":"NPM docs - dotenv","title":"Know Your Docs"},{"location":"module-3/hackathon-APIreview/","text":"Hackathon API Review Believe with all of your heart that you will do what you were made to do.\u2003\u2014Orison Swett Marden Overview Last class we started working collaboratively to create our own APIs from scratch. We are going to elaborate on that work with the hopes of completing the APIs by the end of this class. Node + NPM We should set up a new project with Node/NPM, creating the necessary files in the project GitHub directory. Node + NPM Express We should create an Express app using routes and controllers. Express Routers Controllers MySQL We should set up and integrate MySQL so that we can query and mutate data from a database. Database Intro MySQL Workbench DB Setup on GCP Advanced SELECT SQL CRUD Express + MySQL Additional Resources Wikipedia - What is a database Article, PluralSight - Relational vs Non-relational Tutorial, MySQL Tutorials - Primary Key Tutorial, MySQL Tutorials - Unique Key Article, LogicalReads - Foreign Key Tutorial, CodeForGeek - MySQL Connection Know Your Docs Express.js Docs - Home Page NodeJS Docs - Home Page MySQL Doc - Home Page MySQL Docs - SELECT MySQL Docs - INSERT MySQL Docs - UPDATE MySQL Docs - DELETE NPM Docs - MySQL Package","title":"Hackathon API Review"},{"location":"module-3/hackathon-APIreview/#hackathon-api-review","text":"Believe with all of your heart that you will do what you were made to do.\u2003\u2014Orison Swett Marden","title":"Hackathon API Review"},{"location":"module-3/hackathon-APIreview/#overview","text":"Last class we started working collaboratively to create our own APIs from scratch. We are going to elaborate on that work with the hopes of completing the APIs by the end of this class.","title":"Overview"},{"location":"module-3/hackathon-APIreview/#node-npm","text":"We should set up a new project with Node/NPM, creating the necessary files in the project GitHub directory. Node + NPM","title":"Node + NPM"},{"location":"module-3/hackathon-APIreview/#express","text":"We should create an Express app using routes and controllers. Express Routers Controllers","title":"Express"},{"location":"module-3/hackathon-APIreview/#mysql","text":"We should set up and integrate MySQL so that we can query and mutate data from a database. Database Intro MySQL Workbench DB Setup on GCP Advanced SELECT SQL CRUD Express + MySQL","title":"MySQL"},{"location":"module-3/hackathon-APIreview/#additional-resources","text":"Wikipedia - What is a database Article, PluralSight - Relational vs Non-relational Tutorial, MySQL Tutorials - Primary Key Tutorial, MySQL Tutorials - Unique Key Article, LogicalReads - Foreign Key Tutorial, CodeForGeek - MySQL Connection","title":"Additional Resources"},{"location":"module-3/hackathon-APIreview/#know-your-docs","text":"Express.js Docs - Home Page NodeJS Docs - Home Page MySQL Doc - Home Page MySQL Docs - SELECT MySQL Docs - INSERT MySQL Docs - UPDATE MySQL Docs - DELETE NPM Docs - MySQL Package","title":"Know Your Docs"},{"location":"module-3/hackathonPrep/","text":"TITLE Knowing is not enough; we must apply. Willing is not enough; we must do.\u2003\u2014Johann Wolfgang von Goethe Overview At this point in the course we've recapped Node and NPM, worked with Express to set up a server with routes and controllers and spent some days learning the ins and outs of SQL. With this information we have the knowledge to build out most of an API, so this week we will work collaboratively on doing just that. Professional Team & Agile This week we will work as a team to create a robust API from start to finish. To do that we need to know a little bit about how professional teams work together. This knowledge will be incredibly useful for you as you enter the workplace. First an overview of Agile. Agile Agile is a process by where teams work in small cycles called sprints. These sprints usually last either one or two weeks and are designed to provide short feedback loops. In these feedback loops / sprints, teams gather requirements, create designs and begin coding a prototype or MVP (minimum viable product). Teams will then iterate on these ideas until a larger project goal is accomplished. During these sprints a number of things take place. These are more or less the rituals of scrum . Sprint Backlog Meeting In this meeting, the team gets together during the sprint to groom the work for the next sprint. This means flushing out the work to be done and getting any additional details (technological or otherwise) that haven't been provided. These backlog meetings are typically a week before the next sprint and they help move things along so that when it's time to come to the next meeting, sprint planning, everyone is already familiar with some of the tasks to be accomplished. Sprint Planning Meeting This is a meeting where the team discusses the amount of work they reasonably believe they can accomplish in the sprint. Tasks are broken out into individually releasable components that an individual developer can work on. Breaking it down into bite size pieces, as it were. Daily Standup Meeting Every day during the sprint the team gets together in a designated space and talks about the progress that is being made. These meetings are typically held standing up, hence the name \"standup\". The intention here is to keep the meetings short and to the point so that everyone can get back to work quickly. Everyone goes around the circle and answers three questions: What did you accomplish yesterday? What are you working on today? Are there any blockers the team should know about? Sprint Review/Demo Meeting This is where the team gets to show off the work that was accomplished during the sprint. Typically key stakeholders attend these demos. What are stakeholders? These are the people with a high amount of interest in the project. They will usually be product managers, executives or other forms of middle to senior management. Sprint Retrospective Meeting The retro meeting is meant to be an opportunity to look back on the sprint and decide how well things were laid out. Did the sprint go smoothly? Did we accomplish more or less than we initially planned? Why? Did any unforeseen events take place that blocked the team for an extended period of time? You should read more about Agile here . Team Organization Everything we've mentioned above has been designed to streamline development to the best of our ability, but how does it all get organized? How is the project managed? We use ticketing systems like Trello and JIRA . These tools help us keep track of issues in a Kanban board so that developers can see exactly who's working on what. The boards have different sections for the state of work that the task is in. For example, To Do , In Progress , PR , QA , Done . For the next week we will be using Trello to practice our use of a Kanban board to track our tickets. Using Trello to Organize Tasks Trello is a free software owned by Atlassian for doing exactly what was described above. The system is free but we will have to create a login for it. A board will be initially setup by ACA and the class will collaborate on it until the API is complete. We'll use this board to breakdown large ideas and concepts into smaller accomplishable tasks, then into tiny steps that will build that bridge from point-A to point-B. Let's introduce Trello , a free software owned by Atlassian for doing exactly what was described above by creating tiny draggable steps to keep you organized! With Trello we can create Swim Lanes . This is AGILE jargon for columns that represent the status of a task, i.e. inbox, doing, done, etc. Where, Inbox would mean a place team members could add things to be done. Doing , since your whole team works on one board, this show what tasks are being worked on and by who. Done , beyond the obvious here, it's also a place that could signal a team lead/code reviewer to review your latest Pull Request. Archived , after your teams has finished a code sprint you'll still want access to tasks that have been completed, when, and by who. Icebox , kept for a later date, this category is reserved for tasks that seem a little too extra or your team doesn't have bandwidth for right now. This is a good place to keep up with stretch goals. You should begin building your team board with these swim lanes or something very similar since this is what most companies practice. Practice It This new tool, Trello, is just to help you get & stay organized and help you communicate between each other. So get to learning about this new tool: Accounts are free but do require a sign-up. So let's get an account and a board created today! Navigate to the trello tutorial Click around on the cards and start to get familiar with this tool. Go answer your Questions for Student Discussion while you're here. Now click \"Sign-up\", create an account. Create a new board and set it up the way you've learned so far. Look ahead at the hackathon and start draft large tasks for you and your teammates. Additional Resources Article, Mountain Goat Software - Agile Overview YT, Simpletivity - 7 Things You Should Do with Every Trello Board Know Your Docs Trello Docs - Keyboard Shortcuts Trello Docs - How to Use Trello Like a Pro","title":"Hackathon Prep"},{"location":"module-3/hackathonPrep/#title","text":"Knowing is not enough; we must apply. Willing is not enough; we must do.\u2003\u2014Johann Wolfgang von Goethe","title":"TITLE"},{"location":"module-3/hackathonPrep/#overview","text":"At this point in the course we've recapped Node and NPM, worked with Express to set up a server with routes and controllers and spent some days learning the ins and outs of SQL. With this information we have the knowledge to build out most of an API, so this week we will work collaboratively on doing just that.","title":"Overview"},{"location":"module-3/hackathonPrep/#professional-team-agile","text":"This week we will work as a team to create a robust API from start to finish. To do that we need to know a little bit about how professional teams work together. This knowledge will be incredibly useful for you as you enter the workplace. First an overview of Agile.","title":"Professional Team &amp; Agile"},{"location":"module-3/hackathonPrep/#agile","text":"Agile is a process by where teams work in small cycles called sprints. These sprints usually last either one or two weeks and are designed to provide short feedback loops. In these feedback loops / sprints, teams gather requirements, create designs and begin coding a prototype or MVP (minimum viable product). Teams will then iterate on these ideas until a larger project goal is accomplished. During these sprints a number of things take place. These are more or less the rituals of scrum .","title":"Agile"},{"location":"module-3/hackathonPrep/#sprint-backlog-meeting","text":"In this meeting, the team gets together during the sprint to groom the work for the next sprint. This means flushing out the work to be done and getting any additional details (technological or otherwise) that haven't been provided. These backlog meetings are typically a week before the next sprint and they help move things along so that when it's time to come to the next meeting, sprint planning, everyone is already familiar with some of the tasks to be accomplished.","title":"Sprint Backlog Meeting"},{"location":"module-3/hackathonPrep/#sprint-planning-meeting","text":"This is a meeting where the team discusses the amount of work they reasonably believe they can accomplish in the sprint. Tasks are broken out into individually releasable components that an individual developer can work on. Breaking it down into bite size pieces, as it were.","title":"Sprint Planning Meeting"},{"location":"module-3/hackathonPrep/#daily-standup-meeting","text":"Every day during the sprint the team gets together in a designated space and talks about the progress that is being made. These meetings are typically held standing up, hence the name \"standup\". The intention here is to keep the meetings short and to the point so that everyone can get back to work quickly. Everyone goes around the circle and answers three questions: What did you accomplish yesterday? What are you working on today? Are there any blockers the team should know about?","title":"Daily Standup Meeting"},{"location":"module-3/hackathonPrep/#sprint-reviewdemo-meeting","text":"This is where the team gets to show off the work that was accomplished during the sprint. Typically key stakeholders attend these demos. What are stakeholders? These are the people with a high amount of interest in the project. They will usually be product managers, executives or other forms of middle to senior management.","title":"Sprint Review/Demo Meeting"},{"location":"module-3/hackathonPrep/#sprint-retrospective-meeting","text":"The retro meeting is meant to be an opportunity to look back on the sprint and decide how well things were laid out. Did the sprint go smoothly? Did we accomplish more or less than we initially planned? Why? Did any unforeseen events take place that blocked the team for an extended period of time? You should read more about Agile here .","title":"Sprint Retrospective Meeting"},{"location":"module-3/hackathonPrep/#team-organization","text":"Everything we've mentioned above has been designed to streamline development to the best of our ability, but how does it all get organized? How is the project managed? We use ticketing systems like Trello and JIRA . These tools help us keep track of issues in a Kanban board so that developers can see exactly who's working on what. The boards have different sections for the state of work that the task is in. For example, To Do , In Progress , PR , QA , Done . For the next week we will be using Trello to practice our use of a Kanban board to track our tickets.","title":"Team Organization"},{"location":"module-3/hackathonPrep/#using-trello-to-organize-tasks","text":"Trello is a free software owned by Atlassian for doing exactly what was described above. The system is free but we will have to create a login for it. A board will be initially setup by ACA and the class will collaborate on it until the API is complete. We'll use this board to breakdown large ideas and concepts into smaller accomplishable tasks, then into tiny steps that will build that bridge from point-A to point-B. Let's introduce Trello , a free software owned by Atlassian for doing exactly what was described above by creating tiny draggable steps to keep you organized! With Trello we can create Swim Lanes . This is AGILE jargon for columns that represent the status of a task, i.e. inbox, doing, done, etc. Where, Inbox would mean a place team members could add things to be done. Doing , since your whole team works on one board, this show what tasks are being worked on and by who. Done , beyond the obvious here, it's also a place that could signal a team lead/code reviewer to review your latest Pull Request. Archived , after your teams has finished a code sprint you'll still want access to tasks that have been completed, when, and by who. Icebox , kept for a later date, this category is reserved for tasks that seem a little too extra or your team doesn't have bandwidth for right now. This is a good place to keep up with stretch goals. You should begin building your team board with these swim lanes or something very similar since this is what most companies practice.","title":"Using Trello to Organize Tasks"},{"location":"module-3/hackathonPrep/#practice-it","text":"This new tool, Trello, is just to help you get & stay organized and help you communicate between each other. So get to learning about this new tool: Accounts are free but do require a sign-up. So let's get an account and a board created today! Navigate to the trello tutorial Click around on the cards and start to get familiar with this tool. Go answer your Questions for Student Discussion while you're here. Now click \"Sign-up\", create an account. Create a new board and set it up the way you've learned so far. Look ahead at the hackathon and start draft large tasks for you and your teammates.","title":"Practice It"},{"location":"module-3/hackathonPrep/#additional-resources","text":"Article, Mountain Goat Software - Agile Overview YT, Simpletivity - 7 Things You Should Do with Every Trello Board","title":"Additional Resources"},{"location":"module-3/hackathonPrep/#know-your-docs","text":"Trello Docs - Keyboard Shortcuts Trello Docs - How to Use Trello Like a Pro","title":"Know Your Docs"},{"location":"module-3/hashingAndTokens/","text":"Hashing and Tokens Now that we have the whole process fresh in our minds let's dive into the details. Checking the Password While it may seem like we could simply compare the password they put into the field to the one we stored in the database for them, its actually not that easy. The reason we can't do this is for security reason. Store Hash, not Plaintext We don't store plaintext passwords in databases in case our data is ever breach. If a hacker was able to get these usernames and plaintext passwords they'd have access to all of our users information immediately! Solution: To prevent this we run their plaintext password through an algorithm called MD5 to create what's called a hash . This process turns password into 5F4DCC3B5AA765D61D8327DEB882CF99 . The way we use this hash to check against the plaintext password they send to our server when signing inD is to pass it through the MD5 algorithm(function) and compare that function's return value to the hash stored in our database. Creating the Bearer Token Once their password has been compared against the hash in the database and verified we will need to send them that bearer token to use on all of their future requests. This is their \"wristband\" to the concert The bearer token is a special set of numbers and letters created with another algorithm called RFC 7519 that uses our server's key signature to prove that the token came from our server and our server alone, and that it wasn't falsely manufactured by another server or someone else's computer. This \"signature\" is really just a password we keep secret on our server that gets used only when tokens need to be signed. So far we've been using the term bearer token but this really refers to the token when it's being presented by the client/user to the server in the request. The other name for this special key is JWT , or JSON Web Token . Creating a JWT A JWT might look like this: 1 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c Look closely and you'll see two . These separate the token into three parts: Part Name Example Definition Header eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 includes information about the type , as in JWT, and the algorithm, alg , used to created it. Payload eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ the actual data stored in it, like the username & iat (issued at) which tells the time the token was issued. Signature SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c contains the hash of our server's key The provider of the Node package we'll be using to generate our signed JTWs has a really clear example on their homepage, JWT.io . Storing and Using the JWT As mentioned above, our server will send a response to the client that stores the token on the client's cookie storage. Then it will be up to the client(our 411 React Front-end app) to add the JWT as a bearer token in the requests. Reading the JWT Here is where we check for \"wristbands\". Once the request comes to our server it's going to be routed to the appropriate route but we only want authenticated users to access our resources so we'll add a function called something like checkForAuthToken or just checkAuth ; then we'll tell our Express server to .use() it to checkAuth entication. If the check passes (the token is there and valid) then we'll allow them to do the next() step, the route they requested . 1 2 3 4 5 6 7 8 9 app . use ( checkAuth () ) const checkAuth = ( req , res , next ) => { // some logic here if ( failed ) res . status ( 401 ). json ({ msg : \"invalid authentication\" }) const payload = < DECODED TOKEN > req . user = payload next () } This would protect ALL routes in our server. The next parameter tells the function to continue on to the next() function in the request. If we want to protect only some routes with authentication we would place it as the second argument in the route: 1 2 3 4 app . get ( \"/users\" , checkAuth , ( req , res ) => { // only gets here if authenticated // retrieve all users from the database }) The above function is pseudo-code but it is essentially saying, \"I'm looking for an Authorization header. If I don't find one then I'm going to return an un-authorized message. Otherwise I'm going to decode the token sent with the header and attach the contents to the request (req.user) so I know who made the request\". Calling the \"next()\" function is a successful end to the middleware function. This type of \"check\" is called middleware . Its meaning is in the word. We tell our server to .use() a function(software) in-between(middle) of the request and the resource. There are all sorts of types and purposes of middleware but this authentication check is the most commonly used technique. But Why? This is a good question! Why do we need to a JWT with a header, payload and signature? The answer to this question is security. Think way back to when we first learned about HTTP(S) and how the internet is possible because computers are all built to read the same language and use the same protocol(HTTP). This means that all information sent over wifi, fiber, coax, satellite or copper is available to all computers in-between you and the server you're talking to across the country. This space between you and that server or other computer is a very vulnerable space because it can be intercepted and read by many computers without you evening knowing. For this reason we have to encrypt the data we need to be private. Encryption is the act of \"scrambling\" the information in a mathematical way with a key only the sender and the receiver have. ...And this is the foundation of Cyber Security . With this in mind you might be thinking that creating your password hashes and bearer tokens is very difficult. It's actually not because we just use Node packages to generate them and we just tie them together to make them work for our app. 1 2 3 const jwksRsa = require ( 'jwks-rsa' ) const jwt = require ( 'express-jwt' ) const bcrypt = require ( 'bcrypt' ) In the next lesson we'll talk about lower level techniques of implementing these process. Additional Resources YT, Chris Courses - Hashing Passwords with Bcrypt NOTE: Industry standard is no longer bcrypt. Instead use Argon-2 . The process is the same.","title":"Hashing & Tokens"},{"location":"module-3/hashingAndTokens/#hashing-and-tokens","text":"Now that we have the whole process fresh in our minds let's dive into the details.","title":"Hashing and Tokens"},{"location":"module-3/hashingAndTokens/#checking-the-password","text":"While it may seem like we could simply compare the password they put into the field to the one we stored in the database for them, its actually not that easy. The reason we can't do this is for security reason.","title":"Checking the Password"},{"location":"module-3/hashingAndTokens/#store-hash-not-plaintext","text":"We don't store plaintext passwords in databases in case our data is ever breach. If a hacker was able to get these usernames and plaintext passwords they'd have access to all of our users information immediately! Solution: To prevent this we run their plaintext password through an algorithm called MD5 to create what's called a hash . This process turns password into 5F4DCC3B5AA765D61D8327DEB882CF99 . The way we use this hash to check against the plaintext password they send to our server when signing inD is to pass it through the MD5 algorithm(function) and compare that function's return value to the hash stored in our database.","title":"Store Hash, not Plaintext"},{"location":"module-3/hashingAndTokens/#creating-the-bearer-token","text":"Once their password has been compared against the hash in the database and verified we will need to send them that bearer token to use on all of their future requests. This is their \"wristband\" to the concert The bearer token is a special set of numbers and letters created with another algorithm called RFC 7519 that uses our server's key signature to prove that the token came from our server and our server alone, and that it wasn't falsely manufactured by another server or someone else's computer. This \"signature\" is really just a password we keep secret on our server that gets used only when tokens need to be signed. So far we've been using the term bearer token but this really refers to the token when it's being presented by the client/user to the server in the request. The other name for this special key is JWT , or JSON Web Token .","title":"Creating the Bearer Token"},{"location":"module-3/hashingAndTokens/#creating-a-jwt","text":"A JWT might look like this: 1 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c Look closely and you'll see two . These separate the token into three parts: Part Name Example Definition Header eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 includes information about the type , as in JWT, and the algorithm, alg , used to created it. Payload eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ the actual data stored in it, like the username & iat (issued at) which tells the time the token was issued. Signature SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c contains the hash of our server's key The provider of the Node package we'll be using to generate our signed JTWs has a really clear example on their homepage, JWT.io .","title":"Creating a JWT"},{"location":"module-3/hashingAndTokens/#storing-and-using-the-jwt","text":"As mentioned above, our server will send a response to the client that stores the token on the client's cookie storage. Then it will be up to the client(our 411 React Front-end app) to add the JWT as a bearer token in the requests.","title":"Storing and Using the JWT"},{"location":"module-3/hashingAndTokens/#reading-the-jwt","text":"Here is where we check for \"wristbands\". Once the request comes to our server it's going to be routed to the appropriate route but we only want authenticated users to access our resources so we'll add a function called something like checkForAuthToken or just checkAuth ; then we'll tell our Express server to .use() it to checkAuth entication. If the check passes (the token is there and valid) then we'll allow them to do the next() step, the route they requested . 1 2 3 4 5 6 7 8 9 app . use ( checkAuth () ) const checkAuth = ( req , res , next ) => { // some logic here if ( failed ) res . status ( 401 ). json ({ msg : \"invalid authentication\" }) const payload = < DECODED TOKEN > req . user = payload next () } This would protect ALL routes in our server. The next parameter tells the function to continue on to the next() function in the request. If we want to protect only some routes with authentication we would place it as the second argument in the route: 1 2 3 4 app . get ( \"/users\" , checkAuth , ( req , res ) => { // only gets here if authenticated // retrieve all users from the database }) The above function is pseudo-code but it is essentially saying, \"I'm looking for an Authorization header. If I don't find one then I'm going to return an un-authorized message. Otherwise I'm going to decode the token sent with the header and attach the contents to the request (req.user) so I know who made the request\". Calling the \"next()\" function is a successful end to the middleware function. This type of \"check\" is called middleware . Its meaning is in the word. We tell our server to .use() a function(software) in-between(middle) of the request and the resource. There are all sorts of types and purposes of middleware but this authentication check is the most commonly used technique.","title":"Reading the JWT"},{"location":"module-3/hashingAndTokens/#but-why","text":"This is a good question! Why do we need to a JWT with a header, payload and signature? The answer to this question is security. Think way back to when we first learned about HTTP(S) and how the internet is possible because computers are all built to read the same language and use the same protocol(HTTP). This means that all information sent over wifi, fiber, coax, satellite or copper is available to all computers in-between you and the server you're talking to across the country. This space between you and that server or other computer is a very vulnerable space because it can be intercepted and read by many computers without you evening knowing. For this reason we have to encrypt the data we need to be private. Encryption is the act of \"scrambling\" the information in a mathematical way with a key only the sender and the receiver have. ...And this is the foundation of Cyber Security . With this in mind you might be thinking that creating your password hashes and bearer tokens is very difficult. It's actually not because we just use Node packages to generate them and we just tie them together to make them work for our app. 1 2 3 const jwksRsa = require ( 'jwks-rsa' ) const jwt = require ( 'express-jwt' ) const bcrypt = require ( 'bcrypt' ) In the next lesson we'll talk about lower level techniques of implementing these process.","title":"But Why?"},{"location":"module-3/hashingAndTokens/#additional-resources","text":"YT, Chris Courses - Hashing Passwords with Bcrypt NOTE: Industry standard is no longer bcrypt. Instead use Argon-2 . The process is the same.","title":"Additional Resources"},{"location":"module-3/introToAuthentication/","text":"Intro to Authentication Nothing will ever be attempted if all possible objections must first be overcome.\u2003\u2014Samuel Johnson Overview We've practiced building APIs and analyzing the data behind them. Now it's time to add a level of security to those APIs so that we can restrict access to authorized users. Authentication is an important part of creating APIs. As I'm sure we can all guess, authentication is used to lock down specific endpoints so that they cannot be freely accessed. To learn how to implement authentication on our server(API) we'll need to understand the process or workflow as well as a few new terms. Let's get started. Authentication vs Authorization Let's first clear up the definition of these two words. Authentication is the process of verify weather a person-user has access to a resource or not. For instance, you have signed up for API keys with at least two APIs. These keys authenticate your requests for the resources at those APIs; its being sent in the params of each of your requests. It's like buying a ticket to a concert and flashing it at the gate( sign-in ), then you get a wristband( authenticated ) and you're allowed to go in and enjoy the music! ...but what's a backstage pass ? When we build apps with data that needs to be allowed to certain person-users and restricted to others we need to implement Authorization . This is the process of assigning roles to each person-user. Maybe you're building a classroom management app for you and your students. All of the data for this app will be stored in the same database and served by the same server but you don't your students to have access to other students' grades and turned-in assignments but still have access to their own assignments and grades. However, for you, the teacher you want to be able to see all of the student's grades. To solve this problem you would assign each user of the app a role when they sign-up. Teachers would get a teacher role, students would get a student role and maybe parents would get a parent role. In your Express server you add an if statement to each route that asked if they were a teacher to access the resources behind the getAllGrades() so that student and parent users would be blocked from this particular resource. ...authorization is a backstage pass. Beyond being admitted to the concert(authentication) you're also allowed to go backstage and maybe meet the artists! Authentication Workflow Now let's talk through the process from a high perspective. You'll be seeing code snippets as we go but just know there may be some modifications to this code in live code bases. But please read the pseudo-code so you picture, for yourself, this process. The first step in this process is that the client/front-end will make a request to our server/API: 1 2 3 4 5 6 // front-end axios . get ( 'https://ourapi.com/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ) }) Just as we've built our serve to do, it will be listening and will return (respond) with the resource that was requested: 1 2 3 4 5 6 // back-end app . get ( '/users' , ( req , res ) => { // perform some logic to go get the logic // maybe move this function over to a controller file?? res . json ( users ) }) But now we want to see if the user is in our system, aka authenticate them, before we let them get to the resource they want... To do this we will ask them to sign-in with their username and password. If they are successful with their sign-in we will send to them a \"wristband\", or token , that proves they are authenticated and will be used on all of their following requests (until they logout) so they don't have to keep entering their username and password. This token is called a bearer token 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // back-end const login = ( req , res ) => { const { username , password } = req . body // * build and call your own authentication function using our server's secret key const jwtSecret = 'secret123' app . get ( '/jwt' , ( req , res ) => { const token = jsonwebtoken . sign ({ user : 'username' }, jwtSecret ) // the response object has a method on it called` that takes three arguments: // * name of the cookie // * value of the cookie // * parameters of the cookie // and sets a cookie on the user's browser/client. res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }); // -or- // * send the username & password to a third-party like Auth0, see below: axios ( `https:// ${ process . env . AUTH0_DOMAIN } /oauth/token` , { // ...more on this later... }) . then ( response => { // if the username & passwords are correct send the token back to the client/front-end const token = response . data . access_token res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }) . catch ( e => { res . send ( e ) }) Once the res.cookie method has been called a cookie that is specific to our server's domain has been set on the user's browser/client and it's sent in the headers of each subsequent request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // front-end // create a configuration object with the the correct keys and values // the token should be in the headers const config = { withCredentials : true , headers : { Authorization : `Bearer: ${ document . cookies . our_token } ` } } // send the config object with the request axios ( 'https://ourapi.com/user?ID=12345' , { config }) . then ( function ( response ) { // handle success console . log ( response ) }) NOTE: yes cookies may be accessed via document.cookies but when we build with React we'll need to use a special React cookie parser to access our cookies. Now we'll build some logic into our server that asks to see that token (\"wristband\") and verifies if it's valid before sending the requested resources back. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // back-end const checkForAuthToken = ( req , res , next ) => { const specialToken = req . headers [ 'our_token' ] if ( ! checkIsValid ( specialToken )) return res . sendStatus ( 401 ) next () } // build your own const checkIsValid = ( token ) => { // this function would run the RFC 7519 algorithm to see if the token is valid(see below) // * if valid return true // * if not valid return false // * or we could use a third party to handle this like Auth0 } // -- or -- // use a third-party like Auth0 If this check fails we could choose to send them a 403 or re-route them to the login page, ...or both! Okay, that's the higher overview of all this authentication stuff. Let's now look more closely at the details of it. Let's start with that hash business we just saw above. Practice It - Sending a Bearer Token Express Server Repl.it the Server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 const express = require ( 'express' ); const bodyParser = require ( 'body-parser' ); const db = require ( './db' ); const app = express (); app . use ( bodyParser . json ()); app . use ( bodyParser . urlencoded ({ extended : true })); app . use ( express . static ( 'public' )); // middleware function const authenticate = ( req , res , next ) => { const auth = req . headers [ 'authorization' ] if ( ! auth ) return res . sendStatus ( 401 ) next () } app . get ( '/' , ( req , res ) => { res . send ( `You're gettin' to this server!! Ask for those digits!` ); }); // middleware applied app . post ( '/' , authenticate , ( req , res ) => { res . send ( `You sent an authorization header...You're Postin!` ) }) app . listen ( 3000 , () => console . log ( 'server started and listening on port 3000' )); Create the Database 1 2 3 4 5 6 7 8 9 10 11 12 const sqlite3 = require ( 'sqlite3' ). verbose (); // much like the connection pool in mysql (the Node package) this object is used to create a light database with just a blank file: db2.sqlite3 // NOTE: .sqlite3 is the suffix) let db = new sqlite3 . Database ( './db2.sqlite3' , ( err ) => { if ( err ) { return console . error ( err . message ); } console . log ( 'Connected to the db2 SQlite database.' ); }); module . exports = db ; the Database in Memory 1 -- CREATE TABLE IF NOT EXISTS books (name TEXT, author TEXT) Open and fork the Repl.it above. Run the application. Copy the URL at the top right of the screen in the fake browser. Open up Postman and make a GET request to this endpoint. Did you get a response back? Make a POST request to this endpoint. Did you get \"Unauthorized\"? Under the Headers tab in Postman, add a header to the POST with the key \"Authorization\" and a value of literally any string of characters and retry. You should now see a response that says \"You sent an authorization header...You're Postin!\". Play around with the middleware function. Try changing: if (!auth) on ~line 15 to be a different condition so that you must send a specific string in the authentication header. Before moving on make sure you understand how it's being used. Add console.log statements into the authenticate function to see what data is being passed through it and how it's working. Additional Resources Forum, StackOverflow - Cookie Naming Convention YT, Ben Awad - How to Store JWT in Memory Also really good overview of security threats Article, TaniaRascia.com - Full Stack Cookie Storage Article, RyanChenkie@Medium - Storing JWT in Cookie in React App OWASP - Cookie & CSRF, Cross-Site Request Forgery Know Your Docs MDN Docs - Set Cookie Express Docs - Middleware NPM Docs - React-Cookie","title":"Intro to Authentication"},{"location":"module-3/introToAuthentication/#intro-to-authentication","text":"Nothing will ever be attempted if all possible objections must first be overcome.\u2003\u2014Samuel Johnson","title":"Intro to Authentication"},{"location":"module-3/introToAuthentication/#overview","text":"We've practiced building APIs and analyzing the data behind them. Now it's time to add a level of security to those APIs so that we can restrict access to authorized users. Authentication is an important part of creating APIs. As I'm sure we can all guess, authentication is used to lock down specific endpoints so that they cannot be freely accessed. To learn how to implement authentication on our server(API) we'll need to understand the process or workflow as well as a few new terms. Let's get started.","title":"Overview"},{"location":"module-3/introToAuthentication/#authentication-vs-authorization","text":"Let's first clear up the definition of these two words. Authentication is the process of verify weather a person-user has access to a resource or not. For instance, you have signed up for API keys with at least two APIs. These keys authenticate your requests for the resources at those APIs; its being sent in the params of each of your requests. It's like buying a ticket to a concert and flashing it at the gate( sign-in ), then you get a wristband( authenticated ) and you're allowed to go in and enjoy the music! ...but what's a backstage pass ? When we build apps with data that needs to be allowed to certain person-users and restricted to others we need to implement Authorization . This is the process of assigning roles to each person-user. Maybe you're building a classroom management app for you and your students. All of the data for this app will be stored in the same database and served by the same server but you don't your students to have access to other students' grades and turned-in assignments but still have access to their own assignments and grades. However, for you, the teacher you want to be able to see all of the student's grades. To solve this problem you would assign each user of the app a role when they sign-up. Teachers would get a teacher role, students would get a student role and maybe parents would get a parent role. In your Express server you add an if statement to each route that asked if they were a teacher to access the resources behind the getAllGrades() so that student and parent users would be blocked from this particular resource. ...authorization is a backstage pass. Beyond being admitted to the concert(authentication) you're also allowed to go backstage and maybe meet the artists!","title":"Authentication vs Authorization"},{"location":"module-3/introToAuthentication/#authentication-workflow","text":"Now let's talk through the process from a high perspective. You'll be seeing code snippets as we go but just know there may be some modifications to this code in live code bases. But please read the pseudo-code so you picture, for yourself, this process. The first step in this process is that the client/front-end will make a request to our server/API: 1 2 3 4 5 6 // front-end axios . get ( 'https://ourapi.com/user?ID=12345' ) . then ( function ( response ) { // handle success console . log ( response ) }) Just as we've built our serve to do, it will be listening and will return (respond) with the resource that was requested: 1 2 3 4 5 6 // back-end app . get ( '/users' , ( req , res ) => { // perform some logic to go get the logic // maybe move this function over to a controller file?? res . json ( users ) }) But now we want to see if the user is in our system, aka authenticate them, before we let them get to the resource they want... To do this we will ask them to sign-in with their username and password. If they are successful with their sign-in we will send to them a \"wristband\", or token , that proves they are authenticated and will be used on all of their following requests (until they logout) so they don't have to keep entering their username and password. This token is called a bearer token 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // back-end const login = ( req , res ) => { const { username , password } = req . body // * build and call your own authentication function using our server's secret key const jwtSecret = 'secret123' app . get ( '/jwt' , ( req , res ) => { const token = jsonwebtoken . sign ({ user : 'username' }, jwtSecret ) // the response object has a method on it called` that takes three arguments: // * name of the cookie // * value of the cookie // * parameters of the cookie // and sets a cookie on the user's browser/client. res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }); // -or- // * send the username & password to a third-party like Auth0, see below: axios ( `https:// ${ process . env . AUTH0_DOMAIN } /oauth/token` , { // ...more on this later... }) . then ( response => { // if the username & passwords are correct send the token back to the client/front-end const token = response . data . access_token res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }) . catch ( e => { res . send ( e ) }) Once the res.cookie method has been called a cookie that is specific to our server's domain has been set on the user's browser/client and it's sent in the headers of each subsequent request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // front-end // create a configuration object with the the correct keys and values // the token should be in the headers const config = { withCredentials : true , headers : { Authorization : `Bearer: ${ document . cookies . our_token } ` } } // send the config object with the request axios ( 'https://ourapi.com/user?ID=12345' , { config }) . then ( function ( response ) { // handle success console . log ( response ) }) NOTE: yes cookies may be accessed via document.cookies but when we build with React we'll need to use a special React cookie parser to access our cookies. Now we'll build some logic into our server that asks to see that token (\"wristband\") and verifies if it's valid before sending the requested resources back. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // back-end const checkForAuthToken = ( req , res , next ) => { const specialToken = req . headers [ 'our_token' ] if ( ! checkIsValid ( specialToken )) return res . sendStatus ( 401 ) next () } // build your own const checkIsValid = ( token ) => { // this function would run the RFC 7519 algorithm to see if the token is valid(see below) // * if valid return true // * if not valid return false // * or we could use a third party to handle this like Auth0 } // -- or -- // use a third-party like Auth0 If this check fails we could choose to send them a 403 or re-route them to the login page, ...or both! Okay, that's the higher overview of all this authentication stuff. Let's now look more closely at the details of it. Let's start with that hash business we just saw above.","title":"Authentication Workflow"},{"location":"module-3/introToAuthentication/#practice-it-sending-a-bearer-token","text":"Express Server Repl.it the Server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 const express = require ( 'express' ); const bodyParser = require ( 'body-parser' ); const db = require ( './db' ); const app = express (); app . use ( bodyParser . json ()); app . use ( bodyParser . urlencoded ({ extended : true })); app . use ( express . static ( 'public' )); // middleware function const authenticate = ( req , res , next ) => { const auth = req . headers [ 'authorization' ] if ( ! auth ) return res . sendStatus ( 401 ) next () } app . get ( '/' , ( req , res ) => { res . send ( `You're gettin' to this server!! Ask for those digits!` ); }); // middleware applied app . post ( '/' , authenticate , ( req , res ) => { res . send ( `You sent an authorization header...You're Postin!` ) }) app . listen ( 3000 , () => console . log ( 'server started and listening on port 3000' )); Create the Database 1 2 3 4 5 6 7 8 9 10 11 12 const sqlite3 = require ( 'sqlite3' ). verbose (); // much like the connection pool in mysql (the Node package) this object is used to create a light database with just a blank file: db2.sqlite3 // NOTE: .sqlite3 is the suffix) let db = new sqlite3 . Database ( './db2.sqlite3' , ( err ) => { if ( err ) { return console . error ( err . message ); } console . log ( 'Connected to the db2 SQlite database.' ); }); module . exports = db ; the Database in Memory 1 -- CREATE TABLE IF NOT EXISTS books (name TEXT, author TEXT) Open and fork the Repl.it above. Run the application. Copy the URL at the top right of the screen in the fake browser. Open up Postman and make a GET request to this endpoint. Did you get a response back? Make a POST request to this endpoint. Did you get \"Unauthorized\"? Under the Headers tab in Postman, add a header to the POST with the key \"Authorization\" and a value of literally any string of characters and retry. You should now see a response that says \"You sent an authorization header...You're Postin!\". Play around with the middleware function. Try changing: if (!auth) on ~line 15 to be a different condition so that you must send a specific string in the authentication header. Before moving on make sure you understand how it's being used. Add console.log statements into the authenticate function to see what data is being passed through it and how it's working.","title":"Practice It - Sending a Bearer Token"},{"location":"module-3/introToAuthentication/#additional-resources","text":"Forum, StackOverflow - Cookie Naming Convention YT, Ben Awad - How to Store JWT in Memory Also really good overview of security threats Article, TaniaRascia.com - Full Stack Cookie Storage Article, RyanChenkie@Medium - Storing JWT in Cookie in React App OWASP - Cookie & CSRF, Cross-Site Request Forgery","title":"Additional Resources"},{"location":"module-3/introToAuthentication/#know-your-docs","text":"MDN Docs - Set Cookie Express Docs - Middleware NPM Docs - React-Cookie","title":"Know Your Docs"},{"location":"module-3/serverAuthenticationOverview/","text":"Overview Of Authentication *\u201cI have not failed. I've just found 10,000 ways that won't work.\u201d \u2015 Thomas A. Edison What is Authentication? Hi everyone this section of the text book will focus on the overview of authentication. Authentication is used by a server when the server needs to know exactly who is accessing their app. Why? It's important to understand authentication because it's necessary for the security of your app and to understand what every app on the internet does when you sign in. When building your fullstack projects at the end of the class, be sure to reference back to here if you need any extra help with building your login. You can also bookmark this lesson to refer back later. Visualization of All steps Steps of Authentication 1.The username and password are sent to the server. 2.The server accesses its database of users that holds the username and password. 3.It checks the provided username and password against the one in the database. 4.If the credentials match, the user's identity is verified, and the application decides what's next. 5.If not, a generic error message is returned. Sign-Up The first step of Authentication is to sign up for the app you're making or using. When you sign up for a web app, it will write to the database being used by the app sending the email/password you used to sign up. It's important to understand this because it will help you visualize how the server is checking for the correct person to log-in. When you send the server your sign up information it will hash or salt the password for security reasons. We will cover hashing soon but for now just remember the password will be scrambled. Example Of A Salted/hashed User Input 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //creating a post request when a user signs up //async is just a term used when a function is asyncrinous don't worry too much about it right now. app . post ( '/users' , async ( req , res ) => { try { //await is only used when async is present const salt = await bcrypt . genSalt () //bcrypt is a library used for security and it has a method called hash to scramble user inputted passwords. const ourHashedPassword = await bcrypt . hash ( req . body . password , salt ) //this line takes the user name and hashed password and pushes the new user to the database. const user = { name : req . body . name , password : ourHashedPassword } user . push ( user ) //always return a 201 when the status when successful. res . status ( 201 ). send () } catch { //if not return 500 error to user signing in. res . status ( 500 ). send () }) Step 1 logging in to the app. When you go to log into a webapp it will prompt you for the credentials you entered during the sign up. When you click the login button it will then make a get request to the server or API you are trying to access. 1 2 3 4 5 6 axios . get ( 'https://theserverorapiurl.com/user?ID=1' ) . then ( function ( response ) { //handle success //remember to console.log console . log ( response ) }) When you submit a login remember the next steps all happen within seconds but are vital to understand authorization. Step 2 This step once clicked, the login sends the server a call that tells the server to take a look at the database the app is using to verify who is logging in. Step 3 It checks the provided username and hashed password against the one in the database. credentials you sent => user=username:hashedPassword ==> checks the database user=myusername:mypassword This is the logic that checks the token and verifies if its valid before sending the request resource back. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // back-end const checkForAuthToken = ( req , res , next ) => { const specialToken = req . headers [ 'our_token' ] if ( ! checkIsValid ( specialToken )) return res . sendStatus ( 401 ) next () } // build your own const checkIsValid = ( token ) => { // this function would run the RFC 7519 algorithm to see if the token is valid(see below) // * if valid return true // * if not valid return false // * or we could use a third party to handle this like Auth0 } // -- or -- // use a third-party like Auth0 Step 4 If the credentials match, the user's identity is verified, and the application decides what's next. After they are successfully authenticated our app will send the user a bearer token or cookie to keep with you during the time you are using the app. (once you logout this token will be terminated until you login again). If you didn't receive this token then you would have to re-login every time you wanted to change pages in the app. Its not very user friendly. After you are granted authorization to the web app you will now have a cookie attached to your info in the database and this cookie will follow you around the web app keeping you authorized. Cookie code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // back-end const login = ( req , res ) => { const { username , password } = req . body // * build and call your own authentication function using our server's secret key const jwtSecret = 'secret123' app . get ( '/jwt' , ( req , res ) => { const token = jsonwebtoken . sign ({ user : 'username' }, jwtSecret ) // the response object has a method on it called` that takes three arguments: // * name of the cookie // * value of the cookie // * parameters of the cookie // and sets a cookie on the user's browser/client. res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }); // -or- // * send the username & password to a third-party like Auth0, see below: axios ( `https:// ${ process . env . AUTH0_DOMAIN } /oauth/token` , { // ...more on this later... }) . then ( response => { // if the username & passwords are correct send the token back to the client/front-end const token = response . data . access_token res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }) . catch ( e => { res . send ( e ) }) Conclusion I hope this helps visualize the process of the code being written. If you have trouble with the coming classes reference back here and try to visualize the code being written and why its important. Video Overview Additional Resources ExpressJS Authentication Know Your Docs MDN Docs - title MDN Cookie docs","title":"Server Authentication Overview"},{"location":"module-3/serverAuthenticationOverview/#overview-of-authentication","text":"*\u201cI have not failed. I've just found 10,000 ways that won't work.\u201d \u2015 Thomas A. Edison","title":"Overview Of Authentication"},{"location":"module-3/serverAuthenticationOverview/#what-is-authentication","text":"Hi everyone this section of the text book will focus on the overview of authentication. Authentication is used by a server when the server needs to know exactly who is accessing their app.","title":"What is Authentication?"},{"location":"module-3/serverAuthenticationOverview/#why","text":"It's important to understand authentication because it's necessary for the security of your app and to understand what every app on the internet does when you sign in. When building your fullstack projects at the end of the class, be sure to reference back to here if you need any extra help with building your login. You can also bookmark this lesson to refer back later.","title":"Why?"},{"location":"module-3/serverAuthenticationOverview/#visualization-of-all-steps","text":"","title":"Visualization of All steps"},{"location":"module-3/serverAuthenticationOverview/#steps-of-authentication","text":"1.The username and password are sent to the server. 2.The server accesses its database of users that holds the username and password. 3.It checks the provided username and password against the one in the database. 4.If the credentials match, the user's identity is verified, and the application decides what's next. 5.If not, a generic error message is returned.","title":"Steps of Authentication"},{"location":"module-3/serverAuthenticationOverview/#sign-up","text":"The first step of Authentication is to sign up for the app you're making or using. When you sign up for a web app, it will write to the database being used by the app sending the email/password you used to sign up. It's important to understand this because it will help you visualize how the server is checking for the correct person to log-in. When you send the server your sign up information it will hash or salt the password for security reasons. We will cover hashing soon but for now just remember the password will be scrambled.","title":"Sign-Up"},{"location":"module-3/serverAuthenticationOverview/#example-of-a-saltedhashed-user-input","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //creating a post request when a user signs up //async is just a term used when a function is asyncrinous don't worry too much about it right now. app . post ( '/users' , async ( req , res ) => { try { //await is only used when async is present const salt = await bcrypt . genSalt () //bcrypt is a library used for security and it has a method called hash to scramble user inputted passwords. const ourHashedPassword = await bcrypt . hash ( req . body . password , salt ) //this line takes the user name and hashed password and pushes the new user to the database. const user = { name : req . body . name , password : ourHashedPassword } user . push ( user ) //always return a 201 when the status when successful. res . status ( 201 ). send () } catch { //if not return 500 error to user signing in. res . status ( 500 ). send () })","title":"Example Of A Salted/hashed User Input"},{"location":"module-3/serverAuthenticationOverview/#step-1","text":"logging in to the app. When you go to log into a webapp it will prompt you for the credentials you entered during the sign up. When you click the login button it will then make a get request to the server or API you are trying to access. 1 2 3 4 5 6 axios . get ( 'https://theserverorapiurl.com/user?ID=1' ) . then ( function ( response ) { //handle success //remember to console.log console . log ( response ) }) When you submit a login remember the next steps all happen within seconds but are vital to understand authorization.","title":"Step 1"},{"location":"module-3/serverAuthenticationOverview/#step-2","text":"This step once clicked, the login sends the server a call that tells the server to take a look at the database the app is using to verify who is logging in.","title":"Step 2"},{"location":"module-3/serverAuthenticationOverview/#step-3","text":"It checks the provided username and hashed password against the one in the database. credentials you sent => user=username:hashedPassword ==> checks the database user=myusername:mypassword This is the logic that checks the token and verifies if its valid before sending the request resource back. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // back-end const checkForAuthToken = ( req , res , next ) => { const specialToken = req . headers [ 'our_token' ] if ( ! checkIsValid ( specialToken )) return res . sendStatus ( 401 ) next () } // build your own const checkIsValid = ( token ) => { // this function would run the RFC 7519 algorithm to see if the token is valid(see below) // * if valid return true // * if not valid return false // * or we could use a third party to handle this like Auth0 } // -- or -- // use a third-party like Auth0","title":"Step 3"},{"location":"module-3/serverAuthenticationOverview/#step-4","text":"If the credentials match, the user's identity is verified, and the application decides what's next. After they are successfully authenticated our app will send the user a bearer token or cookie to keep with you during the time you are using the app. (once you logout this token will be terminated until you login again). If you didn't receive this token then you would have to re-login every time you wanted to change pages in the app. Its not very user friendly. After you are granted authorization to the web app you will now have a cookie attached to your info in the database and this cookie will follow you around the web app keeping you authorized.","title":"Step 4"},{"location":"module-3/serverAuthenticationOverview/#cookie-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // back-end const login = ( req , res ) => { const { username , password } = req . body // * build and call your own authentication function using our server's secret key const jwtSecret = 'secret123' app . get ( '/jwt' , ( req , res ) => { const token = jsonwebtoken . sign ({ user : 'username' }, jwtSecret ) // the response object has a method on it called` that takes three arguments: // * name of the cookie // * value of the cookie // * parameters of the cookie // and sets a cookie on the user's browser/client. res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }); // -or- // * send the username & password to a third-party like Auth0, see below: axios ( `https:// ${ process . env . AUTH0_DOMAIN } /oauth/token` , { // ...more on this later... }) . then ( response => { // if the username & passwords are correct send the token back to the client/front-end const token = response . data . access_token res . cookie ( 'our_token' , token , { httpOnly : true }) res . json ({ token }) }) . catch ( e => { res . send ( e ) })","title":"Cookie code"},{"location":"module-3/serverAuthenticationOverview/#conclusion","text":"I hope this helps visualize the process of the code being written. If you have trouble with the coming classes reference back here and try to visualize the code being written and why its important.","title":"Conclusion"},{"location":"module-3/serverAuthenticationOverview/#video-overview","text":"","title":"Video Overview"},{"location":"module-3/serverAuthenticationOverview/#additional-resources","text":"ExpressJS Authentication","title":"Additional Resources"},{"location":"module-3/serverAuthenticationOverview/#know-your-docs","text":"MDN Docs - title MDN Cookie docs","title":"Know Your Docs"},{"location":"module-4/class-13/","text":"Class 13: Hosting with App Engine You cannot plough a field by turning it over in your mind.\u2003\u2014Author Unknown Greet, Outline, and Objectify Today we're going to: OBJECTIVE -Today the student will learn and practice to understand: Deploying an API and database to the cloud via App Engine Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the 311_wk7_day1_deployment Repo Familiarize with the codebase Deploy to the cloud. Turn in \"1stAppEngineURL\" Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins We're going to follow the instructions in the README.md to deploy our application and then test the hosted application. Additionally, here is a \"Hello World\" example of deploying to App Engine from Google's docs. At the end of this class our API will be hosted and accessible via a public facing URL. the Gif via GIPHY the Dashboard Fork and clone the following repository: App Engine Deployment Follow the README to deploy your API YT, Chris Parsons - Google Cloud Platform with Node.js Push Yourself Further Attempt to replicate the steps in this lesson for a different project, maybe your graduation project . . . or try to find an older API we've created that doesn't use MySQL to make things easier. Navigate to a different project Ensure an app.yaml file exists Run gcloud app deploy Ensure the app is running as we expect Note: Only one application can be hosted on App Engine at a time so this will overwrite the current homework assignment...FYI Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create 1stAppEngineURL Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 13 App Engine"},{"location":"module-4/class-13/#class-13-hosting-with-app-engine","text":"You cannot plough a field by turning it over in your mind.\u2003\u2014Author Unknown","title":"Class 13: Hosting with App Engine"},{"location":"module-4/class-13/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE -Today the student will learn and practice to understand: Deploying an API and database to the cloud via App Engine Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Fork and clone the 311_wk7_day1_deployment Repo Familiarize with the codebase Deploy to the cloud. Turn in \"1stAppEngineURL\" Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-13/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-13/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-13/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-13/#creation-time-60-90-mins","text":"We're going to follow the instructions in the README.md to deploy our application and then test the hosted application. Additionally, here is a \"Hello World\" example of deploying to App Engine from Google's docs. At the end of this class our API will be hosted and accessible via a public facing URL. the Gif via GIPHY the Dashboard Fork and clone the following repository: App Engine Deployment Follow the README to deploy your API YT, Chris Parsons - Google Cloud Platform with Node.js","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-13/#push-yourself-further","text":"Attempt to replicate the steps in this lesson for a different project, maybe your graduation project . . . or try to find an older API we've created that doesn't use MySQL to make things easier. Navigate to a different project Ensure an app.yaml file exists Run gcloud app deploy Ensure the app is running as we expect Note: Only one application can be hosted on App Engine at a time so this will overwrite the current homework assignment...FYI","title":"Push Yourself Further"},{"location":"module-4/class-13/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-13/#exit-recap-attendance-and-reminders-5-mins","text":"Create 1stAppEngineURL Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-14/","text":"Class 14: Hosting with Cloud Storage Men's best successes come after their disappointments.\u2003\u2014Henry Ward Beecher Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: The use of cloud storage as it pertains to websites and web apps Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Create new react app and build for production Create Google Cloud bucket Upload React app to bucket Set bucket permissions Turn in \" 1st-React-App \" url Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins We will follow the instructions below to create a new project with create-react-app and host the project in Cloud Storage. Additional documentation is provided below. GCP Docs - Creating a bucket GCP Docs - Uploading files GCP Docs - Hosting static sites (If Necessary) Install create-react-app : npm i -g create-react-app Create the App with React Create a new project with your last name and the word \"app\" (ex. smith-app) in the appropriate folder, i.e. jsdev , run create-react-app smith-app cd smith-app Use npm start to verify the project is working as expected Create a production build version Inside of your project, add the following to your package.json file: \"homepage\": \"./\" You can do this right after the closing curly brace for \"browserslist\" . Make sure you add a comma after the curly-brace and before your \"homepage\" property. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <! -- more code here -- > }, \"browserslist\" : { \"production\" : [ \">0.2%\" , \"not dead\" , \"not op_mini all\" ], \"development\" : [ \"last 1 chrome version\" , \"last 1 firefox version\" , \"last 1 safari version\" ] }, \"homepage\" : \"./\" } We are doing this because create-react-app made some assumptions about where you are serving the app from. We don't need to worry about this here. Go to ./public/robots.txt and update the text to say: 1 2 3 4 5 # https://www.robotstxt.org/robotstxt.html User-agent: * Allow: / Run npm run build to create the files we need for production. They will live under the \"build\" folder. Creating a bucket Open your Google Cloud console in your browser Under the main Google Cloud navigation select \"Storage\" under the heading \"Storage\" (redundant) Click \"Create Bucket\" Give your bucket a name. Keep in mind that this name must be unique across ALL of Cloud Storage so that means if anyone else has chosen your name first, you're out of luck. For our purposes let's try to call it the same thing as our create-react-app, so -app (ex. \"smith-app\"). If this is taken, add some random numbers/letters. Leave all other default options Uploading files There are multiple ways to upload files to Cloud Storage. The two main ways are through the console with the \"upload\" button or with gsutil . Gsutils was downloaded when we downloaded the gcloud command-line utilities. Since we have already used the command line tools we are going to continue with that. Use the gsutil tool to upload all files in the \"build\" folder to your bucket If you are in the root project folder the command is: gsutil cp -R build/* gs://smith-app NOTE: \"-R\" means recursively copy all items and \"smith\" is a sample last name You should see progress happening in your terminal and a \"completed\" message when it is done Refresh the page in the Google Cloud console to see your files in the bucket Bucket Permissions In order to let people view our site we need to update our permissions and make the bucket public. In the console, select the \"permissions\" tab on your - [ ] bucket - [ ] Click \"add members\". You should see a side-panel open - [ ] Start typing \"allUsers\". You should see an option for this in the dropdown - [ ] Under \"select a role\" navigate down to storage and click \"Storage Object Viewer\" - [ ] Click \"Save\". - [ ] Repeat this process but this time choose the \"Storage Legacy Bucket Reader\" role. - [ ] Click \"Save\" Your bucket now has public permissions. View the site You can view your app at: https://storage.googleapis.com/<BUCKET NAME>/index.html If all went according to plan we now have the basic create-react-app running in the cloud. A quick note about this setup . . . this is not actually configured to serve traffic just yet. Notice how we had to navigate to the \"index.html\" file? Our users shouldn't have to do that. We just want to note that in order to set your site up to avoid that we need to edit the website configuration and you can only do that if you have a custom domain as described here. Domains are typically pretty cheap. We'd encourage you to buy a cheap domain from https://domains.google.com/registrar and create another bucket with your domain name (www.example.com) in order to truly have a site running in GCS (Google Cloud Storage). Follow-Up Video YT, StuffedBox - Host a Static Website on GCP Push Yourself Further Purchase a domain name from domains.google.com (or any other web hosting provider) Create a bucket with the name of that domain (www.example.com) Upload a basic create-react-app site Edit permissions to make the bucket public \"Edit website configuration\" to set the main (index) page and the 404 page Add a CNAME to your DNS configuration (godaddy) to point to the GCS Creating a CNAME View your live website Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create 1st-React-App Assignment Create Class 14 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 14 Cloud Storage"},{"location":"module-4/class-14/#class-14-hosting-with-cloud-storage","text":"Men's best successes come after their disappointments.\u2003\u2014Henry Ward Beecher","title":"Class 14: Hosting with Cloud Storage"},{"location":"module-4/class-14/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: The use of cloud storage as it pertains to websites and web apps Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Create new react app and build for production Create Google Cloud bucket Upload React app to bucket Set bucket permissions Turn in \" 1st-React-App \" url Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-14/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-14/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-14/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-14/#creation-time-60-90-mins","text":"We will follow the instructions below to create a new project with create-react-app and host the project in Cloud Storage. Additional documentation is provided below. GCP Docs - Creating a bucket GCP Docs - Uploading files GCP Docs - Hosting static sites (If Necessary) Install create-react-app : npm i -g create-react-app Create the App with React Create a new project with your last name and the word \"app\" (ex. smith-app) in the appropriate folder, i.e. jsdev , run create-react-app smith-app cd smith-app Use npm start to verify the project is working as expected Create a production build version Inside of your project, add the following to your package.json file: \"homepage\": \"./\" You can do this right after the closing curly brace for \"browserslist\" . Make sure you add a comma after the curly-brace and before your \"homepage\" property. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <! -- more code here -- > }, \"browserslist\" : { \"production\" : [ \">0.2%\" , \"not dead\" , \"not op_mini all\" ], \"development\" : [ \"last 1 chrome version\" , \"last 1 firefox version\" , \"last 1 safari version\" ] }, \"homepage\" : \"./\" } We are doing this because create-react-app made some assumptions about where you are serving the app from. We don't need to worry about this here. Go to ./public/robots.txt and update the text to say: 1 2 3 4 5 # https://www.robotstxt.org/robotstxt.html User-agent: * Allow: / Run npm run build to create the files we need for production. They will live under the \"build\" folder. Creating a bucket Open your Google Cloud console in your browser Under the main Google Cloud navigation select \"Storage\" under the heading \"Storage\" (redundant) Click \"Create Bucket\" Give your bucket a name. Keep in mind that this name must be unique across ALL of Cloud Storage so that means if anyone else has chosen your name first, you're out of luck. For our purposes let's try to call it the same thing as our create-react-app, so -app (ex. \"smith-app\"). If this is taken, add some random numbers/letters. Leave all other default options Uploading files There are multiple ways to upload files to Cloud Storage. The two main ways are through the console with the \"upload\" button or with gsutil . Gsutils was downloaded when we downloaded the gcloud command-line utilities. Since we have already used the command line tools we are going to continue with that. Use the gsutil tool to upload all files in the \"build\" folder to your bucket If you are in the root project folder the command is: gsutil cp -R build/* gs://smith-app NOTE: \"-R\" means recursively copy all items and \"smith\" is a sample last name You should see progress happening in your terminal and a \"completed\" message when it is done Refresh the page in the Google Cloud console to see your files in the bucket Bucket Permissions In order to let people view our site we need to update our permissions and make the bucket public. In the console, select the \"permissions\" tab on your - [ ] bucket - [ ] Click \"add members\". You should see a side-panel open - [ ] Start typing \"allUsers\". You should see an option for this in the dropdown - [ ] Under \"select a role\" navigate down to storage and click \"Storage Object Viewer\" - [ ] Click \"Save\". - [ ] Repeat this process but this time choose the \"Storage Legacy Bucket Reader\" role. - [ ] Click \"Save\" Your bucket now has public permissions. View the site You can view your app at: https://storage.googleapis.com/<BUCKET NAME>/index.html If all went according to plan we now have the basic create-react-app running in the cloud. A quick note about this setup . . . this is not actually configured to serve traffic just yet. Notice how we had to navigate to the \"index.html\" file? Our users shouldn't have to do that. We just want to note that in order to set your site up to avoid that we need to edit the website configuration and you can only do that if you have a custom domain as described here. Domains are typically pretty cheap. We'd encourage you to buy a cheap domain from https://domains.google.com/registrar and create another bucket with your domain name (www.example.com) in order to truly have a site running in GCS (Google Cloud Storage). Follow-Up Video YT, StuffedBox - Host a Static Website on GCP","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-14/#push-yourself-further","text":"Purchase a domain name from domains.google.com (or any other web hosting provider) Create a bucket with the name of that domain (www.example.com) Upload a basic create-react-app site Edit permissions to make the bucket public \"Edit website configuration\" to set the main (index) page and the 404 page Add a CNAME to your DNS configuration (godaddy) to point to the GCS Creating a CNAME View your live website","title":"Push Yourself Further"},{"location":"module-4/class-14/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-14/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-14/#exit-recap-attendance-and-reminders-5-mins","text":"Create 1st-React-App Assignment Create Class 14 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-15/","text":"Class 15: CloudBees CodeShip Hope is like the sun, which, as we journey toward it, casts the shadow of our burden behind us.\u2003\u2014Samuel Smiles Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: CI/CD using CloudBees CodeShip Synthesizing their knowledge of SQL into building their own app. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Create CloudBees CodeShip account, setup, and configure Deploy your app using CloudBees CodeShip Complete your graduation app's SQL database Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today we are going to learn how to configure a CI/CD pipeline using CloudBees CodeShip. This will enable us to automatically deploy our updates to the cloud when we commit our changes on the master branch. To start, please sign up for a free CloudBees CodeShip account . You can tie your login to your GitHub account (recommended). Project Instructions We will be using our previously deployed repository, 311_wk7_day1_deployment , for this project. CloudBees CodeShip Setup Log in to your CloudBees CodeShip account In the top-nav, select \"Projects\" Select \"New Project\" Under \"Select Your SCM\" choose sGitHub Find the repository for your deployed application from two classes ago. This should be 311_wk7_day1_deployment Choose \"connect\" . Choose \"Codeship Basic\" . You should see a page that says \"Setup Commands\" . In the code area.. type npm install on the first line. Every time we make a change to our code, CloudBees CodeShip will re-install the dependencies. Remember that we do not commit node_modules to GitHub so the deployment tool will need to generate them Click \"save changes\" . On the top-left, navigate to the \"Deploy\" section. Leave the \"branch type\" alone and type master / main in the second input. branch type is exactly master / branch type is exactly main . This means the deployment will only happen on changes to the master / main branch Click \"save pipeline settings\" . You should be on a page with different deployments listed and a header that says \"Add Deployment\" . You should also see \"App Engine\" as an option. Choose it. CloudBees CodeShip will need some information from us regarding our Google Cloud account: Project ID - navigate to the homepage in Google Cloud and see the card called \"Project info\". Your project id can be found underneath Key file - scroll down the page to see the section called \"Creating a Service Key\" , use those instructions to generate your key. Upload the generated key. URL - leave blank Folder - leave blank Click \"create deployment\" at the bottom of the page. Enable Admin API In order for CloudBees CodeShip to talk with our Google Cloud account we need to do one more thing . . . enable the API. In your Google Cloud dashboard, search for \"App Engine Admin API\" and click \"enable\". Testing our deployment Navigate to the CloudBees CodeShip dashboard by clicking the boat in the upper left-hand corner. In your repository, edit the default route in the index.js file. Change it from \"welcome to our server\" to \"welcome to our updated server\" . Save the changes, commit them and push them to GitHub If you refresh the CloudBees CodeShip page you should see a build in progress. Click on it to follow the logs . You should see a set of numeric steps taking place to deploy your changes. Wait for all the steps to complete and then navigate to the \"App Engine\" page in Google Cloud. Click the link in the top-right that looks like https://new-project-385736.appspot.com/ and you should see the text \"welcome to our updated server\" . Additionally, on that dashboard there should be small text underneath the graph that says \"debug || source\" . Choose \"source\" . Click on the \"index.js\" file and you should see your updated source code in production. Your app is now deployed! Creating a Service Key - Google Cloud In your App Engine Dashboard: In the left navigation menu, select \"IAM & admin\" Click \"service accounts\" on the left-hand side. You should see one account Under the \"actions\" label, select the triple dot menu and choose \"Create Key\" Make sure JSON is selected and click \"create\" A key should have been saved to your computer Push Yourself Further For the remainder of the class we will continue building your graduation app. After completing your homework from last night you should be able to now complete your SQL database. Remember, the goal here is to leave this class with a full database and server deployed and ready to be consumed by your React app in the next class, JS411. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 15 CI/CD"},{"location":"module-4/class-15/#class-15-cloudbees-codeship","text":"Hope is like the sun, which, as we journey toward it, casts the shadow of our burden behind us.\u2003\u2014Samuel Smiles","title":"Class 15: CloudBees CodeShip"},{"location":"module-4/class-15/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: CI/CD using CloudBees CodeShip Synthesizing their knowledge of SQL into building their own app. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Create CloudBees CodeShip account, setup, and configure Deploy your app using CloudBees CodeShip Complete your graduation app's SQL database Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-15/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-15/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-15/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-15/#creation-time-60-90-mins","text":"Today we are going to learn how to configure a CI/CD pipeline using CloudBees CodeShip. This will enable us to automatically deploy our updates to the cloud when we commit our changes on the master branch. To start, please sign up for a free CloudBees CodeShip account . You can tie your login to your GitHub account (recommended).","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-15/#project-instructions","text":"We will be using our previously deployed repository, 311_wk7_day1_deployment , for this project. CloudBees CodeShip Setup Log in to your CloudBees CodeShip account In the top-nav, select \"Projects\" Select \"New Project\" Under \"Select Your SCM\" choose sGitHub Find the repository for your deployed application from two classes ago. This should be 311_wk7_day1_deployment Choose \"connect\" . Choose \"Codeship Basic\" . You should see a page that says \"Setup Commands\" . In the code area.. type npm install on the first line. Every time we make a change to our code, CloudBees CodeShip will re-install the dependencies. Remember that we do not commit node_modules to GitHub so the deployment tool will need to generate them Click \"save changes\" . On the top-left, navigate to the \"Deploy\" section. Leave the \"branch type\" alone and type master / main in the second input. branch type is exactly master / branch type is exactly main . This means the deployment will only happen on changes to the master / main branch Click \"save pipeline settings\" . You should be on a page with different deployments listed and a header that says \"Add Deployment\" . You should also see \"App Engine\" as an option. Choose it. CloudBees CodeShip will need some information from us regarding our Google Cloud account: Project ID - navigate to the homepage in Google Cloud and see the card called \"Project info\". Your project id can be found underneath Key file - scroll down the page to see the section called \"Creating a Service Key\" , use those instructions to generate your key. Upload the generated key. URL - leave blank Folder - leave blank Click \"create deployment\" at the bottom of the page. Enable Admin API In order for CloudBees CodeShip to talk with our Google Cloud account we need to do one more thing . . . enable the API. In your Google Cloud dashboard, search for \"App Engine Admin API\" and click \"enable\". Testing our deployment Navigate to the CloudBees CodeShip dashboard by clicking the boat in the upper left-hand corner. In your repository, edit the default route in the index.js file. Change it from \"welcome to our server\" to \"welcome to our updated server\" . Save the changes, commit them and push them to GitHub If you refresh the CloudBees CodeShip page you should see a build in progress. Click on it to follow the logs . You should see a set of numeric steps taking place to deploy your changes. Wait for all the steps to complete and then navigate to the \"App Engine\" page in Google Cloud. Click the link in the top-right that looks like https://new-project-385736.appspot.com/ and you should see the text \"welcome to our updated server\" . Additionally, on that dashboard there should be small text underneath the graph that says \"debug || source\" . Choose \"source\" . Click on the \"index.js\" file and you should see your updated source code in production. Your app is now deployed! Creating a Service Key - Google Cloud In your App Engine Dashboard: In the left navigation menu, select \"IAM & admin\" Click \"service accounts\" on the left-hand side. You should see one account Under the \"actions\" label, select the triple dot menu and choose \"Create Key\" Make sure JSON is selected and click \"create\" A key should have been saved to your computer","title":"Project Instructions"},{"location":"module-4/class-15/#push-yourself-further","text":"For the remainder of the class we will continue building your graduation app. After completing your homework from last night you should be able to now complete your SQL database. Remember, the goal here is to leave this class with a full database and server deployed and ready to be consumed by your React app in the next class, JS411.","title":"Push Yourself Further"},{"location":"module-4/class-15/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-15/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-16/","text":"Class 16: Final Presentations + Wrap-UP Work spares us from three evils: boredom, vice, and need.\u2003\u2014Voltaire Greet, Outline, and Objectify Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Communicating to other about web technology. Questions for Student Led Discussion Interview Challenge Student Presentations End of Course Evaluation Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 60 mins See Student Presentations List After presentations we'll be working on our Express servers and SQL databases. End of Course Feedback Take 5 - 10 minutes now to complete the End of Course Evaluation. This information is incredibly important to our organization to improve, grow our instructors, textbooks, and community. End of Course Evaluation Push Yourself Further If you've built your SQL database and connected it to your Express server then add a layer of authentication so your app can be deployed soon. IMPORTANT: In your next class we will focus on the frontend using React. We'll no longer be working on SQL and Express but it's important that you retain these skills, work on your backend and reference this textbook regularly. You are building a full-stack application to show to the world and prove to employers you are worth the salary you hope to gain. Use the time between classes to complete your backend so when you have the front-end skills you can easily connect them and host a fully functioning, impressive web app to show to your friends, family, and employers. Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 16 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Class 16 Presentations"},{"location":"module-4/class-16/#class-16-final-presentations-wrap-up","text":"Work spares us from three evils: boredom, vice, and need.\u2003\u2014Voltaire","title":"Class 16: Final Presentations + Wrap-UP"},{"location":"module-4/class-16/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - Today the student will learn and practice to understand: Communicating to other about web technology. Questions for Student Led Discussion Interview Challenge Student Presentations End of Course Evaluation Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-16/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-16/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-16/#student-presentations-60-mins","text":"See Student Presentations List After presentations we'll be working on our Express servers and SQL databases.","title":"Student Presentations, 60 mins"},{"location":"module-4/class-16/#end-of-course-feedback","text":"Take 5 - 10 minutes now to complete the End of Course Evaluation. This information is incredibly important to our organization to improve, grow our instructors, textbooks, and community. End of Course Evaluation","title":"End of Course Feedback"},{"location":"module-4/class-16/#push-yourself-further","text":"If you've built your SQL database and connected it to your Express server then add a layer of authentication so your app can be deployed soon. IMPORTANT: In your next class we will focus on the frontend using React. We'll no longer be working on SQL and Express but it's important that you retain these skills, work on your backend and reference this textbook regularly. You are building a full-stack application to show to the world and prove to employers you are worth the salary you hope to gain. Use the time between classes to complete your backend so when you have the front-end skills you can easily connect them and host a fully functioning, impressive web app to show to your friends, family, and employers.","title":"Push Yourself Further"},{"location":"module-4/class-16/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-16/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-16/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 16 Blog To Show You Know Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/hosting-pt2/","text":"Hosting Part Two: Buckets/Cloud Storage Great spirits have always encountered violent opposition from mediocre minds.\u2003\u2014Albert Einstein Overview Last class we learned about App Engine and how it's a useful tool for deploying our API. Today we are going to talk about another hosting option as we prepare you to segue into the JS411 course and learn about how things work on the frontend. Google Cloud (and AWS, etc) offer lots of tools to help developers deploy their systems to the cloud. This can seem overwhelming at first as we try to make sense of which each tool should be used for. App Engine works great for APIs (because it's a server) but what about for static files? Cloud Storage Cloud Storage is a bucket for storing files. It could host a collection of HTML, JavaScript, etc files that your frontend uses. Think about it like a folder on your computer . . . that's really all Cloud Storage is. The only difference, obviously, is that these files live in the cloud and not on our local machines. Feel free to check out the homepage for Cloud Storage and look at some of its capabilities. We don't need to understand all the information presented (in the doc) at this point. The question we have to ask right now is: What do we want to put in Cloud Storage? Well, we will use a very popular front-end framework for getting started . . . Create React App The developers at Facebook created a tool for people like us to create React app quickly and easily, it's called: create-react-app . It gives us all of the boilerplate for a basic React app with one simple command. Before we can use it we need to install create-react-app on our machines. Fortunately the installation is very easy since it's simply an NPM package. So we run the following command: npm i -g create-react-app . The \"-g\" stands for global . That means this npm package will be accessible no matter what directory we are in. The next step is creating the app. We do that with the following command: npx create-react-app myApp where \"myApp\" is the name of the app/folder you want to create. You'll see that a new folder will be created called \"myApp\". If we cd into that directory and then run npm start we will see the app running on localhost! That's great but what does it have to do with hosting? We will talk more about that in our homework. Practice It Globally install create-react-app: npm i -g create-react-app Follow the Getting Started instructions on the React Docs Use the create-react-app tool to make a new app called \"my-first-app\": npx create-react-app my-first-app cd into that folder: cd my-first-app and run your app: npm start Alter the main page, app.js so that it has your name is on it and displays on the screen Test it: npm start When satisfied, close the app: Ctrl + C Additional Resources YT, Google Cloud Tech - Google Cloud Storage Know Your Docs React Docs - CRA","title":"Hosting pt.2"},{"location":"module-4/hosting-pt2/#hosting-part-two-bucketscloud-storage","text":"Great spirits have always encountered violent opposition from mediocre minds.\u2003\u2014Albert Einstein","title":"Hosting Part Two: Buckets/Cloud Storage"},{"location":"module-4/hosting-pt2/#overview","text":"Last class we learned about App Engine and how it's a useful tool for deploying our API. Today we are going to talk about another hosting option as we prepare you to segue into the JS411 course and learn about how things work on the frontend. Google Cloud (and AWS, etc) offer lots of tools to help developers deploy their systems to the cloud. This can seem overwhelming at first as we try to make sense of which each tool should be used for. App Engine works great for APIs (because it's a server) but what about for static files?","title":"Overview"},{"location":"module-4/hosting-pt2/#cloud-storage","text":"Cloud Storage is a bucket for storing files. It could host a collection of HTML, JavaScript, etc files that your frontend uses. Think about it like a folder on your computer . . . that's really all Cloud Storage is. The only difference, obviously, is that these files live in the cloud and not on our local machines. Feel free to check out the homepage for Cloud Storage and look at some of its capabilities. We don't need to understand all the information presented (in the doc) at this point. The question we have to ask right now is: What do we want to put in Cloud Storage? Well, we will use a very popular front-end framework for getting started . . .","title":"Cloud Storage"},{"location":"module-4/hosting-pt2/#create-react-app","text":"The developers at Facebook created a tool for people like us to create React app quickly and easily, it's called: create-react-app . It gives us all of the boilerplate for a basic React app with one simple command. Before we can use it we need to install create-react-app on our machines. Fortunately the installation is very easy since it's simply an NPM package. So we run the following command: npm i -g create-react-app . The \"-g\" stands for global . That means this npm package will be accessible no matter what directory we are in. The next step is creating the app. We do that with the following command: npx create-react-app myApp where \"myApp\" is the name of the app/folder you want to create. You'll see that a new folder will be created called \"myApp\". If we cd into that directory and then run npm start we will see the app running on localhost! That's great but what does it have to do with hosting? We will talk more about that in our homework.","title":"Create React App"},{"location":"module-4/hosting-pt2/#practice-it","text":"Globally install create-react-app: npm i -g create-react-app Follow the Getting Started instructions on the React Docs Use the create-react-app tool to make a new app called \"my-first-app\": npx create-react-app my-first-app cd into that folder: cd my-first-app and run your app: npm start Alter the main page, app.js so that it has your name is on it and displays on the screen Test it: npm start When satisfied, close the app: Ctrl + C","title":"Practice It"},{"location":"module-4/hosting-pt2/#additional-resources","text":"YT, Google Cloud Tech - Google Cloud Storage","title":"Additional Resources"},{"location":"module-4/hosting-pt2/#know-your-docs","text":"React Docs - CRA","title":"Know Your Docs"},{"location":"module-4/introToCI-CD/","text":"Intro to CI/CD Amazing how we can light tomorrow with today.\u2003\u2014Elizabeth Barrett Browning We've learned so much in this course! From servers and RESTful APIs to Relational Databases and ER Diagrams to Authentication, Hashing, Tokens and Cookies...you should be filled with pride for your accomplishments! Now that you have a general understanding of how to setup and host a database, a server, and even a front-end client (the Creact-React-App) you're going to need a way to continually add functionality to it and serve it to the world without it breaking every time you merge new features in. In this lesson we are going to learn Continuous Integration & Continuous Development or CI/CD , what that entails and how to implement a low-cost technique of it using: GitHub as a code base repository GCP App Engine as our hosting solution and CodeShip as our code migrator to move our app's code from the repo to the host Overview CI/CD stands for Continuous Integration & Continuous Development . It's the process by which we automate our deployments so that we can deploy quickly and easily each time we merge new code to our main branch. This isn't something we build ourselves. . . instead there are tools for us to configure that help us move our code from it's repository out to the production environment of our choice(App Engine). When talking about CI/CD you often hear the word pipeline . That's because the \"pipeline\" refers to all the possible things we can do through the CI/CD process. These things often include installing dependencies, building our production build, running a suite tests, etc. Our pipeline is going to be rather simple, each time a merge happens to the main branch, trigger an automatic migration to App Engine, re-build, and re-deploy. That's it. The common CI/CD tools in the industry include: CircleCI Travis Jenkins CloudBees CodeShip Many of these tools offer free startup trials. We'll utilize CloudBees CodeShip's free low-tier membership. The point of this setup is that we can commit our code to GitHub and the CI/CD integration will realize we've made a change and take the appropriate action to deploy that change. Once it's set up, life becomes very easy for us! See It - CloudBees CodeShip Practice It Through this course you've learned how to model data, create an ER diagram to represent your data's model and its relationships, build a SQL database, build an Express server, and add a layer of authentication to it. This is no small feat. In the coming days you will be building the foundation of your graduation app's back end. Today's homework is to: Draw out your dataset requirements. Plan and build the basis of your SQL database. Build the folder structure of your Express server. After you finish this have a glass of wine or cola or other... and know you have a great start to building the app of your dreams. We'll bring this into class and continue working on it with the help of your instructor. Know Your Docs Be sure to read over these before class. CloudBees CodeShip Docs - Home Page","title":"Intro to CI/CD"},{"location":"module-4/introToCI-CD/#intro-to-cicd","text":"Amazing how we can light tomorrow with today.\u2003\u2014Elizabeth Barrett Browning We've learned so much in this course! From servers and RESTful APIs to Relational Databases and ER Diagrams to Authentication, Hashing, Tokens and Cookies...you should be filled with pride for your accomplishments! Now that you have a general understanding of how to setup and host a database, a server, and even a front-end client (the Creact-React-App) you're going to need a way to continually add functionality to it and serve it to the world without it breaking every time you merge new features in. In this lesson we are going to learn Continuous Integration & Continuous Development or CI/CD , what that entails and how to implement a low-cost technique of it using: GitHub as a code base repository GCP App Engine as our hosting solution and CodeShip as our code migrator to move our app's code from the repo to the host","title":"Intro to CI/CD"},{"location":"module-4/introToCI-CD/#overview","text":"CI/CD stands for Continuous Integration & Continuous Development . It's the process by which we automate our deployments so that we can deploy quickly and easily each time we merge new code to our main branch. This isn't something we build ourselves. . . instead there are tools for us to configure that help us move our code from it's repository out to the production environment of our choice(App Engine). When talking about CI/CD you often hear the word pipeline . That's because the \"pipeline\" refers to all the possible things we can do through the CI/CD process. These things often include installing dependencies, building our production build, running a suite tests, etc. Our pipeline is going to be rather simple, each time a merge happens to the main branch, trigger an automatic migration to App Engine, re-build, and re-deploy. That's it. The common CI/CD tools in the industry include: CircleCI Travis Jenkins CloudBees CodeShip Many of these tools offer free startup trials. We'll utilize CloudBees CodeShip's free low-tier membership. The point of this setup is that we can commit our code to GitHub and the CI/CD integration will realize we've made a change and take the appropriate action to deploy that change. Once it's set up, life becomes very easy for us!","title":"Overview"},{"location":"module-4/introToCI-CD/#see-it-cloudbees-codeship","text":"","title":"See It - CloudBees CodeShip"},{"location":"module-4/introToCI-CD/#practice-it","text":"Through this course you've learned how to model data, create an ER diagram to represent your data's model and its relationships, build a SQL database, build an Express server, and add a layer of authentication to it. This is no small feat. In the coming days you will be building the foundation of your graduation app's back end. Today's homework is to: Draw out your dataset requirements. Plan and build the basis of your SQL database. Build the folder structure of your Express server. After you finish this have a glass of wine or cola or other... and know you have a great start to building the app of your dreams. We'll bring this into class and continue working on it with the help of your instructor.","title":"Practice It"},{"location":"module-4/introToCI-CD/#know-your-docs","text":"Be sure to read over these before class. CloudBees CodeShip Docs - Home Page","title":"Know Your Docs"},{"location":"module-4/introToHosting/","text":"Intro to Hosting When the best things are not possible, the best may be made of those that are.\u2003\u2014Richard Hooker We've spent a lot of time in this course learning how to build APIs and we've practiced interfacing with these mostly through Postman on LOCALHOST. As a reminder, localhost is basically a local server that we run our code on for testing and development purposes. But what about when we want to get into production, actually serving our data and API to the public? Other people will need to access our application from wherever they are in the world and for that we need to learn about hosting. Now that we understand authentication we can safely do this! Overview Hosting is the process of making your application accessible to the internet. In the past, this involved buying a piece of hardware (a server), deploying your application to that server and creating your own firewall rules so that people could interface with your site or API. Nowadays there are numerous cloud services that do these types of things for us. One of those services is GCP, and since we have already used GCP to create our database, we will continue working with this technology. As a recap, Google Cloud Platform (GCP) is a service that allows us access to the hundreds of thousands of servers that Google uses to run its business. Amazon Web Services (AWS) works in a very similar way. When these big companies have extra server space they rent out the resources to us so that we can make use of them for our projects. So when we say the servers are \"in the cloud\", we really just mean that the actual hardware lives somewhere else and is configurable over the internet. We are going to use some of these resources to \"host\" our API. App Engine App Engine is one of the most popular tools that GCP(Google Cloud Platform) provides. All we need to do is deploy our code and App Engine takes care of the rest. If your website or API receives a sudden burst of traffic, App Engine will add more resources as necessary to handle it. We don't need to know everything about the internals of this tool, just that it makes a lot of sense for deploying an API. Other documentation will be provided so that you can do more research. Think about how you would have to scale servers without using the cloud. Think how slow your local server can be just running singular requests. Now think about the multiple requests per second of say, Lyft, Walmart or Amazon. See It - App Engine Practice It IMPORTANT NOTE: The following tutorial, while a helpful introduction, is slightly outdated. Pay careful attention to all the steps below. Navigate to this App Engine tutorial Follow the instructions for getting a sample app set up on App Engine using your Google Cloud account. Under \"Let's Get Started\" : Ignore the step that says to click the icon that looks like a pencil. Your terminal will already be open to where it needs to be. Under \"Time to write some code!\" Instead of cd nodejs-docs-samples/appengine/hello-world , type (or copy/paste) the following: cd nodejs-docs-samples/appengine/hello-world/standard Instead of npm install && npm start , type npm install && node app.js How do you add .env variables Additional Resources Article, Website.com - What is hosting? Know Your Docs GCP Docs - App Engine Tutorial, Medium - Hosting on GCP","title":"Hosting Intro"},{"location":"module-4/introToHosting/#intro-to-hosting","text":"When the best things are not possible, the best may be made of those that are.\u2003\u2014Richard Hooker We've spent a lot of time in this course learning how to build APIs and we've practiced interfacing with these mostly through Postman on LOCALHOST. As a reminder, localhost is basically a local server that we run our code on for testing and development purposes. But what about when we want to get into production, actually serving our data and API to the public? Other people will need to access our application from wherever they are in the world and for that we need to learn about hosting. Now that we understand authentication we can safely do this!","title":"Intro to Hosting"},{"location":"module-4/introToHosting/#overview","text":"Hosting is the process of making your application accessible to the internet. In the past, this involved buying a piece of hardware (a server), deploying your application to that server and creating your own firewall rules so that people could interface with your site or API. Nowadays there are numerous cloud services that do these types of things for us. One of those services is GCP, and since we have already used GCP to create our database, we will continue working with this technology. As a recap, Google Cloud Platform (GCP) is a service that allows us access to the hundreds of thousands of servers that Google uses to run its business. Amazon Web Services (AWS) works in a very similar way. When these big companies have extra server space they rent out the resources to us so that we can make use of them for our projects. So when we say the servers are \"in the cloud\", we really just mean that the actual hardware lives somewhere else and is configurable over the internet. We are going to use some of these resources to \"host\" our API.","title":"Overview"},{"location":"module-4/introToHosting/#app-engine","text":"App Engine is one of the most popular tools that GCP(Google Cloud Platform) provides. All we need to do is deploy our code and App Engine takes care of the rest. If your website or API receives a sudden burst of traffic, App Engine will add more resources as necessary to handle it. We don't need to know everything about the internals of this tool, just that it makes a lot of sense for deploying an API. Other documentation will be provided so that you can do more research. Think about how you would have to scale servers without using the cloud. Think how slow your local server can be just running singular requests. Now think about the multiple requests per second of say, Lyft, Walmart or Amazon.","title":"App Engine"},{"location":"module-4/introToHosting/#see-it-app-engine","text":"","title":"See It - App Engine"},{"location":"module-4/introToHosting/#practice-it","text":"IMPORTANT NOTE: The following tutorial, while a helpful introduction, is slightly outdated. Pay careful attention to all the steps below. Navigate to this App Engine tutorial Follow the instructions for getting a sample app set up on App Engine using your Google Cloud account. Under \"Let's Get Started\" : Ignore the step that says to click the icon that looks like a pencil. Your terminal will already be open to where it needs to be. Under \"Time to write some code!\" Instead of cd nodejs-docs-samples/appengine/hello-world , type (or copy/paste) the following: cd nodejs-docs-samples/appengine/hello-world/standard Instead of npm install && npm start , type npm install && node app.js How do you add .env variables","title":"Practice It"},{"location":"module-4/introToHosting/#additional-resources","text":"Article, Website.com - What is hosting?","title":"Additional Resources"},{"location":"module-4/introToHosting/#know-your-docs","text":"GCP Docs - App Engine Tutorial, Medium - Hosting on GCP","title":"Know Your Docs"},{"location":"module-4/wrappingUp/","text":"JS311 Wrap-Up In every difficult situation is potential value. Believe this, then begin looking for it.\u2003\u2014Norman Vincent Peale Overview Throughout this course we've learned all the necessary information to create APIs. We should be feeling like back-end engineers! You may have found this course easier (or harder) than doing work on the frontend (HTML) and that's ok. That just means you've developed a preference for which side of the stack you'd rather work on. You'll continue to flex your skills on the frontend in the next course but with more logic and dynamic abilities. To recap, we've learned how to develop and app in Node using the Node Package Manager, NPM which gives us access to download and use packages like Express to build servers more easily than doing it ourselves because it has built-in tools to manage Routes & Controllers . Along with Express we're able to make use of Node's mysql package so we can create all of the MySql CRUD statements including INSERT , SELECT , UPDATE , and DELETE . We've also learned how to use MySQL Workbench to connect to a Database Instance , initialize the data, and Model the Data with ERDs . In addition to securing our server's routes with a third-party like Auth0 , we've also learned how to deploy our server using App Engine on teh GCS/GCP and migrate our code with a CI/CD pipeline tool called CloudBees CodeShip . For Tomorrow Presentation Start creating a 3-minute presentation about what you've learned in this course. This could be a slideshow or a live coding demonstration surrounding your final project. Be prepared to share some of your learnings during our last class. Don't worry if you aren't the best public speaker . . . it's important to develop these skills as you will soon be collaborating with real teams! Continue Building As you've see in the past day of class we will have time to work on our graduation project. You should have already been able to model your data, develop your SQL database, and even create an ER Diagram with Workbench. Tonight let's work on our Express server. Hopefully you've made some plans of the routes you'll need and controllers that will be used. (If you haven't, let's do that now.) If you have, let's start coding those. Remember, you can use any one of the projects we've worked on so far to have a framework and starting point. All routes and controllers look the same with a few values changed here and there. Copy/paste until you have a working server. Remember to use Postman to test as you go and connect it to your SQL Database . Tomorrow in class after presentations we'll all work with the help of your instructor to continue building your server. Additional Resources To be a successful developer you need to have the curiosity and passion to problem solve. Start practicing each night with the puzzles given to you in the Interview Challenges and start looking for others at places like HackerRank , GeeksForGeeks , CodeWars , and LeetCode .","title":"Wrapping Up"},{"location":"module-4/wrappingUp/#js311-wrap-up","text":"In every difficult situation is potential value. Believe this, then begin looking for it.\u2003\u2014Norman Vincent Peale","title":"JS311 Wrap-Up"},{"location":"module-4/wrappingUp/#overview","text":"Throughout this course we've learned all the necessary information to create APIs. We should be feeling like back-end engineers! You may have found this course easier (or harder) than doing work on the frontend (HTML) and that's ok. That just means you've developed a preference for which side of the stack you'd rather work on. You'll continue to flex your skills on the frontend in the next course but with more logic and dynamic abilities. To recap, we've learned how to develop and app in Node using the Node Package Manager, NPM which gives us access to download and use packages like Express to build servers more easily than doing it ourselves because it has built-in tools to manage Routes & Controllers . Along with Express we're able to make use of Node's mysql package so we can create all of the MySql CRUD statements including INSERT , SELECT , UPDATE , and DELETE . We've also learned how to use MySQL Workbench to connect to a Database Instance , initialize the data, and Model the Data with ERDs . In addition to securing our server's routes with a third-party like Auth0 , we've also learned how to deploy our server using App Engine on teh GCS/GCP and migrate our code with a CI/CD pipeline tool called CloudBees CodeShip .","title":"Overview"},{"location":"module-4/wrappingUp/#for-tomorrow","text":"Presentation Start creating a 3-minute presentation about what you've learned in this course. This could be a slideshow or a live coding demonstration surrounding your final project. Be prepared to share some of your learnings during our last class. Don't worry if you aren't the best public speaker . . . it's important to develop these skills as you will soon be collaborating with real teams! Continue Building As you've see in the past day of class we will have time to work on our graduation project. You should have already been able to model your data, develop your SQL database, and even create an ER Diagram with Workbench. Tonight let's work on our Express server. Hopefully you've made some plans of the routes you'll need and controllers that will be used. (If you haven't, let's do that now.) If you have, let's start coding those. Remember, you can use any one of the projects we've worked on so far to have a framework and starting point. All routes and controllers look the same with a few values changed here and there. Copy/paste until you have a working server. Remember to use Postman to test as you go and connect it to your SQL Database . Tomorrow in class after presentations we'll all work with the help of your instructor to continue building your server.","title":"For Tomorrow"},{"location":"module-4/wrappingUp/#additional-resources","text":"To be a successful developer you need to have the curiosity and passion to problem solve. Start practicing each night with the puzzles given to you in the Interview Challenges and start looking for others at places like HackerRank , GeeksForGeeks , CodeWars , and LeetCode .","title":"Additional Resources"}]}